{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/ELK_FileBeats.md","hash":"0a214aed70827346440b22bfb39e93d10a3b3bc0","modified":1637635405000},{"_id":"source/_posts/ELK日常维护相关.md","hash":"452f43ef3f695009994c1effdd37c2d9103d1a30","modified":1637635405000},{"_id":"source/_posts/MySql-Document.md","hash":"a9d4b3bf87198a45f46dad1cb1b34d4d142f98b4","modified":1638148624000},{"_id":"source/_posts/OracleJDBC.md","hash":"6079a9039741c9bfc0c3888829eb3990d010aa2e","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比.md","hash":"dc3a3a0e2ff161ba20e2cb9d50f7473438230fbd","modified":1637635405000},{"_id":"source/_posts/azkaban简单搭建.md","hash":"4ddcbc7a21b416afed72791c132bceb7b3c632fc","modified":1637651978000},{"_id":"source/_posts/hexo使用技巧.md","hash":"656a063e1d459529468499b78f63e04570e068b9","modified":1637635405000},{"_id":"source/_posts/jenkins简单搭建.md","hash":"e5fc40ef2b6aa031f36f38f7594f210e219fe232","modified":1637635405000},{"_id":"source/_posts/linux日常维护命令.md","hash":"0e157853132c1bae31b954b24e70e22c9ee7d7d7","modified":1637635405000},{"_id":"source/_posts/logback日志配置模板.md","hash":"6df09fab7bbb26f7ea4966168958c1c6e501a2a0","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客.md","hash":"2865820ee98f2457d5339210516614c8c5f10c60","modified":1637635405000},{"_id":"source/_posts/官方文档解释MySQL最左匹配(最左前缀)原则.md","hash":"4c7ee62aa3a1cb7efdfb27d31157111de541560c","modified":1637635405000},{"_id":"source/_posts/搭建新项目的框架.md","hash":"08e6c191a70c1850a4c6a16a465b8f936a6c4f2a","modified":1637635405000},{"_id":"source/_posts/新闻翻译-1.md","hash":"2f16da80d4d4f480709b8e7a5615c54fd004ce69","modified":1637635405000},{"_id":"source/_posts/解决Dubbo无法处理自定义异常的问题.md","hash":"2d14b9aad29081a3bd66dc30b65c0315247a1f8d","modified":1637635405000},{"_id":"source/_posts/记一次用代码分辨坑爹保险产品的经历.md","hash":"1f4a7727df8a9ce950b022be33722a57001e2538","modified":1637635405000},{"_id":"source/categories/index.md","hash":"d0063d9c059bb0c75b651f7fae257a4dfd72f853","modified":1637635405000},{"_id":"source/images/avatar.jpeg","hash":"e0bc7ee8b5d9f352615bc5191900cee4d00b75f6","modified":1637635405000},{"_id":"source/tags/index.md","hash":"2a3a4f8d68aa46d2384bb874df9ba531ff9f7b9d","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/1.png","hash":"6691b221f5804cc57c05dc6f6d31557ca964d168","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/10.png","hash":"953a41c20cfb9f55fb6844369f6c6741d1583f0c","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/11.png","hash":"acdfc638d53fff0d5294eb8de5485c70476d8556","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/2.png","hash":"92d67a3e43214686c353c60b843c02ad499312af","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/3.png","hash":"f42fbd3e2e45e1901b663c2471aaf26fb1a130b1","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/4.png","hash":"f499b0151b134ffba8c3b35a575d3b5b75a7736a","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/5.png","hash":"1806ce631496ce65e064b491fa55002c42c37ff3","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/6.png","hash":"03e319daaba930df20d24518b07d60d6741bcd8e","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/7.png","hash":"7162a104c3221f34a37db0d0b46249fbd7b4d4db","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/8.png","hash":"1437585bf63705a501807940de6863c4ed5686fd","modified":1637635405000},{"_id":"source/_posts/ELK_FileBeats/9.png","hash":"205cc036f604167e5e4a8965661cd9192ace8de1","modified":1637635405000},{"_id":"source/_posts/ELK日常维护相关/1.png","hash":"fd6ce814339338d7dc9b05f0586ba41bae3948a7","modified":1637635405000},{"_id":"source/_posts/ELK日常维护相关/2.png","hash":"2d0e1de58b5b7c81918aca59c3a4b7d59485422c","modified":1637635405000},{"_id":"source/_posts/OracleJDBC/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1637635405000},{"_id":"source/_posts/OracleJDBC/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1637635405000},{"_id":"source/_posts/OracleJDBC/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1637635405000},{"_id":"source/_posts/OracleJDBC/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/1.png","hash":"b2709a0dbaedb54e05534b1fb246372b9aa7dd6c","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/2.png","hash":"82a294dedf18d33258af0886fd6aa2aaa56dcd42","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/4.png","hash":"88e04483420f1b5ae7cab61b8f3caedeaf0ac5ee","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/5.png","hash":"14d2988569f484cec58cea21298e5e4665e3ad0e","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/8.png","hash":"26546a053c8a49fea1e9893f9a72ba7a2ebb4abf","modified":1637635405000},{"_id":"source/_posts/azkaban简单搭建/1.png","hash":"0c69fea1bcf2569cf8d45433fc80f2b460df592b","modified":1637635405000},{"_id":"source/_posts/azkaban简单搭建/2.png","hash":"48628b399b48a52d5cb951ab53b35273452d49e8","modified":1637635405000},{"_id":"source/_posts/azkaban简单搭建/5.png","hash":"5a2b0f276d5ee38fad2f5bc5b6bbbb5aeb84aef6","modified":1637651541000},{"_id":"source/_posts/hexo使用技巧/3.png","hash":"270b27f40649917d057bb0e59c8ca739b1a3e1fd","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/4.png","hash":"c90c562815bd09bbc9ddb3c62a172fdab522b847","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/5.png","hash":"26356566412db3ec03a876c36b504a69aa2e93fe","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/7.png","hash":"5f01a0def272cbd01096dc16ad07c35a7452845e","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/8.png","hash":"e3ee3ba3af2738147ce6cd2f54fbd589ad90a2d2","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/9.png","hash":"cebd81bb85d77b9a9171549409ab1ee390588236","modified":1637635405000},{"_id":"source/_posts/jenkins简单搭建/1.png","hash":"f2050a0f5ec45d0274b3b084116bf4297bdfd7b9","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客/1.png","hash":"0133de0656e67b679760006f46448c9837697956","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客/2.png","hash":"53b39d19ca94050b98856ed12e43449801ab75c6","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客/4.png","hash":"65daa20bc2074699de6b134e5c8b77303bcd748a","modified":1637635405000},{"_id":"source/_posts/搭建框架中遇到的问题/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1637635405000},{"_id":"source/_posts/搭建框架中遇到的问题/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1637635405000},{"_id":"source/_posts/搭建框架中遇到的问题/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1637635405000},{"_id":"source/_posts/搭建框架中遇到的问题/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1637635405000},{"_id":"source/_posts/ELK日常维护相关/3.png","hash":"a7c196449555c806a398f0f79d989b1220bf1b70","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/3.png","hash":"9404bd8271cb97fbe33b2e1d141eb10d541c3210","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/6.png","hash":"a280800a6b91f35d77c0186db8c9148968ca0922","modified":1637635405000},{"_id":"source/_posts/azkaban简单搭建/3.png","hash":"ac701d76085c6256ee25a2a49950cc779a9ef76e","modified":1637650214000},{"_id":"source/_posts/azkaban简单搭建/4.png","hash":"0d19f30b14843ec359d0b32b900926177879dc8d","modified":1637650348000},{"_id":"source/_posts/azkaban简单搭建/6.png","hash":"0156f822284faf0a29321095772fbfeb481970d6","modified":1637651744000},{"_id":"source/_posts/hexo使用技巧/2.png","hash":"dc4c49df9458ae63bf695e9797beef73bdb3ae87","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/6.png","hash":"daa3fd44aec333c799774676d4d1fe17b9254a8a","modified":1637635405000},{"_id":"source/_posts/jenkins简单搭建/2.png","hash":"989790480aa6cd1cd0a03a1801fa2b427645f966","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客/3.png","hash":"fe767683bb0e68678e197cd021773f68ba0f3c9a","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/11.png","hash":"a02715d3b38d6a8de59d4fa78a5aedfbec53f0b7","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/9.png","hash":"391a949171d93a038d07befc5a3b819669669ae9","modified":1637635405000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1637567831000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/10.png","hash":"10b47285ca2b996119f1f8f42837b880d345994b","modified":1637635405000},{"_id":"source/_posts/Python数据爬虫实践-爬取历年东西部周最佳对比/7.png","hash":"2453862a15297498dbca9d8cf3d01bdcecd1528f","modified":1637635405000},{"_id":"source/_posts/利用hexo和github搭建个人博客/5.png","hash":"8c7ed210d33a08a2d4705996a0a6a42748ac98ff","modified":1637635405000},{"_id":"source/_posts/记一次用代码分辨坑爹保险产品的经历/1.png","hash":"920bfa9fe201dbbc9075eaed3741ec44368a422d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"0689d3281f35901334994480668a066d9b7b3fae","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"a9babdef991b0e7645f420c5a6b8e1a61b5d70d8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"9c2a66dfa63c5710490e942948cf185201655971","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"d3c094aaef1431fbc9df333529a7b1789ccd134c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c6b3c031d23b2a093e025c75b7cab6bc0379c6ea","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b1bcc5f9357a9f8b8d6f8f285f073aaf3157f9db","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"c8e95e8ac4cbdba01cb93e9e0569b45603e41bc6","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"0b3e2696eca39781c3524b2c5a2555ebc616e6e8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1637635405000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1637635405000},{"_id":"source/_posts/hexo使用技巧/1.png","hash":"a6b47ecfff86eb276a7ddf5afef467f836584bec","modified":1637635405000},{"_id":"public/search.xml","hash":"c68b957f7c5c11a383e72656425630bb65624cd7","modified":1648198993554},{"_id":"public/categories/index.html","hash":"e127441c56c6bf448a8d0d60be5e24b1b57d01da","modified":1648111882035},{"_id":"public/tags/index.html","hash":"8e43fce955142187a5215359da2d7cc14c2b058b","modified":1648111882035},{"_id":"public/2021/11/19/记一次用代码分辨坑爹保险产品的经历/index.html","hash":"45c6277d438dabef96ec1c855d9eb3469c22ea04","modified":1647240172779},{"_id":"public/2020/05/14/jenkins简单搭建/index.html","hash":"1a51cd333a5e5db886d90c9c7776413f56259ea3","modified":1647240172779},{"_id":"public/2020/04/29/azkaban简单搭建/index.html","hash":"d26fffdfe8f79c3fa3c2f034ec79aee9b11b4b21","modified":1647240172779},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/index.html","hash":"526e8f5c35c78a41eded05959304c7ef7a04b1f0","modified":1647240172779},{"_id":"public/2019/11/05/logback日志配置模板/index.html","hash":"64e69793e553a322e6ef2adf1a3eeb134b69c679","modified":1647240172779},{"_id":"public/2019/11/04/解决Dubbo无法处理自定义异常的问题/index.html","hash":"c817caa250f60c12e1f72cb09c2155f5642f5052","modified":1647240172779},{"_id":"public/2019/11/04/OracleJDBC/index.html","hash":"3b39e25a3ca598b54c6e02b408ce724e5a41a1bf","modified":1647240172779},{"_id":"public/2019/10/22/搭建新项目的框架/index.html","hash":"0643b94d0ec1b3855257c7e593a589a0c1194238","modified":1647240172779},{"_id":"public/2019/10/17/MySql-Document/index.html","hash":"77ba021ebe9f6ea3d19bebac6bff84a208f2c1a0","modified":1647240172779},{"_id":"public/2019/10/16/linux日常维护命令/index.html","hash":"51c771c518fc090792f9f64182bab50555d50839","modified":1647240172779},{"_id":"public/2019/10/15/官方文档解释MySQL最左匹配(最左前缀)原则/index.html","hash":"5fdb327a7d7b61a23c1c0f450d838447643f4114","modified":1647240172779},{"_id":"public/2019/10/14/ELK日常维护相关/index.html","hash":"f556383835802165765a9e4e835c1e22a76c6db6","modified":1647828987455},{"_id":"public/2019/10/10/新闻翻译-1/index.html","hash":"35e921cf5503a768afe21c821fa796e0542f9115","modified":1647240172779},{"_id":"public/2019/10/08/hexo使用技巧/index.html","hash":"a1dbb1b35bd87dd1a517d980fd4679090724e352","modified":1647828987455},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/index.html","hash":"77a727e39a1e5fe6b6464d36a680eb72dbe906ae","modified":1647240172779},{"_id":"public/2019/10/07/ELK_FileBeats/index.html","hash":"50a969a59dd33080fa83a4abffc77264e2b218fa","modified":1647240172779},{"_id":"public/archives/index.html","hash":"4499f29daa4595aee5e06731773411c6b828eef4","modified":1648111882035},{"_id":"public/archives/page/2/index.html","hash":"2d2a4b54c1a3077d04f1c416cb14562443db9bd7","modified":1648111882035},{"_id":"public/archives/2019/index.html","hash":"e1ab5af05c9d8f26ceb99c6a2d7aa1d32daaaf08","modified":1648111882035},{"_id":"public/archives/2019/page/2/index.html","hash":"56e78908f0a001ff4b676dd26f7d02856f6f87a7","modified":1648111882035},{"_id":"public/archives/2019/10/index.html","hash":"456dcb1b1335d06d3612b0cca19acd9b3292fb8a","modified":1648111882035},{"_id":"public/archives/2019/11/index.html","hash":"956e5e7b5f0bbbac437a577661bc133582a4bbdf","modified":1648111882035},{"_id":"public/archives/2020/index.html","hash":"fcd2e03e71e77dcc8d05ec336ef7d3ffd612ebf8","modified":1648111882035},{"_id":"public/archives/2020/04/index.html","hash":"a471ef4b0f207e9cec61ec50aa361d881c971a0a","modified":1648111882035},{"_id":"public/archives/2020/05/index.html","hash":"a2837a08cc52d18806fe6ea67f3c2bcefb8db24d","modified":1648111882035},{"_id":"public/archives/2021/index.html","hash":"11cff6382d0f7843bea544c01ddb174c64860ea0","modified":1648111882035},{"_id":"public/archives/2021/11/index.html","hash":"f9d46f70db1f554ff13975382371b841dc167d30","modified":1648111882035},{"_id":"public/categories/学习/index.html","hash":"f41c97ba2bca39092c0a1d7a42d6f7760882471c","modified":1648111882035},{"_id":"public/categories/学习/page/2/index.html","hash":"d5c1174a7adf99725153628d71c538984e9be489","modified":1648111882035},{"_id":"public/categories/学习/搭建相关/index.html","hash":"5055d7ec06be558de0749d4da0f9c4036f831ae5","modified":1648111882035},{"_id":"public/categories/学习/运维/index.html","hash":"16ca04268b0bdde96bf0d9f83137871b823cbd49","modified":1648111882035},{"_id":"public/categories/学习/数据库/index.html","hash":"03ba9a7ecbf200512e7c6a3532dee6ef01f10f93","modified":1648111882035},{"_id":"public/categories/学习/英语/index.html","hash":"7ccb1c0599916b0141b259a48d67ab5f2b35b268","modified":1648111882035},{"_id":"public/index.html","hash":"cc3fbedec5c47d7af08cc180f427e436ef4d3fc3","modified":1648198993554},{"_id":"public/page/2/index.html","hash":"7972af5bea68f0eee33d7e9ed374ac8c7f227f60","modified":1648111882035},{"_id":"public/tags/elk/index.html","hash":"375a58827e92b14ec0a6e3a934e586a9b1405912","modified":1648111882035},{"_id":"public/tags/solved/index.html","hash":"c5c305a068dece52ac88dd4e08950398a0d03ca9","modified":1648111882035},{"_id":"public/tags/python/index.html","hash":"d631f17d2215a6b82f71a3aedf5717d52bf94208","modified":1648111882035},{"_id":"public/tags/azkaban/index.html","hash":"2c531759b2b38f8edf16d977966100a46bfd5069","modified":1648111882035},{"_id":"public/tags/hexo/index.html","hash":"d2118a5092f5de44c781002d612f361d7dd498c3","modified":1648111882035},{"_id":"public/tags/jenkins/index.html","hash":"f8d7d1f959c955a02271dedde94db94f182aa593","modified":1648111882035},{"_id":"public/tags/linux/index.html","hash":"cc93bdf38134aa5f6923981fee52496b3d0b502a","modified":1648111882035},{"_id":"public/tags/github/index.html","hash":"33e1bb4653fa1ee00847d58bf87e1a3b4619f7bd","modified":1648111882035},{"_id":"public/tags/mysql/index.html","hash":"1c1deac34f56c7738354b5ccfe1df338491a65f3","modified":1648111882035},{"_id":"public/tags/translate/index.html","hash":"d15c1077e78ffb92d1482765ac6f41d7da739e41","modified":1648111882035},{"_id":"public/tags/news/index.html","hash":"557fc58d8dc15e144fa7bab1124da2d9e0d3be0c","modified":1648111882035},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637652018231},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1637652018231},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637652018231},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637652018231},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1637652018231},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/10.png","hash":"953a41c20cfb9f55fb6844369f6c6741d1583f0c","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/1.png","hash":"6691b221f5804cc57c05dc6f6d31557ca964d168","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/2.png","hash":"92d67a3e43214686c353c60b843c02ad499312af","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/11.png","hash":"acdfc638d53fff0d5294eb8de5485c70476d8556","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/3.png","hash":"f42fbd3e2e45e1901b663c2471aaf26fb1a130b1","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/4.png","hash":"f499b0151b134ffba8c3b35a575d3b5b75a7736a","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/5.png","hash":"1806ce631496ce65e064b491fa55002c42c37ff3","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/6.png","hash":"03e319daaba930df20d24518b07d60d6741bcd8e","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/7.png","hash":"7162a104c3221f34a37db0d0b46249fbd7b4d4db","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/8.png","hash":"1437585bf63705a501807940de6863c4ed5686fd","modified":1637652018231},{"_id":"public/2019/10/07/ELK_FileBeats/9.png","hash":"205cc036f604167e5e4a8965661cd9192ace8de1","modified":1637652018231},{"_id":"public/2019/10/14/ELK日常维护相关/1.png","hash":"fd6ce814339338d7dc9b05f0586ba41bae3948a7","modified":1637652018231},{"_id":"public/2019/10/14/ELK日常维护相关/2.png","hash":"2d0e1de58b5b7c81918aca59c3a4b7d59485422c","modified":1637652018231},{"_id":"public/2019/11/04/OracleJDBC/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1637652018231},{"_id":"public/2019/11/04/OracleJDBC/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1637652018231},{"_id":"public/2019/11/04/OracleJDBC/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1637652018231},{"_id":"public/2019/11/04/OracleJDBC/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/1.png","hash":"b2709a0dbaedb54e05534b1fb246372b9aa7dd6c","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/2.png","hash":"82a294dedf18d33258af0886fd6aa2aaa56dcd42","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/4.png","hash":"88e04483420f1b5ae7cab61b8f3caedeaf0ac5ee","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/5.png","hash":"14d2988569f484cec58cea21298e5e4665e3ad0e","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/8.png","hash":"26546a053c8a49fea1e9893f9a72ba7a2ebb4abf","modified":1637652018231},{"_id":"public/2020/04/29/azkaban简单搭建/1.png","hash":"0c69fea1bcf2569cf8d45433fc80f2b460df592b","modified":1637652018231},{"_id":"public/2020/04/29/azkaban简单搭建/2.png","hash":"48628b399b48a52d5cb951ab53b35273452d49e8","modified":1637652018231},{"_id":"public/2020/04/29/azkaban简单搭建/5.png","hash":"5a2b0f276d5ee38fad2f5bc5b6bbbb5aeb84aef6","modified":1637722811097},{"_id":"public/2019/10/08/hexo使用技巧/4.png","hash":"c90c562815bd09bbc9ddb3c62a172fdab522b847","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/3.png","hash":"270b27f40649917d057bb0e59c8ca739b1a3e1fd","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/5.png","hash":"26356566412db3ec03a876c36b504a69aa2e93fe","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/8.png","hash":"e3ee3ba3af2738147ce6cd2f54fbd589ad90a2d2","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/7.png","hash":"5f01a0def272cbd01096dc16ad07c35a7452845e","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/9.png","hash":"cebd81bb85d77b9a9171549409ab1ee390588236","modified":1637652018231},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/1.png","hash":"0133de0656e67b679760006f46448c9837697956","modified":1637652018231},{"_id":"public/2020/05/14/jenkins简单搭建/1.png","hash":"f2050a0f5ec45d0274b3b084116bf4297bdfd7b9","modified":1637652018231},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/2.png","hash":"53b39d19ca94050b98856ed12e43449801ab75c6","modified":1637652018231},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/4.png","hash":"65daa20bc2074699de6b134e5c8b77303bcd748a","modified":1637652018231},{"_id":"public/images/avatar.jpeg","hash":"e0bc7ee8b5d9f352615bc5191900cee4d00b75f6","modified":1637652018231},{"_id":"public/2019/10/14/ELK日常维护相关/3.png","hash":"a7c196449555c806a398f0f79d989b1220bf1b70","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/3.png","hash":"9404bd8271cb97fbe33b2e1d141eb10d541c3210","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/6.png","hash":"a280800a6b91f35d77c0186db8c9148968ca0922","modified":1637652018231},{"_id":"public/2020/04/29/azkaban简单搭建/3.png","hash":"ac701d76085c6256ee25a2a49950cc779a9ef76e","modified":1637722811097},{"_id":"public/2020/04/29/azkaban简单搭建/4.png","hash":"0d19f30b14843ec359d0b32b900926177879dc8d","modified":1637722811097},{"_id":"public/2020/04/29/azkaban简单搭建/6.png","hash":"0156f822284faf0a29321095772fbfeb481970d6","modified":1637722811097},{"_id":"public/2019/10/08/hexo使用技巧/2.png","hash":"dc4c49df9458ae63bf695e9797beef73bdb3ae87","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/6.png","hash":"daa3fd44aec333c799774676d4d1fe17b9254a8a","modified":1637652018231},{"_id":"public/2020/05/14/jenkins简单搭建/2.png","hash":"989790480aa6cd1cd0a03a1801fa2b427645f966","modified":1637652018231},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/3.png","hash":"fe767683bb0e68678e197cd021773f68ba0f3c9a","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/9.png","hash":"391a949171d93a038d07befc5a3b819669669ae9","modified":1637652018231},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1637652018231},{"_id":"public/css/main.css","hash":"3ba07da2cfa36f3773ee3d270596651bef839d0c","modified":1637652018231},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1637652018231},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1637652018231},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1637652018231},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1637652018231},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1637652018231},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1637652018231},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1637652018231},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1637652018231},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1637652018231},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1637652018231},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1637652018231},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1637652018231},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1637652018231},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1637652018231},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1637652018231},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1637652018231},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1637652018231},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1637652018231},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1637652018231},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1637652018231},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1637652018231},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1637652018231},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1637652018231},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1637652018231},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1637652018231},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1637652018231},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1637652018231},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1637652018231},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1637652018231},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1637652018231},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1637652018231},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1637652018231},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1637652018231},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1637652018231},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1637652018231},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/11.png","hash":"a02715d3b38d6a8de59d4fa78a5aedfbec53f0b7","modified":1637652018231},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/10.png","hash":"10b47285ca2b996119f1f8f42837b880d345994b","modified":1637652018231},{"_id":"public/2019/11/20/Python数据爬虫实践-爬取历年东西部周最佳对比/7.png","hash":"2453862a15297498dbca9d8cf3d01bdcecd1528f","modified":1637652018231},{"_id":"public/2019/10/08/利用hexo和github搭建个人博客/5.png","hash":"8c7ed210d33a08a2d4705996a0a6a42748ac98ff","modified":1637652018231},{"_id":"public/2021/11/19/记一次用代码分辨坑爹保险产品的经历/1.png","hash":"920bfa9fe201dbbc9075eaed3741ec44368a422d","modified":1637652018231},{"_id":"public/2019/10/08/hexo使用技巧/1.png","hash":"a6b47ecfff86eb276a7ddf5afef467f836584bec","modified":1637652018231},{"_id":"source/_posts/Express框架中使用get和post.md","hash":"ab7cd5d766b4a4f999043d06018f05bd24fdf53c","modified":1637894245000},{"_id":"public/2021/11/26/Express框架中使用get和post/index.html","hash":"8913a39531d0671a5e337d13517262445e1ebe79","modified":1647240172779},{"_id":"public/categories/学习/搭建相关/page/2/index.html","hash":"16e38deba11108b715ba1285e6ba0b2bca8229d0","modified":1648111882035},{"_id":"public/tags/node-js/index.html","hash":"631ad13b656f9a17c985bd2ecee782dcf400e710","modified":1648111882035},{"_id":"source/_posts/用curl计时.md","hash":"aef82fabe6697ae278bec41e936cf90936cc1b4a","modified":1638154249000},{"_id":"public/2021/11/29/用curl计时/index.html","hash":"7e1ecbc4416eb90015e5567d13a73914cd4ef173","modified":1647240172779},{"_id":"source/_posts/用ssh加密文件.md","hash":"25516889859d8f88139ce8761029f3f13e3669d9","modified":1638944942000},{"_id":"public/archives/2021/12/index.html","hash":"bc7ab834ce9aa6d54fc8565148f1c8d4e94a95f3","modified":1648111882035},{"_id":"public/2021/12/06/用ssh加密文件/index.html","hash":"48bc6d80d3a88bb1230bf6f984b06f1695ee5755","modified":1647240172779},{"_id":"source/_posts/新闻翻译-2.md","hash":"f878a6dfcde4656e049db63f4daa2004fb0cfbcf","modified":1639105293000},{"_id":"source/_posts/新闻翻译-2/1.png","hash":"ff50a2f2a6c89b89c56cd70060f758d8afaff529","modified":1639100992000},{"_id":"public/2021/12/09/新闻翻译-2/index.html","hash":"dcca8f15a9be695c9a29d780e3c928ad33ed3d70","modified":1647240172779},{"_id":"public/2021/12/09/新闻翻译-2/1.png","hash":"ff50a2f2a6c89b89c56cd70060f758d8afaff529","modified":1639105307629},{"_id":"source/_posts/新闻翻译-3/C'mon C'mon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639380149000},{"_id":"source/_posts/新闻翻译-3/Parallel Mothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1639384688000},{"_id":"source/_posts/新闻翻译-3/Passing.jpeg","hash":"5727e1efb57beeff2ee3783c127e422b262ee77b","modified":1639383968000},{"_id":"source/_posts/新闻翻译-3/Summer of Soul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1639447862000},{"_id":"source/_posts/新闻翻译-3/The Disciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1639383300000},{"_id":"source/_posts/新闻翻译-3/The Power of the Dog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1639447961000},{"_id":"source/_posts/新闻翻译-3/The Souvenir Part II.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1639385367000},{"_id":"source/_posts/新闻翻译-3/The Tragedy of Macbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1639377598000},{"_id":"source/_posts/新闻翻译-3/The Worst Person in the World.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1639447927000},{"_id":"source/_posts/新闻翻译-3.md","hash":"1f149475fb003f219686f9e68130042480a9b928","modified":1640676721000},{"_id":"source/_posts/新闻翻译-3/Drive My Car.jpg","hash":"4ea8f6f3f0da9f7b1ec9de32f890fe3373a6da62","modified":1639377401000},{"_id":"public/2021/12/13/新闻翻译-3/index.html","hash":"c90ba0130f768df306735210cb64003c80ea42b8","modified":1647240172779},{"_id":"public/archives/page/3/index.html","hash":"dd07ff9d46ce86f8e8bb615bb9c4bcccfed0fb97","modified":1648111882035},{"_id":"public/page/3/index.html","hash":"f3af32100210a7541d8633dc42716e84b3c2ecd7","modified":1648111882035},{"_id":"public/2021/12/13/新闻翻译-3/C'mon C'mon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/Parallel Mothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/Passing.jpeg","hash":"5727e1efb57beeff2ee3783c127e422b262ee77b","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/Summer of Soul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/The Disciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/The Power of the Dog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/The Souvenir Part II.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/The Tragedy of Macbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/The Worst Person in the World.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1639448129293},{"_id":"public/2021/12/13/新闻翻译-3/Drive My Car.jpg","hash":"4ea8f6f3f0da9f7b1ec9de32f890fe3373a6da62","modified":1639448129293},{"_id":"source/_posts/新闻翻译-3/C'monC'mon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639380149000},{"_id":"source/_posts/新闻翻译-3/ParallelMothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1639384688000},{"_id":"source/_posts/新闻翻译-3/SummerofSoul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1639447862000},{"_id":"source/_posts/新闻翻译-3/TheDisciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1639383300000},{"_id":"source/_posts/新闻翻译-3/ThePoweroftheDog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1639447961000},{"_id":"source/_posts/新闻翻译-3/TheSouvenirPartII.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1639385367000},{"_id":"source/_posts/新闻翻译-3/TheTragedyofMacbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1639377598000},{"_id":"source/_posts/新闻翻译-3/TheWorstPersonintheWorld.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1639447927000},{"_id":"source/_posts/新闻翻译-3/DriveMyCar.jpg","hash":"4ea8f6f3f0da9f7b1ec9de32f890fe3373a6da62","modified":1639377401000},{"_id":"public/2021/12/13/新闻翻译-3/C'monC'mon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/ParallelMothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/SummerofSoul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/TheDisciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/ThePoweroftheDog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/TheTragedyofMacbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/TheSouvenirPartII.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/TheWorstPersonintheWorld.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1639448380375},{"_id":"public/2021/12/13/新闻翻译-3/DriveMyCar.jpg","hash":"4ea8f6f3f0da9f7b1ec9de32f890fe3373a6da62","modified":1639448380375},{"_id":"source/_posts/新闻翻译-3/DriveMyCar.jpeg","hash":"ba32c6466d226c64bb090d9158c8cbfc67d71b5e","modified":1639448732000},{"_id":"source/_posts/新闻翻译-3/CmonCmon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639380149000},{"_id":"public/2021/12/13/新闻翻译-3/CmonCmon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639448763230},{"_id":"public/2021/12/13/新闻翻译-3/DriveMyCar.jpeg","hash":"ba32c6466d226c64bb090d9158c8cbfc67d71b5e","modified":1639448763230},{"_id":"source/_posts/linux版本过低情况下使用高版本nodejs.md","hash":"97123356c49bb63e058aee14e45b60f92ee5be1e","modified":1640151378000},{"_id":"public/2021/12/17/linux版本过低情况下使用高版本nodejs/index.html","hash":"22554488034ace4c8c37f157e554524546eecd2c","modified":1647240172779},{"_id":"public/categories/学习/page/3/index.html","hash":"9875c60831f014634d77fde5e62807bd7a367347","modified":1648111882035},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏.md","hash":"500549892c6cfdd5bea8e046202d61d302a3f6ed","modified":1640676714000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/hitman3.jpg","hash":"90db34426ca07bbdcb5dee9bcd732e80402338e0","modified":1640325360000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/ittakestwo.jpeg","hash":"7bc31140b7dcca7c2f19697885cf9154e4ea1f64","modified":1640325377000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/deathloop.jpeg","hash":"6aebaa5f36e2fe2d97292b7e72af6fc01fc4bbf9","modified":1640325322000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/discoelysium.jpeg","hash":"91a28c2a3637ddd9bdc6961113f7fe3c65cb8d85","modified":1640325408000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/masseffect.jpeg","hash":"34a3368f0bb89ed13f1dc055f44ff92e9434df9e","modified":1640325336000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/psychonauts2.jpeg","hash":"4f898842a94857e18d4e0753fd28b9c0b1a09293","modified":1640325387000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/forzahorizon5.jpeg","hash":"69374b9f57c0cea4f5651bb9e9d58455d2e99610","modified":1640325399000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/wildermyth.jpeg","hash":"f8e15610b4620f8170b3695ded07be3cf7164a72","modified":1640325350000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/enderlilies.jpg","hash":"db183c118f76b1efaeff8c96169b4f82fb328f76","modified":1640325268000},{"_id":"source/_posts/新闻翻译-Metacritic评选的2021年度十佳pc游戏/chicory.jpg","hash":"ea16203325b56477de5a7e67f407e2aa43a2ca4d","modified":1640325635000},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/index.html","hash":"353859165bc9fda8ad7d1536871627687f9d6888","modified":1647240172779},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/hitman3.jpg","hash":"90db34426ca07bbdcb5dee9bcd732e80402338e0","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/ittakestwo.jpeg","hash":"7bc31140b7dcca7c2f19697885cf9154e4ea1f64","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/discoelysium.jpeg","hash":"91a28c2a3637ddd9bdc6961113f7fe3c65cb8d85","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/deathloop.jpeg","hash":"6aebaa5f36e2fe2d97292b7e72af6fc01fc4bbf9","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/masseffect.jpeg","hash":"34a3368f0bb89ed13f1dc055f44ff92e9434df9e","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/psychonauts2.jpeg","hash":"4f898842a94857e18d4e0753fd28b9c0b1a09293","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/forzahorizon5.jpeg","hash":"69374b9f57c0cea4f5651bb9e9d58455d2e99610","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/wildermyth.jpeg","hash":"f8e15610b4620f8170b3695ded07be3cf7164a72","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/chicory.jpg","hash":"ea16203325b56477de5a7e67f407e2aa43a2ca4d","modified":1640674648842},{"_id":"public/2021/12/24/新闻翻译-Metacritic评选的2021年度十佳pc游戏/enderlilies.jpg","hash":"db183c118f76b1efaeff8c96169b4f82fb328f76","modified":1640674648842},{"_id":"source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1640679834000},{"_id":"public/404.html","hash":"d11b89ffaea549459196ab6f1baeb7e427e8759b","modified":1648111882035},{"_id":"source/_posts/新闻翻译-地质发现罕见的中古符文.md","hash":"7fc0493dd0b268beac9af156df46316b24c26f46","modified":1642150588000},{"_id":"source/_posts/新闻翻译-地质发现罕见的中古符文/bone2.png","hash":"d3fdf042e4f66fd5930115f364c2a206dcd44580","modified":1642060132000},{"_id":"source/_posts/新闻翻译-地质发现罕见的中古符文/bone3.png","hash":"778a47d733b17439508853eac6cfff5aab092654","modified":1642147382000},{"_id":"source/_posts/新闻翻译-地质发现罕见的中古符文/bone.png","hash":"5a3452a1c5b4e136b24505792afe702265fa4d76","modified":1642057748000},{"_id":"public/2022/01/13/新闻翻译-地质发现罕见的中古符文/index.html","hash":"5d615374acc34c4b5cfb993b4c985b66490b3726","modified":1647240172779},{"_id":"public/archives/2022/index.html","hash":"6b067afcf0fc7698982414258284bf5bc4fe58d3","modified":1648111882035},{"_id":"public/archives/2022/01/index.html","hash":"efe021d6e2ff6a210cc86f6df577880ad90c7ab2","modified":1648111882035},{"_id":"public/2022/01/13/新闻翻译-地质发现罕见的中古符文/bone2.png","hash":"d3fdf042e4f66fd5930115f364c2a206dcd44580","modified":1642150606647},{"_id":"public/2022/01/13/新闻翻译-地质发现罕见的中古符文/bone.png","hash":"5a3452a1c5b4e136b24505792afe702265fa4d76","modified":1642150606647},{"_id":"public/2022/01/13/新闻翻译-地质发现罕见的中古符文/bone3.png","hash":"778a47d733b17439508853eac6cfff5aab092654","modified":1642150606647},{"_id":"source/_posts/技术博客翻译-12例bash脚本最佳实践.md","hash":"68ffc952dffe868c5c126c7e74e405686508bf85","modified":1642638905000},{"_id":"public/2022/01/18/技术博客翻译-12例bash脚本最佳实践/index.html","hash":"075a4375dfa49a877bcfa7fb2ec1b7d5efc476b2","modified":1647240172779},{"_id":"public/tags/translate/page/2/index.html","hash":"e41c0256ce6690e5cf01ce0184cb42bc64ee00ab","modified":1648111882035},{"_id":"source/_posts/一周技术博客收集-20210117.md","hash":"dad4e0dbdc3cc9801ea0940b217e1daf0514d88e","modified":1643093513000},{"_id":"source/_posts/一周技术博客收集-20210117/blog.jpg","hash":"e5c2f8efcd64b7aa5712672788aff3cb5bd244a1","modified":1642727932000},{"_id":"source/_posts/一周技术博客收集-20210117/programmerhumor.png","hash":"a8b523acc42ea9d454c3b6be4c517b9e8a11610c","modified":1642561029000},{"_id":"source/_posts/一周技术博客收集-20210117/map1.png","hash":"5fa1768fe90dac671813abc7c6e895cdb56148c2","modified":1642645529000},{"_id":"public/2022/01/19/一周技术博客收集-20210117/index.html","hash":"b2101127524bfe200e08d7c6a69e77d48d12a671","modified":1647240172779},{"_id":"public/categories/一周文章收集/index.html","hash":"88ee2c0a96ea0b79e24c5e0490bcb368e7b195a8","modified":1648111882035},{"_id":"public/2022/01/19/一周技术博客收集-20210117/blog.jpg","hash":"e5c2f8efcd64b7aa5712672788aff3cb5bd244a1","modified":1643005616011},{"_id":"public/2022/01/19/一周技术博客收集-20210117/map1.png","hash":"5fa1768fe90dac671813abc7c6e895cdb56148c2","modified":1643005616011},{"_id":"public/2022/01/19/一周技术博客收集-20210117/programmerhumor.png","hash":"a8b523acc42ea9d454c3b6be4c517b9e8a11610c","modified":1643005616011},{"_id":"source/_posts/一周技术博客收集-20220124.md","hash":"ef0f58ca85225205541c16bdf5823b5c9554be5a","modified":1643098069000},{"_id":"source/_posts/一周技术博客收集-20220124/wordle.png","hash":"b4912c5fa210c6c7342b47e2ca10d06af9b37b9d","modified":1643093473000},{"_id":"public/2022/01/25/一周技术博客收集-20220124/index.html","hash":"d547dc509a4491bd6195f0059f57a0dd97e3520e","modified":1647240172779},{"_id":"public/2022/01/25/一周技术博客收集-20220124/wordle.png","hash":"b4912c5fa210c6c7342b47e2ca10d06af9b37b9d","modified":1643100287625},{"_id":"source/_posts/读书笔记-置身事内.md","hash":"7bc9bb682263bd54f78358dd1c4029b299291c2d","modified":1647583488000},{"_id":"public/categories/读书笔记/index.html","hash":"8e338353c4b8bdb3ddb3ee75a0b73a98a75986ef","modified":1648111882035},{"_id":"public/2022/03/14/读书笔记-置身事内/index.html","hash":"cee8ee962302b77de235d4fe06c1abb8954be0b1","modified":1647828987455},{"_id":"public/archives/2022/03/index.html","hash":"06d397738325baf1f88a2297200de595c2506ba7","modified":1648111882035},{"_id":"source/_posts/读书笔记-置身事内/1.jpg","hash":"baaa007e6090b512c083ff9eb82806732c3cf822","modified":1647331510000},{"_id":"public/2022/03/14/读书笔记-置身事内/1.jpg","hash":"baaa007e6090b512c083ff9eb82806732c3cf822","modified":1647331644249},{"_id":"source/_posts/news/新闻翻译-1.md","hash":"2f16da80d4d4f480709b8e7a5615c54fd004ce69","modified":1637653058000},{"_id":"source/_posts/news/新闻翻译-2/1.png","hash":"ff50a2f2a6c89b89c56cd70060f758d8afaff529","modified":1639100992000},{"_id":"public/2019/10/10/news/新闻翻译-1/index.html","hash":"10e729de6ea1c9aad2abc5c312f8891f6cebe693","modified":1648111882035},{"_id":"source/_posts/news/新闻翻译-3/DriveMyCar.jpeg","hash":"ba32c6466d226c64bb090d9158c8cbfc67d71b5e","modified":1639448732000},{"_id":"source/_posts/news/新闻翻译-3/ParallelMothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1639384688000},{"_id":"source/_posts/news/新闻翻译-3/Passing.jpeg","hash":"5727e1efb57beeff2ee3783c127e422b262ee77b","modified":1639383968000},{"_id":"source/_posts/news/新闻翻译-3/SummerofSoul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1639447862000},{"_id":"source/_posts/news/新闻翻译-3/TheDisciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1639383300000},{"_id":"source/_posts/news/新闻翻译-3/ThePoweroftheDog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1639447961000},{"_id":"source/_posts/news/新闻翻译-3/TheSouvenirPartII.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1639385367000},{"_id":"source/_posts/news/新闻翻译-3/TheTragedyofMacbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1639377598000},{"_id":"source/_posts/news/新闻翻译-3/TheWorstPersonintheWorld.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1639447927000},{"_id":"source/_posts/news/新闻翻译-3/CmonCmon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1639380149000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/hitman3.jpg","hash":"90db34426ca07bbdcb5dee9bcd732e80402338e0","modified":1640325360000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/deathloop.jpeg","hash":"6aebaa5f36e2fe2d97292b7e72af6fc01fc4bbf9","modified":1640325322000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/discoelysium.jpeg","hash":"91a28c2a3637ddd9bdc6961113f7fe3c65cb8d85","modified":1640325408000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/enderlilies.jpg","hash":"db183c118f76b1efaeff8c96169b4f82fb328f76","modified":1640325268000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/ittakestwo.jpeg","hash":"7bc31140b7dcca7c2f19697885cf9154e4ea1f64","modified":1640325377000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/psychonauts2.jpeg","hash":"4f898842a94857e18d4e0753fd28b9c0b1a09293","modified":1640325387000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/masseffect.jpeg","hash":"34a3368f0bb89ed13f1dc055f44ff92e9434df9e","modified":1640325336000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/forzahorizon5.jpeg","hash":"69374b9f57c0cea4f5651bb9e9d58455d2e99610","modified":1640325399000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/chicory.jpg","hash":"ea16203325b56477de5a7e67f407e2aa43a2ca4d","modified":1640325635000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/wildermyth.jpeg","hash":"f8e15610b4620f8170b3695ded07be3cf7164a72","modified":1640325350000},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone.png","hash":"5a3452a1c5b4e136b24505792afe702265fa4d76","modified":1642057748000},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone3.png","hash":"778a47d733b17439508853eac6cfff5aab092654","modified":1642147382000},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone2.png","hash":"d3fdf042e4f66fd5930115f364c2a206dcd44580","modified":1642060132000},{"_id":"source/_posts/tech/OracleJDBC/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1637653058000},{"_id":"source/_posts/tech/OracleJDBC/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1637653058000},{"_id":"source/_posts/tech/OracleJDBC/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1637653058000},{"_id":"source/_posts/tech/OracleJDBC/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/1.png","hash":"b2709a0dbaedb54e05534b1fb246372b9aa7dd6c","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/4.png","hash":"88e04483420f1b5ae7cab61b8f3caedeaf0ac5ee","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/5.png","hash":"14d2988569f484cec58cea21298e5e4665e3ad0e","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/8.png","hash":"26546a053c8a49fea1e9893f9a72ba7a2ebb4abf","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/2.png","hash":"82a294dedf18d33258af0886fd6aa2aaa56dcd42","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/3.png","hash":"9404bd8271cb97fbe33b2e1d141eb10d541c3210","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/6.png","hash":"a280800a6b91f35d77c0186db8c9148968ca0922","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/9.png","hash":"391a949171d93a038d07befc5a3b819669669ae9","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/11.png","hash":"a02715d3b38d6a8de59d4fa78a5aedfbec53f0b7","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/10.png","hash":"10b47285ca2b996119f1f8f42837b880d345994b","modified":1637653058000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/7.png","hash":"2453862a15297498dbca9d8cf3d01bdcecd1528f","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/1.png","hash":"0c69fea1bcf2569cf8d45433fc80f2b460df592b","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/2.png","hash":"48628b399b48a52d5cb951ab53b35273452d49e8","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/5.png","hash":"5a2b0f276d5ee38fad2f5bc5b6bbbb5aeb84aef6","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/4.png","hash":"0d19f30b14843ec359d0b32b900926177879dc8d","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/6.png","hash":"0156f822284faf0a29321095772fbfeb481970d6","modified":1637653058000},{"_id":"source/_posts/tech/azkaban简单搭建/3.png","hash":"ac701d76085c6256ee25a2a49950cc779a9ef76e","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/1.png","hash":"6691b221f5804cc57c05dc6f6d31557ca964d168","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/10.png","hash":"953a41c20cfb9f55fb6844369f6c6741d1583f0c","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/2.png","hash":"92d67a3e43214686c353c60b843c02ad499312af","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/3.png","hash":"f42fbd3e2e45e1901b663c2471aaf26fb1a130b1","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/4.png","hash":"f499b0151b134ffba8c3b35a575d3b5b75a7736a","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/5.png","hash":"1806ce631496ce65e064b491fa55002c42c37ff3","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/6.png","hash":"03e319daaba930df20d24518b07d60d6741bcd8e","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/7.png","hash":"7162a104c3221f34a37db0d0b46249fbd7b4d4db","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/8.png","hash":"1437585bf63705a501807940de6863c4ed5686fd","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/9.png","hash":"205cc036f604167e5e4a8965661cd9192ace8de1","modified":1637653058000},{"_id":"source/_posts/tech/ELK_FileBeats/11.png","hash":"acdfc638d53fff0d5294eb8de5485c70476d8556","modified":1637653058000},{"_id":"source/_posts/tech/ELK日常维护相关/1.png","hash":"fd6ce814339338d7dc9b05f0586ba41bae3948a7","modified":1637653058000},{"_id":"source/_posts/tech/ELK日常维护相关/2.png","hash":"2d0e1de58b5b7c81918aca59c3a4b7d59485422c","modified":1637653058000},{"_id":"source/_posts/tech/ELK日常维护相关/3.png","hash":"a7c196449555c806a398f0f79d989b1220bf1b70","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/3.png","hash":"270b27f40649917d057bb0e59c8ca739b1a3e1fd","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/4.png","hash":"c90c562815bd09bbc9ddb3c62a172fdab522b847","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/5.png","hash":"26356566412db3ec03a876c36b504a69aa2e93fe","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/7.png","hash":"5f01a0def272cbd01096dc16ad07c35a7452845e","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/8.png","hash":"e3ee3ba3af2738147ce6cd2f54fbd589ad90a2d2","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/9.png","hash":"cebd81bb85d77b9a9171549409ab1ee390588236","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/6.png","hash":"daa3fd44aec333c799774676d4d1fe17b9254a8a","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/2.png","hash":"dc4c49df9458ae63bf695e9797beef73bdb3ae87","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧/1.png","hash":"a6b47ecfff86eb276a7ddf5afef467f836584bec","modified":1637653058000},{"_id":"source/_posts/tech/jenkins简单搭建/1.png","hash":"f2050a0f5ec45d0274b3b084116bf4297bdfd7b9","modified":1637653058000},{"_id":"source/_posts/tech/jenkins简单搭建/2.png","hash":"989790480aa6cd1cd0a03a1801fa2b427645f966","modified":1637653058000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/1.png","hash":"0133de0656e67b679760006f46448c9837697956","modified":1637653058000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/2.png","hash":"53b39d19ca94050b98856ed12e43449801ab75c6","modified":1637653058000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/4.png","hash":"65daa20bc2074699de6b134e5c8b77303bcd748a","modified":1637653058000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/3.png","hash":"fe767683bb0e68678e197cd021773f68ba0f3c9a","modified":1637653058000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/5.png","hash":"8c7ed210d33a08a2d4705996a0a6a42748ac98ff","modified":1637653058000},{"_id":"source/_posts/tech/搭建框架中遇到的问题/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1637653058000},{"_id":"source/_posts/tech/搭建框架中遇到的问题/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1637653058000},{"_id":"source/_posts/tech/搭建框架中遇到的问题/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1637653058000},{"_id":"source/_posts/tech/搭建框架中遇到的问题/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1637653058000},{"_id":"source/_posts/tech/记一次用代码分辨坑爹保险产品的经历/1.png","hash":"920bfa9fe201dbbc9075eaed3741ec44368a422d","modified":1637653058000},{"_id":"source/_posts/blog/一周技术博客收集-20210117/blog.jpg","hash":"e5c2f8efcd64b7aa5712672788aff3cb5bd244a1","modified":1642727932000},{"_id":"source/_posts/blog/一周技术博客收集-20210117/programmerhumor.png","hash":"a8b523acc42ea9d454c3b6be4c517b9e8a11610c","modified":1642561029000},{"_id":"source/_posts/blog/一周技术博客收集-20210117/map1.png","hash":"5fa1768fe90dac671813abc7c6e895cdb56148c2","modified":1642645529000},{"_id":"source/_posts/blog/一周技术博客收集-20220124/wordle.png","hash":"b4912c5fa210c6c7342b47e2ca10d06af9b37b9d","modified":1643093473000},{"_id":"source/_posts/read/读书笔记-置身事内/1.jpg","hash":"baaa007e6090b512c083ff9eb82806732c3cf822","modified":1647331510000},{"_id":"source/_posts/news/新闻翻译-2.md","hash":"f878a6dfcde4656e049db63f4daa2004fb0cfbcf","modified":1639105293000},{"_id":"source/_posts/blog/一周技术博客收集-20220124.md","hash":"ef0f58ca85225205541c16bdf5823b5c9554be5a","modified":1643098069000},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏.md","hash":"500549892c6cfdd5bea8e046202d61d302a3f6ed","modified":1640676714000},{"_id":"source/_posts/news/新闻翻译-3.md","hash":"1f149475fb003f219686f9e68130042480a9b928","modified":1640676721000},{"_id":"source/_posts/read/读书笔记-置身事内.md","hash":"7bc9bb682263bd54f78358dd1c4029b299291c2d","modified":1647583488000},{"_id":"source/_posts/blog/一周技术博客收集-20210117.md","hash":"dad4e0dbdc3cc9801ea0940b217e1daf0514d88e","modified":1643093513000},{"_id":"source/_posts/blog/技术博客翻译-12例bash脚本最佳实践.md","hash":"68ffc952dffe868c5c126c7e74e405686508bf85","modified":1642638905000},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文.md","hash":"7fc0493dd0b268beac9af156df46316b24c26f46","modified":1642150588000},{"_id":"source/_posts/tech/ELK_FileBeats.md","hash":"0a214aed70827346440b22bfb39e93d10a3b3bc0","modified":1637653058000},{"_id":"source/_posts/tech/ELK日常维护相关.md","hash":"452f43ef3f695009994c1effdd37c2d9103d1a30","modified":1637653058000},{"_id":"source/_posts/tech/Express框架中使用get和post.md","hash":"ab7cd5d766b4a4f999043d06018f05bd24fdf53c","modified":1637894245000},{"_id":"source/_posts/tech/OracleJDBC.md","hash":"6079a9039741c9bfc0c3888829eb3990d010aa2e","modified":1637653058000},{"_id":"source/_posts/tech/MySql-Document.md","hash":"a9d4b3bf87198a45f46dad1cb1b34d4d142f98b4","modified":1638148624000},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比.md","hash":"dc3a3a0e2ff161ba20e2cb9d50f7473438230fbd","modified":1637653058000},{"_id":"source/_posts/tech/jenkins简单搭建.md","hash":"e5fc40ef2b6aa031f36f38f7594f210e219fe232","modified":1637653058000},{"_id":"source/_posts/tech/linux日常维护命令.md","hash":"0e157853132c1bae31b954b24e70e22c9ee7d7d7","modified":1637653058000},{"_id":"source/_posts/tech/logback日志配置模板.md","hash":"6df09fab7bbb26f7ea4966168958c1c6e501a2a0","modified":1637653058000},{"_id":"source/_posts/tech/linux版本过低情况下使用高版本nodejs.md","hash":"97123356c49bb63e058aee14e45b60f92ee5be1e","modified":1640151378000},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客.md","hash":"2865820ee98f2457d5339210516614c8c5f10c60","modified":1637653058000},{"_id":"source/_posts/tech/hexo使用技巧.md","hash":"656a063e1d459529468499b78f63e04570e068b9","modified":1637653058000},{"_id":"source/_posts/tech/官方文档解释MySQL最左匹配(最左前缀)原则.md","hash":"4c7ee62aa3a1cb7efdfb27d31157111de541560c","modified":1637653058000},{"_id":"source/_posts/tech/搭建新项目的框架.md","hash":"08e6c191a70c1850a4c6a16a465b8f936a6c4f2a","modified":1637653058000},{"_id":"source/_posts/tech/用curl计时.md","hash":"aef82fabe6697ae278bec41e936cf90936cc1b4a","modified":1638154249000},{"_id":"source/_posts/tech/azkaban简单搭建.md","hash":"4ddcbc7a21b416afed72791c132bceb7b3c632fc","modified":1637659848000},{"_id":"source/_posts/tech/用ssh加密文件.md","hash":"25516889859d8f88139ce8761029f3f13e3669d9","modified":1638944942000},{"_id":"source/_posts/tech/解决Dubbo无法处理自定义异常的问题.md","hash":"2d14b9aad29081a3bd66dc30b65c0315247a1f8d","modified":1637653058000},{"_id":"source/_posts/tech/记一次用代码分辨坑爹保险产品的经历.md","hash":"1f4a7727df8a9ce950b022be33722a57001e2538","modified":1637653058000},{"_id":"public/2022/03/14/read/读书笔记-置身事内/index.html","hash":"e19f1a41192ab5f6bc775aaccb18dcfa4c079048","modified":1648111882035},{"_id":"public/2022/01/25/blog/一周技术博客收集-20220124/index.html","hash":"1b462256c73b1a28da8a350f7f52c2af97d5a6fc","modified":1648111882035},{"_id":"public/2022/01/19/blog/一周技术博客收集-20210117/index.html","hash":"d6903246bdbdcef9387af53c0111e110ff7167bc","modified":1648111882035},{"_id":"public/2022/01/18/blog/技术博客翻译-12例bash脚本最佳实践/index.html","hash":"f5d0399ddc9280d3e0d8bbb717f8b8628b13f05e","modified":1648111882035},{"_id":"public/2022/01/13/news/新闻翻译-地质发现罕见的中古符文/index.html","hash":"973ae538fabf189e3cd94904e26b457bf363cd13","modified":1648111882035},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/index.html","hash":"f9e4ae6b40e168405c9af7b95fd286a3450f6ad6","modified":1648111882035},{"_id":"public/2021/12/17/tech/linux版本过低情况下使用高版本nodejs/index.html","hash":"3de3c125b9dcb161f392d165f9ce18d77aa241fe","modified":1648111882035},{"_id":"public/2021/12/13/news/新闻翻译-3/index.html","hash":"b41d92f4bce4e6f3971d501ce10baf5196c1b9df","modified":1648111882035},{"_id":"public/2021/12/09/news/新闻翻译-2/index.html","hash":"d6dbb4c09f079431356a07ce75c2472ea2c80df6","modified":1648111882035},{"_id":"public/2021/12/06/tech/用ssh加密文件/index.html","hash":"1fadd70d08b62477b11490203e51d8e6ad3581ef","modified":1648111882035},{"_id":"public/2021/11/29/tech/用curl计时/index.html","hash":"1f7c9e93f9e140bebf161eb55eb6973b7db66a86","modified":1648111882035},{"_id":"public/2021/11/26/tech/Express框架中使用get和post/index.html","hash":"407769e67f4161a618be19f625063c4b1b5f6163","modified":1648111882035},{"_id":"public/2021/11/19/tech/记一次用代码分辨坑爹保险产品的经历/index.html","hash":"cc1b0bb9550a90937e60bbc55badf95be223f3fb","modified":1648111882035},{"_id":"public/2020/05/14/tech/jenkins简单搭建/index.html","hash":"d639e15583a3169b7475b5b536514e01fd3e6d24","modified":1648111882035},{"_id":"public/2020/04/29/tech/azkaban简单搭建/index.html","hash":"59f196b5c64113b1089404f5a1fea8d856d155d8","modified":1648111882035},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/index.html","hash":"c95584216ac27a2c4731f47a43f297475693b60d","modified":1648111882035},{"_id":"public/2019/11/05/tech/logback日志配置模板/index.html","hash":"ebcfe34de14b24f74d5829f66e65d7713e9ae440","modified":1648111882035},{"_id":"public/2019/11/04/tech/解决Dubbo无法处理自定义异常的问题/index.html","hash":"b307e8ad56b7becf514d0ca7eddcc4e097ea21f9","modified":1648111882035},{"_id":"public/2019/11/04/tech/OracleJDBC/index.html","hash":"68a9bdd151ebc84f8e5ccf0be99d52d4d6ba276d","modified":1648111882035},{"_id":"public/2019/10/22/tech/搭建新项目的框架/index.html","hash":"3b91d989c8e7f7b53a64ddf43d581e8f7d12e868","modified":1648111882035},{"_id":"public/2019/10/17/tech/MySql-Document/index.html","hash":"f366f681ab152920e617a02ee103960755dba454","modified":1648111882035},{"_id":"public/2019/10/16/tech/linux日常维护命令/index.html","hash":"753b36b32c3446153bf1b478f1761dc36f6438fb","modified":1648111882035},{"_id":"public/2019/10/15/tech/官方文档解释MySQL最左匹配(最左前缀)原则/index.html","hash":"a408f2161b9bc109e2673bada8a1309c335a0984","modified":1648111882035},{"_id":"public/2019/10/14/tech/ELK日常维护相关/index.html","hash":"dbe724ba5a34a57baa30361513307f9208657b7d","modified":1648111882035},{"_id":"public/2019/10/08/tech/hexo使用技巧/index.html","hash":"6f8dd0c1946ff232554f66b1de01418418f2e4c5","modified":1648111882035},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/index.html","hash":"f830239d53e7fb9068d2805803d191368cab8de5","modified":1648111882035},{"_id":"public/2019/10/07/tech/ELK_FileBeats/index.html","hash":"980ed95baf2977b20bd01445d24c39cd5294e862","modified":1648111882035},{"_id":"public/2021/12/13/news/新闻翻译-3/ParallelMothers.jpeg","hash":"1ef0138b44ab486204d670d81e02f9e7d75de9dd","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/Passing.jpeg","hash":"5727e1efb57beeff2ee3783c127e422b262ee77b","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/SummerofSoul.jpeg","hash":"095574278122d91328d490f9960549a97e073993","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/CmonCmon.jpeg","hash":"c9888509540c400f611f18072b8e6435229f413a","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/TheDisciple.jpeg","hash":"355a38f60739bf1e326286f2bf0dc83b44832c39","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/DriveMyCar.jpeg","hash":"ba32c6466d226c64bb090d9158c8cbfc67d71b5e","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/ThePoweroftheDog.jpeg","hash":"e7f20e09b064340ec6aa7f66f683b26f5c657b24","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/TheSouvenirPartII.jpeg","hash":"2c684eed1c8da3e14d6fd1d3345e755e0db0c331","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/TheTragedyofMacbeth.jpg","hash":"4138b514db0a96982ee46b5798ce7d86fd2dd6fd","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/hitman3.jpg","hash":"90db34426ca07bbdcb5dee9bcd732e80402338e0","modified":1647829292408},{"_id":"public/2021/12/13/news/新闻翻译-3/TheWorstPersonintheWorld.jpeg","hash":"5114e8ad200d8b9c7c1297beff39032f5634987d","modified":1647829292408},{"_id":"public/2019/11/04/tech/OracleJDBC/1.png","hash":"9659bff5e1a380f69417d7a49128257d786715be","modified":1647829292408},{"_id":"public/2019/11/04/tech/OracleJDBC/2.png","hash":"85c4a86fa57b391d929c00825ec56cfd2b76311e","modified":1647829292408},{"_id":"public/2019/11/04/tech/OracleJDBC/3.png","hash":"858d396a0800687ac917f1e91d7ada4023a6f43b","modified":1647829292408},{"_id":"public/2019/11/04/tech/OracleJDBC/4.png","hash":"ef7295fd4d9fde43c694f7cc9fa385f3cc1eb69c","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/1.png","hash":"b2709a0dbaedb54e05534b1fb246372b9aa7dd6c","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/2.png","hash":"82a294dedf18d33258af0886fd6aa2aaa56dcd42","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/4.png","hash":"88e04483420f1b5ae7cab61b8f3caedeaf0ac5ee","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/5.png","hash":"14d2988569f484cec58cea21298e5e4665e3ad0e","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/8.png","hash":"26546a053c8a49fea1e9893f9a72ba7a2ebb4abf","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/2.png","hash":"92d67a3e43214686c353c60b843c02ad499312af","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/3.png","hash":"f42fbd3e2e45e1901b663c2471aaf26fb1a130b1","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/1.png","hash":"6691b221f5804cc57c05dc6f6d31557ca964d168","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/10.png","hash":"953a41c20cfb9f55fb6844369f6c6741d1583f0c","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/11.png","hash":"acdfc638d53fff0d5294eb8de5485c70476d8556","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/4.png","hash":"f499b0151b134ffba8c3b35a575d3b5b75a7736a","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/5.png","hash":"1806ce631496ce65e064b491fa55002c42c37ff3","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/6.png","hash":"03e319daaba930df20d24518b07d60d6741bcd8e","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/7.png","hash":"7162a104c3221f34a37db0d0b46249fbd7b4d4db","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/8.png","hash":"1437585bf63705a501807940de6863c4ed5686fd","modified":1647829292408},{"_id":"public/2019/10/07/tech/ELK_FileBeats/9.png","hash":"205cc036f604167e5e4a8965661cd9192ace8de1","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/1.png","hash":"0c69fea1bcf2569cf8d45433fc80f2b460df592b","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/2.png","hash":"48628b399b48a52d5cb951ab53b35273452d49e8","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/5.png","hash":"5a2b0f276d5ee38fad2f5bc5b6bbbb5aeb84aef6","modified":1647829292408},{"_id":"public/2019/10/14/tech/ELK日常维护相关/1.png","hash":"fd6ce814339338d7dc9b05f0586ba41bae3948a7","modified":1647829292408},{"_id":"public/2019/10/14/tech/ELK日常维护相关/2.png","hash":"2d0e1de58b5b7c81918aca59c3a4b7d59485422c","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/3.png","hash":"270b27f40649917d057bb0e59c8ca739b1a3e1fd","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/4.png","hash":"c90c562815bd09bbc9ddb3c62a172fdab522b847","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/5.png","hash":"26356566412db3ec03a876c36b504a69aa2e93fe","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/7.png","hash":"5f01a0def272cbd01096dc16ad07c35a7452845e","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/8.png","hash":"e3ee3ba3af2738147ce6cd2f54fbd589ad90a2d2","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/9.png","hash":"cebd81bb85d77b9a9171549409ab1ee390588236","modified":1647829292408},{"_id":"public/2020/05/14/tech/jenkins简单搭建/1.png","hash":"f2050a0f5ec45d0274b3b084116bf4297bdfd7b9","modified":1647829292408},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/1.png","hash":"0133de0656e67b679760006f46448c9837697956","modified":1647829292408},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/2.png","hash":"53b39d19ca94050b98856ed12e43449801ab75c6","modified":1647829292408},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/4.png","hash":"65daa20bc2074699de6b134e5c8b77303bcd748a","modified":1647829292408},{"_id":"public/2022/01/19/blog/一周技术博客收集-20210117/blog.jpg","hash":"e5c2f8efcd64b7aa5712672788aff3cb5bd244a1","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/ittakestwo.jpeg","hash":"7bc31140b7dcca7c2f19697885cf9154e4ea1f64","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/6.png","hash":"a280800a6b91f35d77c0186db8c9148968ca0922","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/3.png","hash":"9404bd8271cb97fbe33b2e1d141eb10d541c3210","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/3.png","hash":"ac701d76085c6256ee25a2a49950cc779a9ef76e","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/4.png","hash":"0d19f30b14843ec359d0b32b900926177879dc8d","modified":1647829292408},{"_id":"public/2020/04/29/tech/azkaban简单搭建/6.png","hash":"0156f822284faf0a29321095772fbfeb481970d6","modified":1647829292408},{"_id":"public/2019/10/14/tech/ELK日常维护相关/3.png","hash":"a7c196449555c806a398f0f79d989b1220bf1b70","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/2.png","hash":"dc4c49df9458ae63bf695e9797beef73bdb3ae87","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/6.png","hash":"daa3fd44aec333c799774676d4d1fe17b9254a8a","modified":1647829292408},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/3.png","hash":"fe767683bb0e68678e197cd021773f68ba0f3c9a","modified":1647829292408},{"_id":"public/2020/05/14/tech/jenkins简单搭建/2.png","hash":"989790480aa6cd1cd0a03a1801fa2b427645f966","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/deathloop.jpeg","hash":"6aebaa5f36e2fe2d97292b7e72af6fc01fc4bbf9","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/discoelysium.jpeg","hash":"91a28c2a3637ddd9bdc6961113f7fe3c65cb8d85","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/psychonauts2.jpeg","hash":"4f898842a94857e18d4e0753fd28b9c0b1a09293","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/masseffect.jpeg","hash":"34a3368f0bb89ed13f1dc055f44ff92e9434df9e","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/9.png","hash":"391a949171d93a038d07befc5a3b819669669ae9","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/forzahorizon5.jpeg","hash":"69374b9f57c0cea4f5651bb9e9d58455d2e99610","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/wildermyth.jpeg","hash":"f8e15610b4620f8170b3695ded07be3cf7164a72","modified":1647829292408},{"_id":"public/2022/01/13/news/新闻翻译-地质发现罕见的中古符文/bone2.png","hash":"d3fdf042e4f66fd5930115f364c2a206dcd44580","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/11.png","hash":"a02715d3b38d6a8de59d4fa78a5aedfbec53f0b7","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/7.png","hash":"2453862a15297498dbca9d8cf3d01bdcecd1528f","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/chicory.jpg","hash":"ea16203325b56477de5a7e67f407e2aa43a2ca4d","modified":1647829292408},{"_id":"public/2021/12/24/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/enderlilies.jpg","hash":"db183c118f76b1efaeff8c96169b4f82fb328f76","modified":1647829292408},{"_id":"public/2019/11/20/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/10.png","hash":"10b47285ca2b996119f1f8f42837b880d345994b","modified":1647829292408},{"_id":"public/2021/12/09/news/新闻翻译-2/1.png","hash":"ff50a2f2a6c89b89c56cd70060f758d8afaff529","modified":1647829292408},{"_id":"public/2022/03/14/read/读书笔记-置身事内/1.jpg","hash":"baaa007e6090b512c083ff9eb82806732c3cf822","modified":1647829292408},{"_id":"public/2019/10/08/tech/利用hexo和github搭建个人博客/5.png","hash":"8c7ed210d33a08a2d4705996a0a6a42748ac98ff","modified":1647829292408},{"_id":"public/2021/11/19/tech/记一次用代码分辨坑爹保险产品的经历/1.png","hash":"920bfa9fe201dbbc9075eaed3741ec44368a422d","modified":1647829292408},{"_id":"public/2019/10/08/tech/hexo使用技巧/1.png","hash":"a6b47ecfff86eb276a7ddf5afef467f836584bec","modified":1647829292408},{"_id":"public/2022/01/19/blog/一周技术博客收集-20210117/programmerhumor.png","hash":"a8b523acc42ea9d454c3b6be4c517b9e8a11610c","modified":1647829292408},{"_id":"public/2022/01/13/news/新闻翻译-地质发现罕见的中古符文/bone.png","hash":"5a3452a1c5b4e136b24505792afe702265fa4d76","modified":1647829292408},{"_id":"public/2022/01/19/blog/一周技术博客收集-20210117/map1.png","hash":"5fa1768fe90dac671813abc7c6e895cdb56148c2","modified":1647829292408},{"_id":"public/2022/01/25/blog/一周技术博客收集-20220124/wordle.png","hash":"b4912c5fa210c6c7342b47e2ca10d06af9b37b9d","modified":1647829292408},{"_id":"public/2022/01/13/news/新闻翻译-地质发现罕见的中古符文/bone3.png","hash":"778a47d733b17439508853eac6cfff5aab092654","modified":1647829292408},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解.md","hash":"f6ef819f3ebf51e9fce751eadf9fe6f5df8322bc","modified":1648083341000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/1.jpg","hash":"f4b5a6fa96de0917c2f40a000f218f24fdafda48","modified":1647841616000},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/index.html","hash":"9189349427f2e3c91ac6d2a33f962c6667797f8c","modified":1648111882035},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/1.jpg","hash":"f4b5a6fa96de0917c2f40a000f218f24fdafda48","modified":1647940394154},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree2.png","hash":"6fb609578f4b2f1002919c76315496f0e6ce018f","modified":1648019302000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree3.png","hash":"225e195988ce889df3ecabc944b78c285bf99bf4","modified":1648019319000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree4.png","hash":"dcc9b97e92e2bdec81ba871f68271c3caf42f458","modified":1648019675000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree.png","hash":"792189065afc4f2181a3437fd12b19aafb5e303b","modified":1648018887000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree5.png","hash":"14947e5f16b46920a8b3010132c71f981793fb0f","modified":1648019740000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree6.png","hash":"b42f69e21e0c6f6f5b0707ad553010ddc700d474","modified":1648020094000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree7.png","hash":"ab8836d5b1b333e656d9ec71046e4d7b308d198f","modified":1648020106000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree8.png","hash":"741a97ecd2b6efe08fa9ba29242c28e008861ec1","modified":1648020114000},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree3.png","hash":"225e195988ce889df3ecabc944b78c285bf99bf4","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree2.png","hash":"6fb609578f4b2f1002919c76315496f0e6ce018f","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree4.png","hash":"dcc9b97e92e2bdec81ba871f68271c3caf42f458","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree6.png","hash":"b42f69e21e0c6f6f5b0707ad553010ddc700d474","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree5.png","hash":"14947e5f16b46920a8b3010132c71f981793fb0f","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree7.png","hash":"ab8836d5b1b333e656d9ec71046e4d7b308d198f","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree8.png","hash":"741a97ecd2b6efe08fa9ba29242c28e008861ec1","modified":1648020584890},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/tree.png","hash":"792189065afc4f2181a3437fd12b19aafb5e303b","modified":1648020584890},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/graph.png","hash":"2b18a4abaafb5f7d96b80cbc27c52fb87aad1e1e","modified":1648020870000},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/graph2.png","hash":"af74191c6b1073a1d8011dc1c37618fb240cadbe","modified":1648021074000},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/graph.png","hash":"2b18a4abaafb5f7d96b80cbc27c52fb87aad1e1e","modified":1648023483684},{"_id":"public/2022/03/21/read/读书笔记-数据结构和算法图解/graph2.png","hash":"af74191c6b1073a1d8011dc1c37618fb240cadbe","modified":1648023483684},{"_id":"source/_posts/read/读书笔记-人类简史.md","hash":"51a5e9785541a7daa9f40caa5e0fe63c7114691d","modified":1648171173000},{"_id":"source/_posts/read/读书笔记-人类简史/human1.png","hash":"4a58822599f21db45637a573da2090142a46e557","modified":1648107483000},{"_id":"source/_posts/read/读书笔记-算法/algrithm.jpg","hash":"e3390b8100fcd1d88983d240b978587b9efa949f","modified":1648084156000},{"_id":"source/_posts/read/读书笔记-算法.md","hash":"c605c4bdec71c64ed297182bdfdd0fb017a3eac9","modified":1648198695000},{"_id":"source/_posts/read/读书笔记-算法/redirect.png","hash":"57e70c8fa9cf24307f5e0d32b471689933e18309","modified":1648091330000},{"_id":"source/_posts/read/读书笔记-人类简史/humanhistory.jpg","hash":"54677d3dde767089f9d3b2e15ebea14752be763b","modified":1648103430000},{"_id":"public/2022/03/24/read/读书笔记-人类简史/index.html","hash":"c11936663528000108178c944c956e6602e038e7","modified":1648198993554},{"_id":"public/2022/03/24/read/读书笔记-算法/index.html","hash":"a1d4842c1ef2aed11a1ddf538b2b66fbe531298d","modified":1648198993554},{"_id":"public/archives/page/4/index.html","hash":"abb90050ab71e121637b85a7b1faa40891087bbf","modified":1648111882035},{"_id":"public/page/4/index.html","hash":"0b7ddf1366d05c21ee79d1f03371235289e402e2","modified":1648111882035},{"_id":"public/2022/03/24/read/读书笔记-人类简史/human1.png","hash":"4a58822599f21db45637a573da2090142a46e557","modified":1648111882035},{"_id":"public/2022/03/24/read/读书笔记-算法/algrithm.jpg","hash":"e3390b8100fcd1d88983d240b978587b9efa949f","modified":1648111882035},{"_id":"public/2022/03/24/read/读书笔记-算法/redirect.png","hash":"57e70c8fa9cf24307f5e0d32b471689933e18309","modified":1648111882035},{"_id":"public/2022/03/24/read/读书笔记-人类简史/humanhistory.jpg","hash":"54677d3dde767089f9d3b2e15ebea14752be763b","modified":1648111882035},{"_id":"source/_posts/read/读书笔记-算法/algrithm1.png","hash":"34c4ee0e6c591bf02a1101051714c8159b49396b","modified":1648187630000},{"_id":"source/_posts/read/读书笔记-算法/algrithm4.png","hash":"e38ab1152d3133918fe114f1debde0c44778bc77","modified":1648189352000},{"_id":"source/_posts/read/读书笔记-算法/unionfind.png","hash":"8a9a70480939e0adff5fe0235dd8513a40de753d","modified":1648198428000},{"_id":"source/_posts/read/读书笔记-算法/algrithm3.png","hash":"ba7cf616a12b3519d3ab9593af4f0acaf0f4e9d8","modified":1648188374000},{"_id":"source/_posts/read/读书笔记-算法/dijkstra.png","hash":"b52bb9b6a6b28dd7111ef1445dbae1595dcd005f","modified":1648175926000},{"_id":"public/2022/03/24/read/读书笔记-算法/algrithm1.png","hash":"34c4ee0e6c591bf02a1101051714c8159b49396b","modified":1648198993554},{"_id":"public/2022/03/24/read/读书笔记-算法/algrithm4.png","hash":"e38ab1152d3133918fe114f1debde0c44778bc77","modified":1648198993554},{"_id":"public/2022/03/24/read/读书笔记-算法/unionfind.png","hash":"8a9a70480939e0adff5fe0235dd8513a40de753d","modified":1648198993554},{"_id":"public/2022/03/24/read/读书笔记-算法/algrithm3.png","hash":"ba7cf616a12b3519d3ab9593af4f0acaf0f4e9d8","modified":1648198993554},{"_id":"public/2022/03/24/read/读书笔记-算法/dijkstra.png","hash":"b52bb9b6a6b28dd7111ef1445dbae1595dcd005f","modified":1648198993554}],"Category":[{"name":"学习","_id":"ckwbrq8w00004pzcf5fbk7ttk"},{"name":"搭建相关","parent":"ckwbrq8w00004pzcf5fbk7ttk","_id":"ckwbrq8w9000jpzcf3bmxawao"},{"name":"运维","parent":"ckwbrq8w00004pzcf5fbk7ttk","_id":"ckwbrq8wj001bpzcfdrahbhmm"},{"name":"数据库","parent":"ckwbrq8w00004pzcf5fbk7ttk","_id":"ckwbrq8wm001opzcfcfyoedko"},{"name":"英语","parent":"ckwbrq8w00004pzcf5fbk7ttk","_id":"ckwbrq8wn001upzcf2yx67qm1"},{"name":"一周文章收集","_id":"ckysb4jyw0001vkcfh4d4douy"},{"name":"读书笔记","_id":"cl0qc9onk0001jhcf4jgs2j0j"}],"Data":[],"Page":[{"title":"categories","date":"2021-11-23T00:46:12.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-23 08:46:12\ntype: categories\n---\n","updated":"2021-11-23T02:43:25.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwbrq8vu0000pzcf7dp43fj9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-23T00:45:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-23 08:45:50\ntype: tags\n---\n","updated":"2021-11-23T02:43:25.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwbrq8vy0002pzcf92sb9i3s","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2021-12-28T08:23:54.000Z","updated":"2021-12-28T08:23:54.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckxpuf6j30000iscf5z3k9tvh","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"}],"Post":[{"title":"新闻翻译.1","date":"2019-10-10T01:09:54.000Z","comments":0,"_content":"[原文链接](https://www.latimes.com/politics/story/2019-10-09/trumps-legal-strategy-against-impeachment-shaky-constitutional-grounds-scholars-say)  \n## Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say\n### 学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据  \n\n1.Washington —  Constitutional lawyers said Wednesday that President Trump’s \nvow not to cooperate with the impeachment inquiry is both unprecedented and \nunlikely to spare him from being formally charged by the House. \nIn fact, they say, it may only increase the chances that he will be impeached.  \n华盛顿报道 - 宪法律师周三声明, 川普总统发誓不会与弹劾调查进行合作的言论是\n前所未有的, 而且也很可能使他面临众议院的正式指控. 并且, 他们还说到, 这有可能\n增加川普被弹劾的可能.\n\n2.The Constitution says the “House of Representatives shall have the sole \npower of impeachment,” and it does not give the president a specific role \nin the process. A president is in some sense like an ordinary defendant \nwho may be subject to a criminal investigation and an indictment, \nall without his participation or involvement, scholars say.  \n美国宪法里写到, \"众议院拥有弹劾的唯一权力\", 而且没有赋予总统在此过程中的任何\n特殊角色. 学者认为, 总统在整个过程中都不会参与到弹劾中, 某种意义上和普通被告一样, \n可能面临刑事调查和指控.  \n\n3.“The president’s cooperation is not required or needed,” said University of \nNorth Carolina law professor Michael J. Gerhardt, an expert on impeachment. \nAnd “the House may make that defiance grounds for impeachment,” he added, \nnoting that in 1974, a House committee approved articles of impeachment against \nPresident Nixon based in part on his refusal to comply with congressional subpoenas.  \n北卡罗莱纳大学的法律学教授, 同时也是研究弹劾的专家, Michael J.Gerhardt认为, \n\"总统的配合并不是必需的, 众议院可以把这作为违抗理由去弹劾\". 他还补充到, 1974年,\n众议院委员会通过了一项弹劾决议, 其部分原因就是尼克松总统拒绝了来自国会的传票. \n<!-- more -->\n4.Though both Nixon and President Clinton tried behind the scenes to slow \nor stop impeachment proceedings, they also attempted to cooperate at times, \nor at least appear to, out of respect for the process and fear they might \nlook like they were hiding something.  \n尽管尼克松和克林顿总统都试图在幕后减缓或者阻止弹劾的进程, 但至少他们在当时都是\n试图配合弹劾工作的, 至少看上去是. 对于弹劾的不尊重和害怕会让他们看起来隐藏了\n一些事.\n\n5.“There is no precedent for the president doing what President Trump is \ndoing here: saying I will flatly refuse to cooperate and ordering all \nemployees of the executive branch to refuse to cooperate as well,” \nsaid professor Frank O. Bowman, who teaches impeachment law at the \nUniversity of Missouri and Georgetown.  \n来自密苏里和乔治敦大学, 教弹劾法律的教授Frank O.Bowman说:\"之前从来没有\n一份先例像川普总统这样, 说自己断然拒绝合作, 而且还命令所有的行政雇员也拒绝合作.\"\n\n6.In Tuesday’s eight-page letter to House Democrats, White House Counsel \nPat Cipillone pronounced Trump innocent of wrongdoing and the inquiry \n“unconstitutional.”  \n周四一份来自白宫的法律顾问Pat Cipillone的八页信件发往了众议院的民主党派, \n他宣称川普的错误做法是无辜的, 而且弹劾调查也是违宪的.\n\n7.He said Trump’s July 25 phone call asking the new president of Ukraine \nto do him “a favor” and investigate former Vice President Joe Biden and \nhis son Hunter was “completely appropriate. The president did nothing wrong, \nand there is no legitimate basis for an impeachment inquiry.”  \n他说, 川普在7月25号致电给乌克兰新总统, 要求他帮助和调查前副总统Joe Biden以及\n他的儿子Hunter是\"完全合理的. 总统没有做错什么, 而且也没有一个合法的法律依据\n可以支撑弹劾的调查\"\n\n8.Legal experts, however, say Trump’s actions were exactly the kinds of \nthings that framers were thinking of when they included an impeachment \nprovision in the Constitution. Trump has acknowledged that even as he asked \nUkraine to investigate one of his political opponents, he had ordered \nthat nearly $400 million in aid to Ukraine be withheld.  \n然而法律专家认为, 川普的行为恰好就是制宪者将弹劾条款加入宪法时所考虑过的.\n川普认识到即使他要求乌克兰去调查他其中的一个政治对手, 他下令资助给乌克兰的\n将近40亿美元的援助也将被扣留.\n\n9.The White House letter suggests that the inquiry is invalid because \nthere was no formal House vote to launch it, and that Trump and Republicans \nhave so far not been given the right to see evidence and call witnesses. \nBased on this conclusion, he said, “President Trump and his administration \ncannot participate in your partisan and unconstitutional inquiry.”  \n白宫的信件认为调查是无效的, 因为没有任何正式的众议院决议去启动这项调查, 而且\n川普和共和党至今甚至没有权力见到证据和传唤目击者. 基于这些结论, 他说: \"川普\n总统和他的管理团队不会参与到你们的党派和违宪的调查中去\"\n\n10.Lawyers took to social media to express surprise and disdain, noting \nthat no such rights or requirements exist in the Constitution.  \n律师在社交媒体上表达了他的惊讶和蔑视, 指出在宪法中不存在这样的权力和请求.\n\n11.“This letter is bananas. A barely-lawyered temper tantrum,” tweeted \nGregg Nunziata, a former counsel for Senate Republicans.  \n前任的共和党法律顾问, Gregg Nunziata发推说道:\"这封信就是胡闹, 一份没有法律\n常识的脾气的宣泄\"\n\n12.University of Texas law professor Steve Vladeck said it was remarkable \nfor the top White House lawyer to say in writing that it “is completely \nappropriate for the president of the United States to actively solicit \nforeign intervention in U.S. presidential elections. Let’s not lose \nsight of just how insane that is.”  \n德克萨斯大学的法律教授Steve Vladeck表示, 对于一个顶级的白宫律师, 以书面形式\n说\"美国总统积极的寻求外国介入到美国的总统选择中是完全合理的. 让我们不要忘记\n这是多么疯狂\", 真是太出色了.(这段真是不知道怎么翻译...)\n\n13.Lisa Kern Griffin, a Duke law professor, described the letter as a \n“political stunt that misinterprets the Constitution, ignores relevant \nprecedents and defies common sense.” She said the letter sets the stage \nfor a constitutional crisis.  \n杜克的法律教授, Lisa Kern Griffin形容这个信是\"曲解宪法的政治手段, 忽略了\n相关的先例, 否决了共识\". 她说这封信为宪法的危机奠定了一个基础.\n\n14.“Of course, the House can proceed with impeachment based on the testimony \nand evidence it can access, but it strikes me as dangerous for the entire \nexecutive branch to defy congressional oversight.”  \n\"理所当然的, 众议院可以继续根据已有的证词和证据进行弹劾, 但是令我感到危险的是\n整个行政部门都违抗国会的监督\"\n\n\n15.Neal K. Katyal, who was acting solicitor general during the Obama administration, \nnoted that Trump’s lawyers have insisted that he is immune from criminal charges, \nshielded from congressional and state legal demands, including for his tax returns, \nand now shielded from an impeachment inquiry.  \n在奥巴马政府期间担任代理司法部副部长的Neal K. Katyal指出, 川普的律师坚持他(川普)\n是免于刑事指控的, 受国会和国家法律要求的保护, 包括他的报税表, 所以现在也保护他免\n于收到弹劾的调查.\n\n16.Gerhardt said the White House letter “shows nothing but contempt for the \nlaw and the Constitution. Its principal argument is that the president is \nabove the law. In fact, he is not. Impeachment is one of the unique constitutional \nprocesses for holding the president accountable for abusing his power.”  \nGerhardt认为白宫信件\"展示了对于法律和宪法的蔑视. 这里面的主要内容就是总统\n凌驾于法律之上. 但事实上, 他是错的. 弹劾是宪法中用于控制总统滥用职权的独特\n法律条文之一\"\n\n17.It’s not clear how or whether House Democrats will respond to Trump’s \nvow of noncooperation. In recent weeks, leaders of the House inquiry signaled \nthey are reluctant to go to court or seek to hold officials in criminal \ncontempt for refusing to comply with a subpoena.  \n还不清楚众议院民主党派怎么回应或者是否会回应川普拒绝合作的承诺. 在最近几周, \n众议院调查团队的负责人发出信号, 他们不愿意因为拒绝传票而走上法庭或者让官方\n人员陷于刑事指控的境地.\n","source":"_posts/news/新闻翻译-1.md","raw":"---\ntitle: 新闻翻译.1\ndate: 2019-10-10 09:09:54\ntags: \n- translate\n- news\ncomments: false\ncategories: \n- 学习\n- 英语\n---\n[原文链接](https://www.latimes.com/politics/story/2019-10-09/trumps-legal-strategy-against-impeachment-shaky-constitutional-grounds-scholars-say)  \n## Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say\n### 学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据  \n\n1.Washington —  Constitutional lawyers said Wednesday that President Trump’s \nvow not to cooperate with the impeachment inquiry is both unprecedented and \nunlikely to spare him from being formally charged by the House. \nIn fact, they say, it may only increase the chances that he will be impeached.  \n华盛顿报道 - 宪法律师周三声明, 川普总统发誓不会与弹劾调查进行合作的言论是\n前所未有的, 而且也很可能使他面临众议院的正式指控. 并且, 他们还说到, 这有可能\n增加川普被弹劾的可能.\n\n2.The Constitution says the “House of Representatives shall have the sole \npower of impeachment,” and it does not give the president a specific role \nin the process. A president is in some sense like an ordinary defendant \nwho may be subject to a criminal investigation and an indictment, \nall without his participation or involvement, scholars say.  \n美国宪法里写到, \"众议院拥有弹劾的唯一权力\", 而且没有赋予总统在此过程中的任何\n特殊角色. 学者认为, 总统在整个过程中都不会参与到弹劾中, 某种意义上和普通被告一样, \n可能面临刑事调查和指控.  \n\n3.“The president’s cooperation is not required or needed,” said University of \nNorth Carolina law professor Michael J. Gerhardt, an expert on impeachment. \nAnd “the House may make that defiance grounds for impeachment,” he added, \nnoting that in 1974, a House committee approved articles of impeachment against \nPresident Nixon based in part on his refusal to comply with congressional subpoenas.  \n北卡罗莱纳大学的法律学教授, 同时也是研究弹劾的专家, Michael J.Gerhardt认为, \n\"总统的配合并不是必需的, 众议院可以把这作为违抗理由去弹劾\". 他还补充到, 1974年,\n众议院委员会通过了一项弹劾决议, 其部分原因就是尼克松总统拒绝了来自国会的传票. \n<!-- more -->\n4.Though both Nixon and President Clinton tried behind the scenes to slow \nor stop impeachment proceedings, they also attempted to cooperate at times, \nor at least appear to, out of respect for the process and fear they might \nlook like they were hiding something.  \n尽管尼克松和克林顿总统都试图在幕后减缓或者阻止弹劾的进程, 但至少他们在当时都是\n试图配合弹劾工作的, 至少看上去是. 对于弹劾的不尊重和害怕会让他们看起来隐藏了\n一些事.\n\n5.“There is no precedent for the president doing what President Trump is \ndoing here: saying I will flatly refuse to cooperate and ordering all \nemployees of the executive branch to refuse to cooperate as well,” \nsaid professor Frank O. Bowman, who teaches impeachment law at the \nUniversity of Missouri and Georgetown.  \n来自密苏里和乔治敦大学, 教弹劾法律的教授Frank O.Bowman说:\"之前从来没有\n一份先例像川普总统这样, 说自己断然拒绝合作, 而且还命令所有的行政雇员也拒绝合作.\"\n\n6.In Tuesday’s eight-page letter to House Democrats, White House Counsel \nPat Cipillone pronounced Trump innocent of wrongdoing and the inquiry \n“unconstitutional.”  \n周四一份来自白宫的法律顾问Pat Cipillone的八页信件发往了众议院的民主党派, \n他宣称川普的错误做法是无辜的, 而且弹劾调查也是违宪的.\n\n7.He said Trump’s July 25 phone call asking the new president of Ukraine \nto do him “a favor” and investigate former Vice President Joe Biden and \nhis son Hunter was “completely appropriate. The president did nothing wrong, \nand there is no legitimate basis for an impeachment inquiry.”  \n他说, 川普在7月25号致电给乌克兰新总统, 要求他帮助和调查前副总统Joe Biden以及\n他的儿子Hunter是\"完全合理的. 总统没有做错什么, 而且也没有一个合法的法律依据\n可以支撑弹劾的调查\"\n\n8.Legal experts, however, say Trump’s actions were exactly the kinds of \nthings that framers were thinking of when they included an impeachment \nprovision in the Constitution. Trump has acknowledged that even as he asked \nUkraine to investigate one of his political opponents, he had ordered \nthat nearly $400 million in aid to Ukraine be withheld.  \n然而法律专家认为, 川普的行为恰好就是制宪者将弹劾条款加入宪法时所考虑过的.\n川普认识到即使他要求乌克兰去调查他其中的一个政治对手, 他下令资助给乌克兰的\n将近40亿美元的援助也将被扣留.\n\n9.The White House letter suggests that the inquiry is invalid because \nthere was no formal House vote to launch it, and that Trump and Republicans \nhave so far not been given the right to see evidence and call witnesses. \nBased on this conclusion, he said, “President Trump and his administration \ncannot participate in your partisan and unconstitutional inquiry.”  \n白宫的信件认为调查是无效的, 因为没有任何正式的众议院决议去启动这项调查, 而且\n川普和共和党至今甚至没有权力见到证据和传唤目击者. 基于这些结论, 他说: \"川普\n总统和他的管理团队不会参与到你们的党派和违宪的调查中去\"\n\n10.Lawyers took to social media to express surprise and disdain, noting \nthat no such rights or requirements exist in the Constitution.  \n律师在社交媒体上表达了他的惊讶和蔑视, 指出在宪法中不存在这样的权力和请求.\n\n11.“This letter is bananas. A barely-lawyered temper tantrum,” tweeted \nGregg Nunziata, a former counsel for Senate Republicans.  \n前任的共和党法律顾问, Gregg Nunziata发推说道:\"这封信就是胡闹, 一份没有法律\n常识的脾气的宣泄\"\n\n12.University of Texas law professor Steve Vladeck said it was remarkable \nfor the top White House lawyer to say in writing that it “is completely \nappropriate for the president of the United States to actively solicit \nforeign intervention in U.S. presidential elections. Let’s not lose \nsight of just how insane that is.”  \n德克萨斯大学的法律教授Steve Vladeck表示, 对于一个顶级的白宫律师, 以书面形式\n说\"美国总统积极的寻求外国介入到美国的总统选择中是完全合理的. 让我们不要忘记\n这是多么疯狂\", 真是太出色了.(这段真是不知道怎么翻译...)\n\n13.Lisa Kern Griffin, a Duke law professor, described the letter as a \n“political stunt that misinterprets the Constitution, ignores relevant \nprecedents and defies common sense.” She said the letter sets the stage \nfor a constitutional crisis.  \n杜克的法律教授, Lisa Kern Griffin形容这个信是\"曲解宪法的政治手段, 忽略了\n相关的先例, 否决了共识\". 她说这封信为宪法的危机奠定了一个基础.\n\n14.“Of course, the House can proceed with impeachment based on the testimony \nand evidence it can access, but it strikes me as dangerous for the entire \nexecutive branch to defy congressional oversight.”  \n\"理所当然的, 众议院可以继续根据已有的证词和证据进行弹劾, 但是令我感到危险的是\n整个行政部门都违抗国会的监督\"\n\n\n15.Neal K. Katyal, who was acting solicitor general during the Obama administration, \nnoted that Trump’s lawyers have insisted that he is immune from criminal charges, \nshielded from congressional and state legal demands, including for his tax returns, \nand now shielded from an impeachment inquiry.  \n在奥巴马政府期间担任代理司法部副部长的Neal K. Katyal指出, 川普的律师坚持他(川普)\n是免于刑事指控的, 受国会和国家法律要求的保护, 包括他的报税表, 所以现在也保护他免\n于收到弹劾的调查.\n\n16.Gerhardt said the White House letter “shows nothing but contempt for the \nlaw and the Constitution. Its principal argument is that the president is \nabove the law. In fact, he is not. Impeachment is one of the unique constitutional \nprocesses for holding the president accountable for abusing his power.”  \nGerhardt认为白宫信件\"展示了对于法律和宪法的蔑视. 这里面的主要内容就是总统\n凌驾于法律之上. 但事实上, 他是错的. 弹劾是宪法中用于控制总统滥用职权的独特\n法律条文之一\"\n\n17.It’s not clear how or whether House Democrats will respond to Trump’s \nvow of noncooperation. In recent weeks, leaders of the House inquiry signaled \nthey are reluctant to go to court or seek to hold officials in criminal \ncontempt for refusing to comply with a subpoena.  \n还不清楚众议院民主党派怎么回应或者是否会回应川普拒绝合作的承诺. 在最近几周, \n众议院调查团队的负责人发出信号, 他们不愿意因为拒绝传票而走上法庭或者让官方\n人员陷于刑事指控的境地.\n","slug":"news/新闻翻译-1","published":1,"updated":"2021-11-23T07:37:38.000Z","layout":"post","photos":[],"link":"","_id":"cl102u18f0000t3cf0k4dfg0s","content":"<p><a href=\"https://www.latimes.com/politics/story/2019-10-09/trumps-legal-strategy-against-impeachment-shaky-constitutional-grounds-scholars-say\">原文链接</a>  </p>\n<h2 id=\"Trump’s-legal-strategy-against-impeachment-is-on-shaky-constitutional-grounds-scholars-say\"><a href=\"#Trump’s-legal-strategy-against-impeachment-is-on-shaky-constitutional-grounds-scholars-say\" class=\"headerlink\" title=\"Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say\"></a>Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say</h2><h3 id=\"学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\"><a href=\"#学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\" class=\"headerlink\" title=\"学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\"></a>学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据</h3><p>1.Washington —  Constitutional lawyers said Wednesday that President Trump’s<br>vow not to cooperate with the impeachment inquiry is both unprecedented and<br>unlikely to spare him from being formally charged by the House.<br>In fact, they say, it may only increase the chances that he will be impeached.<br>华盛顿报道 - 宪法律师周三声明, 川普总统发誓不会与弹劾调查进行合作的言论是<br>前所未有的, 而且也很可能使他面临众议院的正式指控. 并且, 他们还说到, 这有可能<br>增加川普被弹劾的可能.</p>\n<p>2.The Constitution says the “House of Representatives shall have the sole<br>power of impeachment,” and it does not give the president a specific role<br>in the process. A president is in some sense like an ordinary defendant<br>who may be subject to a criminal investigation and an indictment,<br>all without his participation or involvement, scholars say.<br>美国宪法里写到, “众议院拥有弹劾的唯一权力”, 而且没有赋予总统在此过程中的任何<br>特殊角色. 学者认为, 总统在整个过程中都不会参与到弹劾中, 某种意义上和普通被告一样,<br>可能面临刑事调查和指控.  </p>\n<p>3.“The president’s cooperation is not required or needed,” said University of<br>North Carolina law professor Michael J. Gerhardt, an expert on impeachment.<br>And “the House may make that defiance grounds for impeachment,” he added,<br>noting that in 1974, a House committee approved articles of impeachment against<br>President Nixon based in part on his refusal to comply with congressional subpoenas.<br>北卡罗莱纳大学的法律学教授, 同时也是研究弹劾的专家, Michael J.Gerhardt认为,<br>“总统的配合并不是必需的, 众议院可以把这作为违抗理由去弹劾”. 他还补充到, 1974年,<br>众议院委员会通过了一项弹劾决议, 其部分原因就是尼克松总统拒绝了来自国会的传票. </p>\n<span id=\"more\"></span>\n<p>4.Though both Nixon and President Clinton tried behind the scenes to slow<br>or stop impeachment proceedings, they also attempted to cooperate at times,<br>or at least appear to, out of respect for the process and fear they might<br>look like they were hiding something.<br>尽管尼克松和克林顿总统都试图在幕后减缓或者阻止弹劾的进程, 但至少他们在当时都是<br>试图配合弹劾工作的, 至少看上去是. 对于弹劾的不尊重和害怕会让他们看起来隐藏了<br>一些事.</p>\n<p>5.“There is no precedent for the president doing what President Trump is<br>doing here: saying I will flatly refuse to cooperate and ordering all<br>employees of the executive branch to refuse to cooperate as well,”<br>said professor Frank O. Bowman, who teaches impeachment law at the<br>University of Missouri and Georgetown.<br>来自密苏里和乔治敦大学, 教弹劾法律的教授Frank O.Bowman说:”之前从来没有<br>一份先例像川普总统这样, 说自己断然拒绝合作, 而且还命令所有的行政雇员也拒绝合作.”</p>\n<p>6.In Tuesday’s eight-page letter to House Democrats, White House Counsel<br>Pat Cipillone pronounced Trump innocent of wrongdoing and the inquiry<br>“unconstitutional.”<br>周四一份来自白宫的法律顾问Pat Cipillone的八页信件发往了众议院的民主党派,<br>他宣称川普的错误做法是无辜的, 而且弹劾调查也是违宪的.</p>\n<p>7.He said Trump’s July 25 phone call asking the new president of Ukraine<br>to do him “a favor” and investigate former Vice President Joe Biden and<br>his son Hunter was “completely appropriate. The president did nothing wrong,<br>and there is no legitimate basis for an impeachment inquiry.”<br>他说, 川普在7月25号致电给乌克兰新总统, 要求他帮助和调查前副总统Joe Biden以及<br>他的儿子Hunter是”完全合理的. 总统没有做错什么, 而且也没有一个合法的法律依据<br>可以支撑弹劾的调查”</p>\n<p>8.Legal experts, however, say Trump’s actions were exactly the kinds of<br>things that framers were thinking of when they included an impeachment<br>provision in the Constitution. Trump has acknowledged that even as he asked<br>Ukraine to investigate one of his political opponents, he had ordered<br>that nearly $400 million in aid to Ukraine be withheld.<br>然而法律专家认为, 川普的行为恰好就是制宪者将弹劾条款加入宪法时所考虑过的.<br>川普认识到即使他要求乌克兰去调查他其中的一个政治对手, 他下令资助给乌克兰的<br>将近40亿美元的援助也将被扣留.</p>\n<p>9.The White House letter suggests that the inquiry is invalid because<br>there was no formal House vote to launch it, and that Trump and Republicans<br>have so far not been given the right to see evidence and call witnesses.<br>Based on this conclusion, he said, “President Trump and his administration<br>cannot participate in your partisan and unconstitutional inquiry.”<br>白宫的信件认为调查是无效的, 因为没有任何正式的众议院决议去启动这项调查, 而且<br>川普和共和党至今甚至没有权力见到证据和传唤目击者. 基于这些结论, 他说: “川普<br>总统和他的管理团队不会参与到你们的党派和违宪的调查中去”</p>\n<p>10.Lawyers took to social media to express surprise and disdain, noting<br>that no such rights or requirements exist in the Constitution.<br>律师在社交媒体上表达了他的惊讶和蔑视, 指出在宪法中不存在这样的权力和请求.</p>\n<p>11.“This letter is bananas. A barely-lawyered temper tantrum,” tweeted<br>Gregg Nunziata, a former counsel for Senate Republicans.<br>前任的共和党法律顾问, Gregg Nunziata发推说道:”这封信就是胡闹, 一份没有法律<br>常识的脾气的宣泄”</p>\n<p>12.University of Texas law professor Steve Vladeck said it was remarkable<br>for the top White House lawyer to say in writing that it “is completely<br>appropriate for the president of the United States to actively solicit<br>foreign intervention in U.S. presidential elections. Let’s not lose<br>sight of just how insane that is.”<br>德克萨斯大学的法律教授Steve Vladeck表示, 对于一个顶级的白宫律师, 以书面形式<br>说”美国总统积极的寻求外国介入到美国的总统选择中是完全合理的. 让我们不要忘记<br>这是多么疯狂”, 真是太出色了.(这段真是不知道怎么翻译…)</p>\n<p>13.Lisa Kern Griffin, a Duke law professor, described the letter as a<br>“political stunt that misinterprets the Constitution, ignores relevant<br>precedents and defies common sense.” She said the letter sets the stage<br>for a constitutional crisis.<br>杜克的法律教授, Lisa Kern Griffin形容这个信是”曲解宪法的政治手段, 忽略了<br>相关的先例, 否决了共识”. 她说这封信为宪法的危机奠定了一个基础.</p>\n<p>14.“Of course, the House can proceed with impeachment based on the testimony<br>and evidence it can access, but it strikes me as dangerous for the entire<br>executive branch to defy congressional oversight.”<br>“理所当然的, 众议院可以继续根据已有的证词和证据进行弹劾, 但是令我感到危险的是<br>整个行政部门都违抗国会的监督”</p>\n<p>15.Neal K. Katyal, who was acting solicitor general during the Obama administration,<br>noted that Trump’s lawyers have insisted that he is immune from criminal charges,<br>shielded from congressional and state legal demands, including for his tax returns,<br>and now shielded from an impeachment inquiry.<br>在奥巴马政府期间担任代理司法部副部长的Neal K. Katyal指出, 川普的律师坚持他(川普)<br>是免于刑事指控的, 受国会和国家法律要求的保护, 包括他的报税表, 所以现在也保护他免<br>于收到弹劾的调查.</p>\n<p>16.Gerhardt said the White House letter “shows nothing but contempt for the<br>law and the Constitution. Its principal argument is that the president is<br>above the law. In fact, he is not. Impeachment is one of the unique constitutional<br>processes for holding the president accountable for abusing his power.”<br>Gerhardt认为白宫信件”展示了对于法律和宪法的蔑视. 这里面的主要内容就是总统<br>凌驾于法律之上. 但事实上, 他是错的. 弹劾是宪法中用于控制总统滥用职权的独特<br>法律条文之一”</p>\n<p>17.It’s not clear how or whether House Democrats will respond to Trump’s<br>vow of noncooperation. In recent weeks, leaders of the House inquiry signaled<br>they are reluctant to go to court or seek to hold officials in criminal<br>contempt for refusing to comply with a subpoena.<br>还不清楚众议院民主党派怎么回应或者是否会回应川普拒绝合作的承诺. 在最近几周,<br>众议院调查团队的负责人发出信号, 他们不愿意因为拒绝传票而走上法庭或者让官方<br>人员陷于刑事指控的境地.</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><a href=\"https://www.latimes.com/politics/story/2019-10-09/trumps-legal-strategy-against-impeachment-shaky-constitutional-grounds-scholars-say\">原文链接</a>  </p>\n<h2 id=\"Trump’s-legal-strategy-against-impeachment-is-on-shaky-constitutional-grounds-scholars-say\"><a href=\"#Trump’s-legal-strategy-against-impeachment-is-on-shaky-constitutional-grounds-scholars-say\" class=\"headerlink\" title=\"Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say\"></a>Trump’s legal strategy against impeachment is on shaky constitutional grounds, scholars say</h2><h3 id=\"学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\"><a href=\"#学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\" class=\"headerlink\" title=\"学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据\"></a>学者认为川普反对弹劾的律法政策是基于站不住脚的宪法依据</h3><p>1.Washington —  Constitutional lawyers said Wednesday that President Trump’s<br>vow not to cooperate with the impeachment inquiry is both unprecedented and<br>unlikely to spare him from being formally charged by the House.<br>In fact, they say, it may only increase the chances that he will be impeached.<br>华盛顿报道 - 宪法律师周三声明, 川普总统发誓不会与弹劾调查进行合作的言论是<br>前所未有的, 而且也很可能使他面临众议院的正式指控. 并且, 他们还说到, 这有可能<br>增加川普被弹劾的可能.</p>\n<p>2.The Constitution says the “House of Representatives shall have the sole<br>power of impeachment,” and it does not give the president a specific role<br>in the process. A president is in some sense like an ordinary defendant<br>who may be subject to a criminal investigation and an indictment,<br>all without his participation or involvement, scholars say.<br>美国宪法里写到, “众议院拥有弹劾的唯一权力”, 而且没有赋予总统在此过程中的任何<br>特殊角色. 学者认为, 总统在整个过程中都不会参与到弹劾中, 某种意义上和普通被告一样,<br>可能面临刑事调查和指控.  </p>\n<p>3.“The president’s cooperation is not required or needed,” said University of<br>North Carolina law professor Michael J. Gerhardt, an expert on impeachment.<br>And “the House may make that defiance grounds for impeachment,” he added,<br>noting that in 1974, a House committee approved articles of impeachment against<br>President Nixon based in part on his refusal to comply with congressional subpoenas.<br>北卡罗莱纳大学的法律学教授, 同时也是研究弹劾的专家, Michael J.Gerhardt认为,<br>“总统的配合并不是必需的, 众议院可以把这作为违抗理由去弹劾”. 他还补充到, 1974年,<br>众议院委员会通过了一项弹劾决议, 其部分原因就是尼克松总统拒绝了来自国会的传票. </p>","more":"<p>4.Though both Nixon and President Clinton tried behind the scenes to slow<br>or stop impeachment proceedings, they also attempted to cooperate at times,<br>or at least appear to, out of respect for the process and fear they might<br>look like they were hiding something.<br>尽管尼克松和克林顿总统都试图在幕后减缓或者阻止弹劾的进程, 但至少他们在当时都是<br>试图配合弹劾工作的, 至少看上去是. 对于弹劾的不尊重和害怕会让他们看起来隐藏了<br>一些事.</p>\n<p>5.“There is no precedent for the president doing what President Trump is<br>doing here: saying I will flatly refuse to cooperate and ordering all<br>employees of the executive branch to refuse to cooperate as well,”<br>said professor Frank O. Bowman, who teaches impeachment law at the<br>University of Missouri and Georgetown.<br>来自密苏里和乔治敦大学, 教弹劾法律的教授Frank O.Bowman说:”之前从来没有<br>一份先例像川普总统这样, 说自己断然拒绝合作, 而且还命令所有的行政雇员也拒绝合作.”</p>\n<p>6.In Tuesday’s eight-page letter to House Democrats, White House Counsel<br>Pat Cipillone pronounced Trump innocent of wrongdoing and the inquiry<br>“unconstitutional.”<br>周四一份来自白宫的法律顾问Pat Cipillone的八页信件发往了众议院的民主党派,<br>他宣称川普的错误做法是无辜的, 而且弹劾调查也是违宪的.</p>\n<p>7.He said Trump’s July 25 phone call asking the new president of Ukraine<br>to do him “a favor” and investigate former Vice President Joe Biden and<br>his son Hunter was “completely appropriate. The president did nothing wrong,<br>and there is no legitimate basis for an impeachment inquiry.”<br>他说, 川普在7月25号致电给乌克兰新总统, 要求他帮助和调查前副总统Joe Biden以及<br>他的儿子Hunter是”完全合理的. 总统没有做错什么, 而且也没有一个合法的法律依据<br>可以支撑弹劾的调查”</p>\n<p>8.Legal experts, however, say Trump’s actions were exactly the kinds of<br>things that framers were thinking of when they included an impeachment<br>provision in the Constitution. Trump has acknowledged that even as he asked<br>Ukraine to investigate one of his political opponents, he had ordered<br>that nearly $400 million in aid to Ukraine be withheld.<br>然而法律专家认为, 川普的行为恰好就是制宪者将弹劾条款加入宪法时所考虑过的.<br>川普认识到即使他要求乌克兰去调查他其中的一个政治对手, 他下令资助给乌克兰的<br>将近40亿美元的援助也将被扣留.</p>\n<p>9.The White House letter suggests that the inquiry is invalid because<br>there was no formal House vote to launch it, and that Trump and Republicans<br>have so far not been given the right to see evidence and call witnesses.<br>Based on this conclusion, he said, “President Trump and his administration<br>cannot participate in your partisan and unconstitutional inquiry.”<br>白宫的信件认为调查是无效的, 因为没有任何正式的众议院决议去启动这项调查, 而且<br>川普和共和党至今甚至没有权力见到证据和传唤目击者. 基于这些结论, 他说: “川普<br>总统和他的管理团队不会参与到你们的党派和违宪的调查中去”</p>\n<p>10.Lawyers took to social media to express surprise and disdain, noting<br>that no such rights or requirements exist in the Constitution.<br>律师在社交媒体上表达了他的惊讶和蔑视, 指出在宪法中不存在这样的权力和请求.</p>\n<p>11.“This letter is bananas. A barely-lawyered temper tantrum,” tweeted<br>Gregg Nunziata, a former counsel for Senate Republicans.<br>前任的共和党法律顾问, Gregg Nunziata发推说道:”这封信就是胡闹, 一份没有法律<br>常识的脾气的宣泄”</p>\n<p>12.University of Texas law professor Steve Vladeck said it was remarkable<br>for the top White House lawyer to say in writing that it “is completely<br>appropriate for the president of the United States to actively solicit<br>foreign intervention in U.S. presidential elections. Let’s not lose<br>sight of just how insane that is.”<br>德克萨斯大学的法律教授Steve Vladeck表示, 对于一个顶级的白宫律师, 以书面形式<br>说”美国总统积极的寻求外国介入到美国的总统选择中是完全合理的. 让我们不要忘记<br>这是多么疯狂”, 真是太出色了.(这段真是不知道怎么翻译…)</p>\n<p>13.Lisa Kern Griffin, a Duke law professor, described the letter as a<br>“political stunt that misinterprets the Constitution, ignores relevant<br>precedents and defies common sense.” She said the letter sets the stage<br>for a constitutional crisis.<br>杜克的法律教授, Lisa Kern Griffin形容这个信是”曲解宪法的政治手段, 忽略了<br>相关的先例, 否决了共识”. 她说这封信为宪法的危机奠定了一个基础.</p>\n<p>14.“Of course, the House can proceed with impeachment based on the testimony<br>and evidence it can access, but it strikes me as dangerous for the entire<br>executive branch to defy congressional oversight.”<br>“理所当然的, 众议院可以继续根据已有的证词和证据进行弹劾, 但是令我感到危险的是<br>整个行政部门都违抗国会的监督”</p>\n<p>15.Neal K. Katyal, who was acting solicitor general during the Obama administration,<br>noted that Trump’s lawyers have insisted that he is immune from criminal charges,<br>shielded from congressional and state legal demands, including for his tax returns,<br>and now shielded from an impeachment inquiry.<br>在奥巴马政府期间担任代理司法部副部长的Neal K. Katyal指出, 川普的律师坚持他(川普)<br>是免于刑事指控的, 受国会和国家法律要求的保护, 包括他的报税表, 所以现在也保护他免<br>于收到弹劾的调查.</p>\n<p>16.Gerhardt said the White House letter “shows nothing but contempt for the<br>law and the Constitution. Its principal argument is that the president is<br>above the law. In fact, he is not. Impeachment is one of the unique constitutional<br>processes for holding the president accountable for abusing his power.”<br>Gerhardt认为白宫信件”展示了对于法律和宪法的蔑视. 这里面的主要内容就是总统<br>凌驾于法律之上. 但事实上, 他是错的. 弹劾是宪法中用于控制总统滥用职权的独特<br>法律条文之一”</p>\n<p>17.It’s not clear how or whether House Democrats will respond to Trump’s<br>vow of noncooperation. In recent weeks, leaders of the House inquiry signaled<br>they are reluctant to go to court or seek to hold officials in criminal<br>contempt for refusing to comply with a subpoena.<br>还不清楚众议院民主党派怎么回应或者是否会回应川普拒绝合作的承诺. 在最近几周,<br>众议院调查团队的负责人发出信号, 他们不愿意因为拒绝传票而走上法庭或者让官方<br>人员陷于刑事指控的境地.</p>"},{"title":"新闻翻译-2","date":"2021-12-09T03:12:43.000Z","comments":0,"_content":"[原文链接](https://www.smithsonianmag.com/smart-news/chinese-rover-spots-weird-cube-on-the-moon-180979174/) \n\n## Chinese Rover Spots Weird, Large ‘Cube’ on the Moon\n## 中国航天器在月球发现了诡异巨大的\"方块\"\n\n### The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look\n### 这个呈几何状的月球物体被戏称为\"神秘小屋\"，让科学家们感到困惑，他们计划靠近点看看\n\n![](1.png) \n*The rover will spend two to three lunar days, which is about two to three months time on Earth, traversing the lunar landscape to take a closer look at the object. CNSA/Our Space/Gizmodo*\n*航天器将花费两到三个月球日，相当于地球上两到三个月的时间，通过月球表面来更近的观察这个物体。[CNSA/Our Space/Gizmodo](https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw)*\n\nAn intriguing cube-shaped object spotted on the far side of the moon has attracted the attention of scientists.\n一个有趣的方块形状物体，在月球的另一端被发现，这引起了科学家的注意。\n\nChina’s Yutu 2 rover captured images of the mystery structure from around 260 feet away while navigating across the Von Kármán crater in the South Pole-Aitken Basin on the moon, reports Popular Science’s Margo Milanowski. Chinese scientists have already rerouted the rover to take a closer look, but it will take a few months for Yutu 2 to reach the bizarre lunar feature.\n据[《流行科学》](https://www.popsci.com/science/chinas-rover-mysterious-hut-on-moon/)的Margo Milanowski报道，中国的月兔2号航天器在月球的北部`Pole-Aitken`盆地，正在穿越`Von Kármán`坑时，拍摄到一张260英尺外的神秘结构的物体。中国的科学家已经调整航天器的方向以更近的观察，但是这将花费月兔2号几个月的时间去靠近这个奇特的月球物体。\n\nThe shape was spotted on the horizon in November during the mission's 36th lunar day, according to a Yutu 2 diary published by Our Space, a Chinese language science outreach channel affiliated with the China National Space Administration. Our Space first described the object in a post last week, temporarily dubbing it a “mystery hut” (神秘小屋/shenmi xiaowu).\n根据[《我们的太空》](https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw)的月兔2号每日报告（这是一家隶属于中国国家航天局的对外中文平台），这个几何体在地平线处发现，正值12月份，执行任务的第36个月球日。《我们的太空》在上周首次描述这个物体，将其戏称为是一个\"神秘小屋\"。\n<!-- more -->\nSince Yutu 2 spotted the “mystery hut,” scientists have changed the six-wheeled vehicle course to investigate the cube. The solar-powered rover will spend two to three lunar days—equivalent to two to three months time on Earth—traversing the lunar landscape to take a closer look, so we should have more clues shortly, reports Andrew Jones for Space. \n玉兔2号发现\"神秘小屋\"之后，科学家改变了这个六个轮子航天器的目标，转为探索这个方块。这个太阳能的航天器会花费两到三个月球日-等价于两到三个地球月-穿越月球表面去更近的观察，所以我们很快会获得更多线索，来自于[《太空》](https://www.space.com/china-yutu-2-moon-rover-cube-shaped-object-photos)的Andrew Jones报道。\n\nThe rover’s images immediately sparked debate as to what the cube-shaped object was and inspired humorous guesses. “Was it a home built by aliens after the crash landing? Or is it the pioneer spacecraft of the predecessors to explore the moon?” writes Our Space.\n航天器的照片马上引起了对于这个集合形状的物体到底是什么的讨论，并引发了无数的猜想。《我们的太空》写道，\"这是外星人撞击月球后建立的房子吗？或者这是先驱者用来探索月球的的航天器？\"\n\nThe \"hut\" may simply be a large boulder that’s been pushed up by meteor impact and taken on a geometric look in the low-resolution image. The blog post noted that there is an impact crater beside the mystery hut, further suggesting that the cube could just be an excavated lunar rock.\n\"小屋\"可能就是受流星撞击而出现的巨石，而且在低像素的照片下看起来是一个几何形状。博客提醒说，在神秘小屋旁边有一个撞击巨坑，进一步推测这个方块可能只是一个被撞出来的月球石块。\n\nThis latest discovery isn’t the first curious thing the Yutu 2 rover has seen since its arrival on the far side of the moon almost three years ago. In September 2019, the rover encountered a strange, gel-like substance that turned out to be melted rock fragments cemented together from extreme heat. This year, Yutu 2 spotted unusual shards sticking out from the lunar surface that turned out to be rocks launched by a meteor impact, reports Gizmodo’s George Dvorsky.\n自从月兔2号航天器在将近三年前到达月球的另一端后，已经不止一次有这种奇特发现。在2019年9月，航天器遇到了一个奇怪的[凝胶状物质](https://www.inverse.com/science/chinese-lunar-lander-gel-substance)，这个来自于被溶解的石头成分在高温下又被粘合到一块。今年，月兔2号在月球表面发现了[不寻常尖锐碎片](https://www.space.com/china-yutu-2-moon-far-side-rover-milestone-discovery)突出，这个来自于流星撞击后的石头。报道来自于[《Gizmodo》](https://gizmodo.com/chinese-rover-to-investigate-mysterious-hut-spotted-o-1848165985)的George Dvorsky。\n\n\nWhatever the cube-shaped object is, we will have to wait another few months before getting an answer—until then, it's fun to speculate on what the “mystery hut” could be.\n不管方块形状的物体是什么，我们都要等几个月才能获得答案，在这期间推测\"神秘小屋\"是什么将很有意思。","source":"_posts/news/新闻翻译-2.md","raw":"---\ntitle: 新闻翻译-2\ndate: 2021-12-09 11:12:43\ntags:\n- translate\n- news\ncomments: false\ncategories: \n- 学习\n- 英语\n---\n[原文链接](https://www.smithsonianmag.com/smart-news/chinese-rover-spots-weird-cube-on-the-moon-180979174/) \n\n## Chinese Rover Spots Weird, Large ‘Cube’ on the Moon\n## 中国航天器在月球发现了诡异巨大的\"方块\"\n\n### The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look\n### 这个呈几何状的月球物体被戏称为\"神秘小屋\"，让科学家们感到困惑，他们计划靠近点看看\n\n![](1.png) \n*The rover will spend two to three lunar days, which is about two to three months time on Earth, traversing the lunar landscape to take a closer look at the object. CNSA/Our Space/Gizmodo*\n*航天器将花费两到三个月球日，相当于地球上两到三个月的时间，通过月球表面来更近的观察这个物体。[CNSA/Our Space/Gizmodo](https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw)*\n\nAn intriguing cube-shaped object spotted on the far side of the moon has attracted the attention of scientists.\n一个有趣的方块形状物体，在月球的另一端被发现，这引起了科学家的注意。\n\nChina’s Yutu 2 rover captured images of the mystery structure from around 260 feet away while navigating across the Von Kármán crater in the South Pole-Aitken Basin on the moon, reports Popular Science’s Margo Milanowski. Chinese scientists have already rerouted the rover to take a closer look, but it will take a few months for Yutu 2 to reach the bizarre lunar feature.\n据[《流行科学》](https://www.popsci.com/science/chinas-rover-mysterious-hut-on-moon/)的Margo Milanowski报道，中国的月兔2号航天器在月球的北部`Pole-Aitken`盆地，正在穿越`Von Kármán`坑时，拍摄到一张260英尺外的神秘结构的物体。中国的科学家已经调整航天器的方向以更近的观察，但是这将花费月兔2号几个月的时间去靠近这个奇特的月球物体。\n\nThe shape was spotted on the horizon in November during the mission's 36th lunar day, according to a Yutu 2 diary published by Our Space, a Chinese language science outreach channel affiliated with the China National Space Administration. Our Space first described the object in a post last week, temporarily dubbing it a “mystery hut” (神秘小屋/shenmi xiaowu).\n根据[《我们的太空》](https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw)的月兔2号每日报告（这是一家隶属于中国国家航天局的对外中文平台），这个几何体在地平线处发现，正值12月份，执行任务的第36个月球日。《我们的太空》在上周首次描述这个物体，将其戏称为是一个\"神秘小屋\"。\n<!-- more -->\nSince Yutu 2 spotted the “mystery hut,” scientists have changed the six-wheeled vehicle course to investigate the cube. The solar-powered rover will spend two to three lunar days—equivalent to two to three months time on Earth—traversing the lunar landscape to take a closer look, so we should have more clues shortly, reports Andrew Jones for Space. \n玉兔2号发现\"神秘小屋\"之后，科学家改变了这个六个轮子航天器的目标，转为探索这个方块。这个太阳能的航天器会花费两到三个月球日-等价于两到三个地球月-穿越月球表面去更近的观察，所以我们很快会获得更多线索，来自于[《太空》](https://www.space.com/china-yutu-2-moon-rover-cube-shaped-object-photos)的Andrew Jones报道。\n\nThe rover’s images immediately sparked debate as to what the cube-shaped object was and inspired humorous guesses. “Was it a home built by aliens after the crash landing? Or is it the pioneer spacecraft of the predecessors to explore the moon?” writes Our Space.\n航天器的照片马上引起了对于这个集合形状的物体到底是什么的讨论，并引发了无数的猜想。《我们的太空》写道，\"这是外星人撞击月球后建立的房子吗？或者这是先驱者用来探索月球的的航天器？\"\n\nThe \"hut\" may simply be a large boulder that’s been pushed up by meteor impact and taken on a geometric look in the low-resolution image. The blog post noted that there is an impact crater beside the mystery hut, further suggesting that the cube could just be an excavated lunar rock.\n\"小屋\"可能就是受流星撞击而出现的巨石，而且在低像素的照片下看起来是一个几何形状。博客提醒说，在神秘小屋旁边有一个撞击巨坑，进一步推测这个方块可能只是一个被撞出来的月球石块。\n\nThis latest discovery isn’t the first curious thing the Yutu 2 rover has seen since its arrival on the far side of the moon almost three years ago. In September 2019, the rover encountered a strange, gel-like substance that turned out to be melted rock fragments cemented together from extreme heat. This year, Yutu 2 spotted unusual shards sticking out from the lunar surface that turned out to be rocks launched by a meteor impact, reports Gizmodo’s George Dvorsky.\n自从月兔2号航天器在将近三年前到达月球的另一端后，已经不止一次有这种奇特发现。在2019年9月，航天器遇到了一个奇怪的[凝胶状物质](https://www.inverse.com/science/chinese-lunar-lander-gel-substance)，这个来自于被溶解的石头成分在高温下又被粘合到一块。今年，月兔2号在月球表面发现了[不寻常尖锐碎片](https://www.space.com/china-yutu-2-moon-far-side-rover-milestone-discovery)突出，这个来自于流星撞击后的石头。报道来自于[《Gizmodo》](https://gizmodo.com/chinese-rover-to-investigate-mysterious-hut-spotted-o-1848165985)的George Dvorsky。\n\n\nWhatever the cube-shaped object is, we will have to wait another few months before getting an answer—until then, it's fun to speculate on what the “mystery hut” could be.\n不管方块形状的物体是什么，我们都要等几个月才能获得答案，在这期间推测\"神秘小屋\"是什么将很有意思。","slug":"news/新闻翻译-2","published":1,"updated":"2021-12-10T03:01:33.000Z","_id":"cl102vqls0000tccf84sp3870","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.smithsonianmag.com/smart-news/chinese-rover-spots-weird-cube-on-the-moon-180979174/\">原文链接</a> </p>\n<h2 id=\"Chinese-Rover-Spots-Weird-Large-‘Cube’-on-the-Moon\"><a href=\"#Chinese-Rover-Spots-Weird-Large-‘Cube’-on-the-Moon\" class=\"headerlink\" title=\"Chinese Rover Spots Weird, Large ‘Cube’ on the Moon\"></a>Chinese Rover Spots Weird, Large ‘Cube’ on the Moon</h2><h2 id=\"中国航天器在月球发现了诡异巨大的”方块”\"><a href=\"#中国航天器在月球发现了诡异巨大的”方块”\" class=\"headerlink\" title=\"中国航天器在月球发现了诡异巨大的”方块”\"></a>中国航天器在月球发现了诡异巨大的”方块”</h2><h3 id=\"The-geometric-lunar-feature-dubbed-a-‘mystery-hut’-has-stumped-scientists-who-say-they-plan-to-take-a-closer-look\"><a href=\"#The-geometric-lunar-feature-dubbed-a-‘mystery-hut’-has-stumped-scientists-who-say-they-plan-to-take-a-closer-look\" class=\"headerlink\" title=\"The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look\"></a>The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look</h3><h3 id=\"这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\"><a href=\"#这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\" class=\"headerlink\" title=\"这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\"></a>这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看</h3><p><img src=\"/2021/12/09/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-2/1.png\"><br><em>The rover will spend two to three lunar days, which is about two to three months time on Earth, traversing the lunar landscape to take a closer look at the object. CNSA/Our Space/Gizmodo</em><br><em>航天器将花费两到三个月球日，相当于地球上两到三个月的时间，通过月球表面来更近的观察这个物体。<a href=\"https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw\">CNSA/Our Space/Gizmodo</a></em></p>\n<p>An intriguing cube-shaped object spotted on the far side of the moon has attracted the attention of scientists.<br>一个有趣的方块形状物体，在月球的另一端被发现，这引起了科学家的注意。</p>\n<p>China’s Yutu 2 rover captured images of the mystery structure from around 260 feet away while navigating across the Von Kármán crater in the South Pole-Aitken Basin on the moon, reports Popular Science’s Margo Milanowski. Chinese scientists have already rerouted the rover to take a closer look, but it will take a few months for Yutu 2 to reach the bizarre lunar feature.<br>据<a href=\"https://www.popsci.com/science/chinas-rover-mysterious-hut-on-moon/\">《流行科学》</a>的Margo Milanowski报道，中国的月兔2号航天器在月球的北部<code>Pole-Aitken</code>盆地，正在穿越<code>Von Kármán</code>坑时，拍摄到一张260英尺外的神秘结构的物体。中国的科学家已经调整航天器的方向以更近的观察，但是这将花费月兔2号几个月的时间去靠近这个奇特的月球物体。</p>\n<p>The shape was spotted on the horizon in November during the mission’s 36th lunar day, according to a Yutu 2 diary published by Our Space, a Chinese language science outreach channel affiliated with the China National Space Administration. Our Space first described the object in a post last week, temporarily dubbing it a “mystery hut” (神秘小屋/shenmi xiaowu).<br>根据<a href=\"https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw\">《我们的太空》</a>的月兔2号每日报告（这是一家隶属于中国国家航天局的对外中文平台），这个几何体在地平线处发现，正值12月份，执行任务的第36个月球日。《我们的太空》在上周首次描述这个物体，将其戏称为是一个”神秘小屋”。</p>\n<span id=\"more\"></span>\n<p>Since Yutu 2 spotted the “mystery hut,” scientists have changed the six-wheeled vehicle course to investigate the cube. The solar-powered rover will spend two to three lunar days—equivalent to two to three months time on Earth—traversing the lunar landscape to take a closer look, so we should have more clues shortly, reports Andrew Jones for Space.<br>玉兔2号发现”神秘小屋”之后，科学家改变了这个六个轮子航天器的目标，转为探索这个方块。这个太阳能的航天器会花费两到三个月球日-等价于两到三个地球月-穿越月球表面去更近的观察，所以我们很快会获得更多线索，来自于<a href=\"https://www.space.com/china-yutu-2-moon-rover-cube-shaped-object-photos\">《太空》</a>的Andrew Jones报道。</p>\n<p>The rover’s images immediately sparked debate as to what the cube-shaped object was and inspired humorous guesses. “Was it a home built by aliens after the crash landing? Or is it the pioneer spacecraft of the predecessors to explore the moon?” writes Our Space.<br>航天器的照片马上引起了对于这个集合形状的物体到底是什么的讨论，并引发了无数的猜想。《我们的太空》写道，”这是外星人撞击月球后建立的房子吗？或者这是先驱者用来探索月球的的航天器？”</p>\n<p>The “hut” may simply be a large boulder that’s been pushed up by meteor impact and taken on a geometric look in the low-resolution image. The blog post noted that there is an impact crater beside the mystery hut, further suggesting that the cube could just be an excavated lunar rock.<br>“小屋”可能就是受流星撞击而出现的巨石，而且在低像素的照片下看起来是一个几何形状。博客提醒说，在神秘小屋旁边有一个撞击巨坑，进一步推测这个方块可能只是一个被撞出来的月球石块。</p>\n<p>This latest discovery isn’t the first curious thing the Yutu 2 rover has seen since its arrival on the far side of the moon almost three years ago. In September 2019, the rover encountered a strange, gel-like substance that turned out to be melted rock fragments cemented together from extreme heat. This year, Yutu 2 spotted unusual shards sticking out from the lunar surface that turned out to be rocks launched by a meteor impact, reports Gizmodo’s George Dvorsky.<br>自从月兔2号航天器在将近三年前到达月球的另一端后，已经不止一次有这种奇特发现。在2019年9月，航天器遇到了一个奇怪的<a href=\"https://www.inverse.com/science/chinese-lunar-lander-gel-substance\">凝胶状物质</a>，这个来自于被溶解的石头成分在高温下又被粘合到一块。今年，月兔2号在月球表面发现了<a href=\"https://www.space.com/china-yutu-2-moon-far-side-rover-milestone-discovery\">不寻常尖锐碎片</a>突出，这个来自于流星撞击后的石头。报道来自于<a href=\"https://gizmodo.com/chinese-rover-to-investigate-mysterious-hut-spotted-o-1848165985\">《Gizmodo》</a>的George Dvorsky。</p>\n<p>Whatever the cube-shaped object is, we will have to wait another few months before getting an answer—until then, it’s fun to speculate on what the “mystery hut” could be.<br>不管方块形状的物体是什么，我们都要等几个月才能获得答案，在这期间推测”神秘小屋”是什么将很有意思。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><a href=\"https://www.smithsonianmag.com/smart-news/chinese-rover-spots-weird-cube-on-the-moon-180979174/\">原文链接</a> </p>\n<h2 id=\"Chinese-Rover-Spots-Weird-Large-‘Cube’-on-the-Moon\"><a href=\"#Chinese-Rover-Spots-Weird-Large-‘Cube’-on-the-Moon\" class=\"headerlink\" title=\"Chinese Rover Spots Weird, Large ‘Cube’ on the Moon\"></a>Chinese Rover Spots Weird, Large ‘Cube’ on the Moon</h2><h2 id=\"中国航天器在月球发现了诡异巨大的”方块”\"><a href=\"#中国航天器在月球发现了诡异巨大的”方块”\" class=\"headerlink\" title=\"中国航天器在月球发现了诡异巨大的”方块”\"></a>中国航天器在月球发现了诡异巨大的”方块”</h2><h3 id=\"The-geometric-lunar-feature-dubbed-a-‘mystery-hut’-has-stumped-scientists-who-say-they-plan-to-take-a-closer-look\"><a href=\"#The-geometric-lunar-feature-dubbed-a-‘mystery-hut’-has-stumped-scientists-who-say-they-plan-to-take-a-closer-look\" class=\"headerlink\" title=\"The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look\"></a>The geometric lunar feature dubbed a ‘mystery hut’ has stumped scientists, who say they plan to take a closer look</h3><h3 id=\"这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\"><a href=\"#这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\" class=\"headerlink\" title=\"这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看\"></a>这个呈几何状的月球物体被戏称为”神秘小屋”，让科学家们感到困惑，他们计划靠近点看看</h3><p><img src=\"/2021/12/09/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-2/1.png\"><br><em>The rover will spend two to three lunar days, which is about two to three months time on Earth, traversing the lunar landscape to take a closer look at the object. CNSA/Our Space/Gizmodo</em><br><em>航天器将花费两到三个月球日，相当于地球上两到三个月的时间，通过月球表面来更近的观察这个物体。<a href=\"https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw\">CNSA/Our Space/Gizmodo</a></em></p>\n<p>An intriguing cube-shaped object spotted on the far side of the moon has attracted the attention of scientists.<br>一个有趣的方块形状物体，在月球的另一端被发现，这引起了科学家的注意。</p>\n<p>China’s Yutu 2 rover captured images of the mystery structure from around 260 feet away while navigating across the Von Kármán crater in the South Pole-Aitken Basin on the moon, reports Popular Science’s Margo Milanowski. Chinese scientists have already rerouted the rover to take a closer look, but it will take a few months for Yutu 2 to reach the bizarre lunar feature.<br>据<a href=\"https://www.popsci.com/science/chinas-rover-mysterious-hut-on-moon/\">《流行科学》</a>的Margo Milanowski报道，中国的月兔2号航天器在月球的北部<code>Pole-Aitken</code>盆地，正在穿越<code>Von Kármán</code>坑时，拍摄到一张260英尺外的神秘结构的物体。中国的科学家已经调整航天器的方向以更近的观察，但是这将花费月兔2号几个月的时间去靠近这个奇特的月球物体。</p>\n<p>The shape was spotted on the horizon in November during the mission’s 36th lunar day, according to a Yutu 2 diary published by Our Space, a Chinese language science outreach channel affiliated with the China National Space Administration. Our Space first described the object in a post last week, temporarily dubbing it a “mystery hut” (神秘小屋/shenmi xiaowu).<br>根据<a href=\"https://mp.weixin.qq.com/s/dpKkjWHk9tay3JERnrfuUw\">《我们的太空》</a>的月兔2号每日报告（这是一家隶属于中国国家航天局的对外中文平台），这个几何体在地平线处发现，正值12月份，执行任务的第36个月球日。《我们的太空》在上周首次描述这个物体，将其戏称为是一个”神秘小屋”。</p>","more":"<p>Since Yutu 2 spotted the “mystery hut,” scientists have changed the six-wheeled vehicle course to investigate the cube. The solar-powered rover will spend two to three lunar days—equivalent to two to three months time on Earth—traversing the lunar landscape to take a closer look, so we should have more clues shortly, reports Andrew Jones for Space.<br>玉兔2号发现”神秘小屋”之后，科学家改变了这个六个轮子航天器的目标，转为探索这个方块。这个太阳能的航天器会花费两到三个月球日-等价于两到三个地球月-穿越月球表面去更近的观察，所以我们很快会获得更多线索，来自于<a href=\"https://www.space.com/china-yutu-2-moon-rover-cube-shaped-object-photos\">《太空》</a>的Andrew Jones报道。</p>\n<p>The rover’s images immediately sparked debate as to what the cube-shaped object was and inspired humorous guesses. “Was it a home built by aliens after the crash landing? Or is it the pioneer spacecraft of the predecessors to explore the moon?” writes Our Space.<br>航天器的照片马上引起了对于这个集合形状的物体到底是什么的讨论，并引发了无数的猜想。《我们的太空》写道，”这是外星人撞击月球后建立的房子吗？或者这是先驱者用来探索月球的的航天器？”</p>\n<p>The “hut” may simply be a large boulder that’s been pushed up by meteor impact and taken on a geometric look in the low-resolution image. The blog post noted that there is an impact crater beside the mystery hut, further suggesting that the cube could just be an excavated lunar rock.<br>“小屋”可能就是受流星撞击而出现的巨石，而且在低像素的照片下看起来是一个几何形状。博客提醒说，在神秘小屋旁边有一个撞击巨坑，进一步推测这个方块可能只是一个被撞出来的月球石块。</p>\n<p>This latest discovery isn’t the first curious thing the Yutu 2 rover has seen since its arrival on the far side of the moon almost three years ago. In September 2019, the rover encountered a strange, gel-like substance that turned out to be melted rock fragments cemented together from extreme heat. This year, Yutu 2 spotted unusual shards sticking out from the lunar surface that turned out to be rocks launched by a meteor impact, reports Gizmodo’s George Dvorsky.<br>自从月兔2号航天器在将近三年前到达月球的另一端后，已经不止一次有这种奇特发现。在2019年9月，航天器遇到了一个奇怪的<a href=\"https://www.inverse.com/science/chinese-lunar-lander-gel-substance\">凝胶状物质</a>，这个来自于被溶解的石头成分在高温下又被粘合到一块。今年，月兔2号在月球表面发现了<a href=\"https://www.space.com/china-yutu-2-moon-far-side-rover-milestone-discovery\">不寻常尖锐碎片</a>突出，这个来自于流星撞击后的石头。报道来自于<a href=\"https://gizmodo.com/chinese-rover-to-investigate-mysterious-hut-spotted-o-1848165985\">《Gizmodo》</a>的George Dvorsky。</p>\n<p>Whatever the cube-shaped object is, we will have to wait another few months before getting an answer—until then, it’s fun to speculate on what the “mystery hut” could be.<br>不管方块形状的物体是什么，我们都要等几个月才能获得答案，在这期间推测”神秘小屋”是什么将很有意思。</p>"},{"title":"新闻翻译-3","date":"2021-12-13T05:42:08.000Z","comments":1,"_content":"[原文链接](https://time.com/6125959/best-movies-2021/?utm_source=roundup&utm_campaign=2021208) \n\n吐槽一下，这十佳电影看着满满都是政治正确的味道，Passing这部电影简直buff叠满，黑白片，双女主，关于美国梦和黑人白人之间的冲突，满脸写着\"我是冲着奥斯卡来的\"。\n\n---\n\n## 2021十佳电影\n如果说2020年对于影迷来说是一个漫长黑暗的冬天（当然也有一些优秀的影片，但是不得不在家观影也是一个打击），2021就是一个生机勃勃，欢声笑语的春天。不仅仅是普通意义的春天，也是一个充满了斯特拉文斯基风格的春天，在祥和齐声的交响乐中绽放在大地上的番红花，雨滴阵阵落满了泥土，树木抽出了嫩芽。这么说的一部分原因很现实，也在预料之内：相当数量的今年的最佳影片早在2020年就已完成，但是推迟了，直到它们可以在影院上映。在黑暗的几个月过去后，这个值得欢庆的季节里绽放的曙光依然可以看作精神的慰藉。在本文的结尾，请参考这十部今年最好的电影（以及提名影片）作为你观影的选项。我们都值得这一切。\n \n- 10.Drive My Car\n\nRyusuke Hamaguchi的三小时的流畅而又华丽的剧本（故事改编自Haruki Murakami的短篇小说），讲述了一个来自东京，经历了丧偶的演员和戏剧导演（Hidetoshi Nishijima），在广岛找了份工作，制作契柯夫的《万尼亚舅舅》。一个来自乡下（三浦店）的年轻女人被雇佣当他的司机；他们慢慢建立了友情，同时也帮助他分辨出他究竟迷失在哪里。Hamaguchi编织了一个关于失去和原谅，充满了光辉的故事，无论你有多么疲惫，一句轻轻的鼓励也能推动你在世界上继续前行。\n![](DriveMyCar.jpeg) \n\n- 9.The Tragedy of Macbeth\n\n这个故事你可能已经看过几百次了。但是Joel Coen用令人战栗的黑白色调，以及Frances McDormand和Denzel Washington饰演的狡诈，奸险的苏格兰人，犹如魔咒般吸引人，他们共同对该经典进行了难以置信的表达，彷佛置身于400年前，你作为第一个观众看到这个戏剧的首次呈现。今时今日，犹如往昔，这个故事冻彻骨髓。\n![](TheTragedyofMacbeth.jpg) \n<!-- more -->\n- 8.C’mon C’mon\n\nJoaquin Phoenix贡献了一次有趣而又精致的表演，剧中作为一个无儿无女的纽约广播记者，要在几周内负责照顾他少年老成的来自洛杉矶的9岁外甥（Woody Norman）。这怎么听起来不像一部完整的电影呢？但在编剧兼导演Mike Mills的手中，这就是整部电影的内容。No one is better at chronicling late 20th and early 21st century family affection, in all its thorny, shimmery beauty.（翻译不出来）\n![](CmonCmon.jpeg)\n\n- 7.The Disciple\n\n故事讲述一个歌手（公开资料显示，由Aditya Modak扮演），拥有十足的干劲和自律性，在一个曲高和寡的领域，为印度传统音乐奋斗终生，最终被迫认识到自己缺乏关键的天赋。导演Chaitanya Tamhane在他的鲜艳，动人的镜头下，审视了在一个现实世界中如此狂热的追求艺术之梦的意义，并没有那么重要。\n![](TheDisciple.jpeg)\n\n- 6.Passing\n\n这部电影改编自Nella Larsen的一部1929年的紧凑，强有力的小说，讲述了两个少女（由Tessa Thompson 和 Ruth Negga出色演绎）在成年后重新取得联系，她们的生活不仅仅发生交织，乃至最终的坍塌：两个女人都是黑人，但是其中一个却以白人自居。导演Rebecca Hall首次为我们深刻讲述了围绕在美国梦周围的是什么，是创造一切，或者成为谁--这被称为自由，有时候会付出惨痛的代价。\n![](Passing.jpeg)\n\n- 5.Parallel Mothers\n\nPenélope Cruz 贡献了杰出的表演，她饰演一个在马德里的女人，在中年成为母亲，同时她也在努力为她的曾祖父争取正义，他在西班牙内战中被杀害，尸体被抛弃在乱葬岗中。导演Pedro Almodóvar用情节剧的方式去回闪那些他的国家中的悲催历史，但同时也在强调关于母性的关键真理：历史由母亲们铸造，文明失去她们，将无法前行。\n![](ParallelMothers.jpeg)\n\n- 4.The Souvenir Part II\n\n这部英国制片人Joanna Hogg的令人刺痛和伤感的半自传电影中，讲述了在上世纪80年代的伦敦，一个年轻学生（Honor Swinton Byrne扮演，贡献了微妙迷人的表演）在完成她的毕业影片时，试图寻找令人心碎的个人悲剧的意义。在这个看似简单的故事中，Hogg捕捉到了一个年轻人渴望在世界中留下印记的方方面面，同时也需要绝望的寻找其中的意义。\n![](TheSouvenirPartII.jpeg)\n\n- 3.Summer of Soul\n\nAhmir “Questlove” Thompson的光辉纪录片记录了一系列发生在Woodstock的夏天，在Harlem公园的众星云集的免费演唱会。但是获得的关注却不多。The Harlem Cultural Festival 吸引众多人群，但从几年前开始，这项音乐和骄傲的国民盛典就开始被大量遗忘，或者更准确的说，单纯被忽视了。就像隐藏在眼皮底下的珠宝，电影呈现了Mahalia Jackson, Stevie Wonder and Nina Simone的伟大表演。至少现在，世界开始注意到了。\n![](SummerofSoul.jpeg)\n\n- 2.The Worst Person in the World\n\n丹麦-挪威混血导演Joachim Trier这部无比温柔的喜剧像是上帝赋予的礼物。Julie（Renate Reinsve扮演，这是一场奇妙的而又粗中有细的表演）一路在弄清楚她自己是谁，她先后爱上两个男人，最后意识到她失去了更多。Trier将故事导向了一个苦乐参半的结局。提醒我们一直在路上，未竟的道路最终都会转向光明。\n![](TheWorstPersonintheWorld.jpeg)\n\n- 1.The Power of the Dog  \n\n上世纪20年代的蒙大拿，一个愤世嫉俗的农场主（Benedict Cumberbatch饰演）遇到了一个精力充沛，充满梦想的少年（Kodi Smit-McPhee饰演），农场主起初对他不屑一顾，之后发生了更多故事。故事基于Thomas Savage在1967年发布的小说，在Jane Campion镜头下雄伟壮丽的西部，是犹如天空一般辽阔的电影画卷。同时也让人类的情感分毫毕现，像一根纤细的草，却又异常锋利。\n![](ThePoweroftheDog.jpeg)\n\n提名: West Side Story, The Card Counter, The Velvet Underground, The Lost Daughter, The Electrical Life of Louis Wain, I’m Your Man, King Richard, The Green Knight, The Truffle Hunters\n\n生词：\nmisanthropic rancher 愤世嫉俗的农场主\na reedy（芦苇般）, dreamy teenager 精力充沛，充满梦想的少年\ncontempt 轻视\nsinewy 强壮\na blade of grass 一叶草\nstaggeringly tender 惊人的／无比温柔\nsturdy delicacy 粗犷细腻\nbittersweet 苦乐参半\nwe’re all works in progress, unfinished beings whose only imperative is to turn toward the light 我们一直在路上，未竟的道路最终都会走向光明。\nradiant 光辉\nchronicles 把…载入编年史／历史\nstar-studded 群星荟萃\nneglected 忽视\nsemiautobiographical 半自传\nsubtle 微妙的\ncaptivating 迷人的\nfacets 方面\nmass grave 乱葬岗\ngirlhood 少女时代\ncompact 紧凑\npotent 强有力\nsuperbly 极佳的\nintersecting 相交／贯穿\nA singer with great drive and discipline 一个拥有十足干劲和自律的歌手\nwith searching openness 根据公开资料显示（？）\nrarefied 高深的／稀薄的／冷门领域\nunlucrative 不幸的\nexamines 审视\nfeverishly 狂热的\ntakes a backseat 排在次要位置\nwrought 精致\nprecocious 老成的\nshimmery beauty 闪闪发光的美\nshivery 颤抖\nrendering 表演／翻译\ntreacherous 不可信任的\nscheming Scots 诡计多端的苏格兰人\nswimmingly 流畅\ngorgeous 华丽\ndrama—adapted 戏剧改编\ngig 现场表演／临时工作\nnudge 推动\ntwig 树枝\nbounty 奖金\nWe’ve all earned it 我们都值得这一切\ncopiously 大量的\nHonorable mentions 荣誉提名","source":"_posts/news/新闻翻译-3.md","raw":"---\ntitle: 新闻翻译-3\ndate: 2021-12-13 13:42:08\ntags:\n- translate\n- news\ncomments: true\ncategories: \n- 学习\n- 英语\n---\n[原文链接](https://time.com/6125959/best-movies-2021/?utm_source=roundup&utm_campaign=2021208) \n\n吐槽一下，这十佳电影看着满满都是政治正确的味道，Passing这部电影简直buff叠满，黑白片，双女主，关于美国梦和黑人白人之间的冲突，满脸写着\"我是冲着奥斯卡来的\"。\n\n---\n\n## 2021十佳电影\n如果说2020年对于影迷来说是一个漫长黑暗的冬天（当然也有一些优秀的影片，但是不得不在家观影也是一个打击），2021就是一个生机勃勃，欢声笑语的春天。不仅仅是普通意义的春天，也是一个充满了斯特拉文斯基风格的春天，在祥和齐声的交响乐中绽放在大地上的番红花，雨滴阵阵落满了泥土，树木抽出了嫩芽。这么说的一部分原因很现实，也在预料之内：相当数量的今年的最佳影片早在2020年就已完成，但是推迟了，直到它们可以在影院上映。在黑暗的几个月过去后，这个值得欢庆的季节里绽放的曙光依然可以看作精神的慰藉。在本文的结尾，请参考这十部今年最好的电影（以及提名影片）作为你观影的选项。我们都值得这一切。\n \n- 10.Drive My Car\n\nRyusuke Hamaguchi的三小时的流畅而又华丽的剧本（故事改编自Haruki Murakami的短篇小说），讲述了一个来自东京，经历了丧偶的演员和戏剧导演（Hidetoshi Nishijima），在广岛找了份工作，制作契柯夫的《万尼亚舅舅》。一个来自乡下（三浦店）的年轻女人被雇佣当他的司机；他们慢慢建立了友情，同时也帮助他分辨出他究竟迷失在哪里。Hamaguchi编织了一个关于失去和原谅，充满了光辉的故事，无论你有多么疲惫，一句轻轻的鼓励也能推动你在世界上继续前行。\n![](DriveMyCar.jpeg) \n\n- 9.The Tragedy of Macbeth\n\n这个故事你可能已经看过几百次了。但是Joel Coen用令人战栗的黑白色调，以及Frances McDormand和Denzel Washington饰演的狡诈，奸险的苏格兰人，犹如魔咒般吸引人，他们共同对该经典进行了难以置信的表达，彷佛置身于400年前，你作为第一个观众看到这个戏剧的首次呈现。今时今日，犹如往昔，这个故事冻彻骨髓。\n![](TheTragedyofMacbeth.jpg) \n<!-- more -->\n- 8.C’mon C’mon\n\nJoaquin Phoenix贡献了一次有趣而又精致的表演，剧中作为一个无儿无女的纽约广播记者，要在几周内负责照顾他少年老成的来自洛杉矶的9岁外甥（Woody Norman）。这怎么听起来不像一部完整的电影呢？但在编剧兼导演Mike Mills的手中，这就是整部电影的内容。No one is better at chronicling late 20th and early 21st century family affection, in all its thorny, shimmery beauty.（翻译不出来）\n![](CmonCmon.jpeg)\n\n- 7.The Disciple\n\n故事讲述一个歌手（公开资料显示，由Aditya Modak扮演），拥有十足的干劲和自律性，在一个曲高和寡的领域，为印度传统音乐奋斗终生，最终被迫认识到自己缺乏关键的天赋。导演Chaitanya Tamhane在他的鲜艳，动人的镜头下，审视了在一个现实世界中如此狂热的追求艺术之梦的意义，并没有那么重要。\n![](TheDisciple.jpeg)\n\n- 6.Passing\n\n这部电影改编自Nella Larsen的一部1929年的紧凑，强有力的小说，讲述了两个少女（由Tessa Thompson 和 Ruth Negga出色演绎）在成年后重新取得联系，她们的生活不仅仅发生交织，乃至最终的坍塌：两个女人都是黑人，但是其中一个却以白人自居。导演Rebecca Hall首次为我们深刻讲述了围绕在美国梦周围的是什么，是创造一切，或者成为谁--这被称为自由，有时候会付出惨痛的代价。\n![](Passing.jpeg)\n\n- 5.Parallel Mothers\n\nPenélope Cruz 贡献了杰出的表演，她饰演一个在马德里的女人，在中年成为母亲，同时她也在努力为她的曾祖父争取正义，他在西班牙内战中被杀害，尸体被抛弃在乱葬岗中。导演Pedro Almodóvar用情节剧的方式去回闪那些他的国家中的悲催历史，但同时也在强调关于母性的关键真理：历史由母亲们铸造，文明失去她们，将无法前行。\n![](ParallelMothers.jpeg)\n\n- 4.The Souvenir Part II\n\n这部英国制片人Joanna Hogg的令人刺痛和伤感的半自传电影中，讲述了在上世纪80年代的伦敦，一个年轻学生（Honor Swinton Byrne扮演，贡献了微妙迷人的表演）在完成她的毕业影片时，试图寻找令人心碎的个人悲剧的意义。在这个看似简单的故事中，Hogg捕捉到了一个年轻人渴望在世界中留下印记的方方面面，同时也需要绝望的寻找其中的意义。\n![](TheSouvenirPartII.jpeg)\n\n- 3.Summer of Soul\n\nAhmir “Questlove” Thompson的光辉纪录片记录了一系列发生在Woodstock的夏天，在Harlem公园的众星云集的免费演唱会。但是获得的关注却不多。The Harlem Cultural Festival 吸引众多人群，但从几年前开始，这项音乐和骄傲的国民盛典就开始被大量遗忘，或者更准确的说，单纯被忽视了。就像隐藏在眼皮底下的珠宝，电影呈现了Mahalia Jackson, Stevie Wonder and Nina Simone的伟大表演。至少现在，世界开始注意到了。\n![](SummerofSoul.jpeg)\n\n- 2.The Worst Person in the World\n\n丹麦-挪威混血导演Joachim Trier这部无比温柔的喜剧像是上帝赋予的礼物。Julie（Renate Reinsve扮演，这是一场奇妙的而又粗中有细的表演）一路在弄清楚她自己是谁，她先后爱上两个男人，最后意识到她失去了更多。Trier将故事导向了一个苦乐参半的结局。提醒我们一直在路上，未竟的道路最终都会转向光明。\n![](TheWorstPersonintheWorld.jpeg)\n\n- 1.The Power of the Dog  \n\n上世纪20年代的蒙大拿，一个愤世嫉俗的农场主（Benedict Cumberbatch饰演）遇到了一个精力充沛，充满梦想的少年（Kodi Smit-McPhee饰演），农场主起初对他不屑一顾，之后发生了更多故事。故事基于Thomas Savage在1967年发布的小说，在Jane Campion镜头下雄伟壮丽的西部，是犹如天空一般辽阔的电影画卷。同时也让人类的情感分毫毕现，像一根纤细的草，却又异常锋利。\n![](ThePoweroftheDog.jpeg)\n\n提名: West Side Story, The Card Counter, The Velvet Underground, The Lost Daughter, The Electrical Life of Louis Wain, I’m Your Man, King Richard, The Green Knight, The Truffle Hunters\n\n生词：\nmisanthropic rancher 愤世嫉俗的农场主\na reedy（芦苇般）, dreamy teenager 精力充沛，充满梦想的少年\ncontempt 轻视\nsinewy 强壮\na blade of grass 一叶草\nstaggeringly tender 惊人的／无比温柔\nsturdy delicacy 粗犷细腻\nbittersweet 苦乐参半\nwe’re all works in progress, unfinished beings whose only imperative is to turn toward the light 我们一直在路上，未竟的道路最终都会走向光明。\nradiant 光辉\nchronicles 把…载入编年史／历史\nstar-studded 群星荟萃\nneglected 忽视\nsemiautobiographical 半自传\nsubtle 微妙的\ncaptivating 迷人的\nfacets 方面\nmass grave 乱葬岗\ngirlhood 少女时代\ncompact 紧凑\npotent 强有力\nsuperbly 极佳的\nintersecting 相交／贯穿\nA singer with great drive and discipline 一个拥有十足干劲和自律的歌手\nwith searching openness 根据公开资料显示（？）\nrarefied 高深的／稀薄的／冷门领域\nunlucrative 不幸的\nexamines 审视\nfeverishly 狂热的\ntakes a backseat 排在次要位置\nwrought 精致\nprecocious 老成的\nshimmery beauty 闪闪发光的美\nshivery 颤抖\nrendering 表演／翻译\ntreacherous 不可信任的\nscheming Scots 诡计多端的苏格兰人\nswimmingly 流畅\ngorgeous 华丽\ndrama—adapted 戏剧改编\ngig 现场表演／临时工作\nnudge 推动\ntwig 树枝\nbounty 奖金\nWe’ve all earned it 我们都值得这一切\ncopiously 大量的\nHonorable mentions 荣誉提名","slug":"news/新闻翻译-3","published":1,"updated":"2021-12-28T07:32:01.000Z","_id":"cl102wmze0005tccfdej0catr","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://time.com/6125959/best-movies-2021/?utm_source=roundup&utm_campaign=2021208\">原文链接</a> </p>\n<p>吐槽一下，这十佳电影看着满满都是政治正确的味道，Passing这部电影简直buff叠满，黑白片，双女主，关于美国梦和黑人白人之间的冲突，满脸写着”我是冲着奥斯卡来的”。</p>\n<hr>\n<h2 id=\"2021十佳电影\"><a href=\"#2021十佳电影\" class=\"headerlink\" title=\"2021十佳电影\"></a>2021十佳电影</h2><p>如果说2020年对于影迷来说是一个漫长黑暗的冬天（当然也有一些优秀的影片，但是不得不在家观影也是一个打击），2021就是一个生机勃勃，欢声笑语的春天。不仅仅是普通意义的春天，也是一个充满了斯特拉文斯基风格的春天，在祥和齐声的交响乐中绽放在大地上的番红花，雨滴阵阵落满了泥土，树木抽出了嫩芽。这么说的一部分原因很现实，也在预料之内：相当数量的今年的最佳影片早在2020年就已完成，但是推迟了，直到它们可以在影院上映。在黑暗的几个月过去后，这个值得欢庆的季节里绽放的曙光依然可以看作精神的慰藉。在本文的结尾，请参考这十部今年最好的电影（以及提名影片）作为你观影的选项。我们都值得这一切。</p>\n<ul>\n<li>10.Drive My Car</li>\n</ul>\n<p>Ryusuke Hamaguchi的三小时的流畅而又华丽的剧本（故事改编自Haruki Murakami的短篇小说），讲述了一个来自东京，经历了丧偶的演员和戏剧导演（Hidetoshi Nishijima），在广岛找了份工作，制作契柯夫的《万尼亚舅舅》。一个来自乡下（三浦店）的年轻女人被雇佣当他的司机；他们慢慢建立了友情，同时也帮助他分辨出他究竟迷失在哪里。Hamaguchi编织了一个关于失去和原谅，充满了光辉的故事，无论你有多么疲惫，一句轻轻的鼓励也能推动你在世界上继续前行。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/DriveMyCar.jpeg\"> </p>\n<ul>\n<li>9.The Tragedy of Macbeth</li>\n</ul>\n<p>这个故事你可能已经看过几百次了。但是Joel Coen用令人战栗的黑白色调，以及Frances McDormand和Denzel Washington饰演的狡诈，奸险的苏格兰人，犹如魔咒般吸引人，他们共同对该经典进行了难以置信的表达，彷佛置身于400年前，你作为第一个观众看到这个戏剧的首次呈现。今时今日，犹如往昔，这个故事冻彻骨髓。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheTragedyofMacbeth.jpg\"> </p>\n<span id=\"more\"></span>\n<ul>\n<li>8.C’mon C’mon</li>\n</ul>\n<p>Joaquin Phoenix贡献了一次有趣而又精致的表演，剧中作为一个无儿无女的纽约广播记者，要在几周内负责照顾他少年老成的来自洛杉矶的9岁外甥（Woody Norman）。这怎么听起来不像一部完整的电影呢？但在编剧兼导演Mike Mills的手中，这就是整部电影的内容。No one is better at chronicling late 20th and early 21st century family affection, in all its thorny, shimmery beauty.（翻译不出来）<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/CmonCmon.jpeg\"></p>\n<ul>\n<li>7.The Disciple</li>\n</ul>\n<p>故事讲述一个歌手（公开资料显示，由Aditya Modak扮演），拥有十足的干劲和自律性，在一个曲高和寡的领域，为印度传统音乐奋斗终生，最终被迫认识到自己缺乏关键的天赋。导演Chaitanya Tamhane在他的鲜艳，动人的镜头下，审视了在一个现实世界中如此狂热的追求艺术之梦的意义，并没有那么重要。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheDisciple.jpeg\"></p>\n<ul>\n<li>6.Passing</li>\n</ul>\n<p>这部电影改编自Nella Larsen的一部1929年的紧凑，强有力的小说，讲述了两个少女（由Tessa Thompson 和 Ruth Negga出色演绎）在成年后重新取得联系，她们的生活不仅仅发生交织，乃至最终的坍塌：两个女人都是黑人，但是其中一个却以白人自居。导演Rebecca Hall首次为我们深刻讲述了围绕在美国梦周围的是什么，是创造一切，或者成为谁–这被称为自由，有时候会付出惨痛的代价。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/Passing.jpeg\"></p>\n<ul>\n<li>5.Parallel Mothers</li>\n</ul>\n<p>Penélope Cruz 贡献了杰出的表演，她饰演一个在马德里的女人，在中年成为母亲，同时她也在努力为她的曾祖父争取正义，他在西班牙内战中被杀害，尸体被抛弃在乱葬岗中。导演Pedro Almodóvar用情节剧的方式去回闪那些他的国家中的悲催历史，但同时也在强调关于母性的关键真理：历史由母亲们铸造，文明失去她们，将无法前行。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/ParallelMothers.jpeg\"></p>\n<ul>\n<li>4.The Souvenir Part II</li>\n</ul>\n<p>这部英国制片人Joanna Hogg的令人刺痛和伤感的半自传电影中，讲述了在上世纪80年代的伦敦，一个年轻学生（Honor Swinton Byrne扮演，贡献了微妙迷人的表演）在完成她的毕业影片时，试图寻找令人心碎的个人悲剧的意义。在这个看似简单的故事中，Hogg捕捉到了一个年轻人渴望在世界中留下印记的方方面面，同时也需要绝望的寻找其中的意义。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheSouvenirPartII.jpeg\"></p>\n<ul>\n<li>3.Summer of Soul</li>\n</ul>\n<p>Ahmir “Questlove” Thompson的光辉纪录片记录了一系列发生在Woodstock的夏天，在Harlem公园的众星云集的免费演唱会。但是获得的关注却不多。The Harlem Cultural Festival 吸引众多人群，但从几年前开始，这项音乐和骄傲的国民盛典就开始被大量遗忘，或者更准确的说，单纯被忽视了。就像隐藏在眼皮底下的珠宝，电影呈现了Mahalia Jackson, Stevie Wonder and Nina Simone的伟大表演。至少现在，世界开始注意到了。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/SummerofSoul.jpeg\"></p>\n<ul>\n<li>2.The Worst Person in the World</li>\n</ul>\n<p>丹麦-挪威混血导演Joachim Trier这部无比温柔的喜剧像是上帝赋予的礼物。Julie（Renate Reinsve扮演，这是一场奇妙的而又粗中有细的表演）一路在弄清楚她自己是谁，她先后爱上两个男人，最后意识到她失去了更多。Trier将故事导向了一个苦乐参半的结局。提醒我们一直在路上，未竟的道路最终都会转向光明。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheWorstPersonintheWorld.jpeg\"></p>\n<ul>\n<li>1.The Power of the Dog  </li>\n</ul>\n<p>上世纪20年代的蒙大拿，一个愤世嫉俗的农场主（Benedict Cumberbatch饰演）遇到了一个精力充沛，充满梦想的少年（Kodi Smit-McPhee饰演），农场主起初对他不屑一顾，之后发生了更多故事。故事基于Thomas Savage在1967年发布的小说，在Jane Campion镜头下雄伟壮丽的西部，是犹如天空一般辽阔的电影画卷。同时也让人类的情感分毫毕现，像一根纤细的草，却又异常锋利。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/ThePoweroftheDog.jpeg\"></p>\n<p>提名: West Side Story, The Card Counter, The Velvet Underground, The Lost Daughter, The Electrical Life of Louis Wain, I’m Your Man, King Richard, The Green Knight, The Truffle Hunters</p>\n<p>生词：<br>misanthropic rancher 愤世嫉俗的农场主<br>a reedy（芦苇般）, dreamy teenager 精力充沛，充满梦想的少年<br>contempt 轻视<br>sinewy 强壮<br>a blade of grass 一叶草<br>staggeringly tender 惊人的／无比温柔<br>sturdy delicacy 粗犷细腻<br>bittersweet 苦乐参半<br>we’re all works in progress, unfinished beings whose only imperative is to turn toward the light 我们一直在路上，未竟的道路最终都会走向光明。<br>radiant 光辉<br>chronicles 把…载入编年史／历史<br>star-studded 群星荟萃<br>neglected 忽视<br>semiautobiographical 半自传<br>subtle 微妙的<br>captivating 迷人的<br>facets 方面<br>mass grave 乱葬岗<br>girlhood 少女时代<br>compact 紧凑<br>potent 强有力<br>superbly 极佳的<br>intersecting 相交／贯穿<br>A singer with great drive and discipline 一个拥有十足干劲和自律的歌手<br>with searching openness 根据公开资料显示（？）<br>rarefied 高深的／稀薄的／冷门领域<br>unlucrative 不幸的<br>examines 审视<br>feverishly 狂热的<br>takes a backseat 排在次要位置<br>wrought 精致<br>precocious 老成的<br>shimmery beauty 闪闪发光的美<br>shivery 颤抖<br>rendering 表演／翻译<br>treacherous 不可信任的<br>scheming Scots 诡计多端的苏格兰人<br>swimmingly 流畅<br>gorgeous 华丽<br>drama—adapted 戏剧改编<br>gig 现场表演／临时工作<br>nudge 推动<br>twig 树枝<br>bounty 奖金<br>We’ve all earned it 我们都值得这一切<br>copiously 大量的<br>Honorable mentions 荣誉提名</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><a href=\"https://time.com/6125959/best-movies-2021/?utm_source=roundup&utm_campaign=2021208\">原文链接</a> </p>\n<p>吐槽一下，这十佳电影看着满满都是政治正确的味道，Passing这部电影简直buff叠满，黑白片，双女主，关于美国梦和黑人白人之间的冲突，满脸写着”我是冲着奥斯卡来的”。</p>\n<hr>\n<h2 id=\"2021十佳电影\"><a href=\"#2021十佳电影\" class=\"headerlink\" title=\"2021十佳电影\"></a>2021十佳电影</h2><p>如果说2020年对于影迷来说是一个漫长黑暗的冬天（当然也有一些优秀的影片，但是不得不在家观影也是一个打击），2021就是一个生机勃勃，欢声笑语的春天。不仅仅是普通意义的春天，也是一个充满了斯特拉文斯基风格的春天，在祥和齐声的交响乐中绽放在大地上的番红花，雨滴阵阵落满了泥土，树木抽出了嫩芽。这么说的一部分原因很现实，也在预料之内：相当数量的今年的最佳影片早在2020年就已完成，但是推迟了，直到它们可以在影院上映。在黑暗的几个月过去后，这个值得欢庆的季节里绽放的曙光依然可以看作精神的慰藉。在本文的结尾，请参考这十部今年最好的电影（以及提名影片）作为你观影的选项。我们都值得这一切。</p>\n<ul>\n<li>10.Drive My Car</li>\n</ul>\n<p>Ryusuke Hamaguchi的三小时的流畅而又华丽的剧本（故事改编自Haruki Murakami的短篇小说），讲述了一个来自东京，经历了丧偶的演员和戏剧导演（Hidetoshi Nishijima），在广岛找了份工作，制作契柯夫的《万尼亚舅舅》。一个来自乡下（三浦店）的年轻女人被雇佣当他的司机；他们慢慢建立了友情，同时也帮助他分辨出他究竟迷失在哪里。Hamaguchi编织了一个关于失去和原谅，充满了光辉的故事，无论你有多么疲惫，一句轻轻的鼓励也能推动你在世界上继续前行。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/DriveMyCar.jpeg\"> </p>\n<ul>\n<li>9.The Tragedy of Macbeth</li>\n</ul>\n<p>这个故事你可能已经看过几百次了。但是Joel Coen用令人战栗的黑白色调，以及Frances McDormand和Denzel Washington饰演的狡诈，奸险的苏格兰人，犹如魔咒般吸引人，他们共同对该经典进行了难以置信的表达，彷佛置身于400年前，你作为第一个观众看到这个戏剧的首次呈现。今时今日，犹如往昔，这个故事冻彻骨髓。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheTragedyofMacbeth.jpg\"> </p>","more":"<ul>\n<li>8.C’mon C’mon</li>\n</ul>\n<p>Joaquin Phoenix贡献了一次有趣而又精致的表演，剧中作为一个无儿无女的纽约广播记者，要在几周内负责照顾他少年老成的来自洛杉矶的9岁外甥（Woody Norman）。这怎么听起来不像一部完整的电影呢？但在编剧兼导演Mike Mills的手中，这就是整部电影的内容。No one is better at chronicling late 20th and early 21st century family affection, in all its thorny, shimmery beauty.（翻译不出来）<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/CmonCmon.jpeg\"></p>\n<ul>\n<li>7.The Disciple</li>\n</ul>\n<p>故事讲述一个歌手（公开资料显示，由Aditya Modak扮演），拥有十足的干劲和自律性，在一个曲高和寡的领域，为印度传统音乐奋斗终生，最终被迫认识到自己缺乏关键的天赋。导演Chaitanya Tamhane在他的鲜艳，动人的镜头下，审视了在一个现实世界中如此狂热的追求艺术之梦的意义，并没有那么重要。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheDisciple.jpeg\"></p>\n<ul>\n<li>6.Passing</li>\n</ul>\n<p>这部电影改编自Nella Larsen的一部1929年的紧凑，强有力的小说，讲述了两个少女（由Tessa Thompson 和 Ruth Negga出色演绎）在成年后重新取得联系，她们的生活不仅仅发生交织，乃至最终的坍塌：两个女人都是黑人，但是其中一个却以白人自居。导演Rebecca Hall首次为我们深刻讲述了围绕在美国梦周围的是什么，是创造一切，或者成为谁–这被称为自由，有时候会付出惨痛的代价。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/Passing.jpeg\"></p>\n<ul>\n<li>5.Parallel Mothers</li>\n</ul>\n<p>Penélope Cruz 贡献了杰出的表演，她饰演一个在马德里的女人，在中年成为母亲，同时她也在努力为她的曾祖父争取正义，他在西班牙内战中被杀害，尸体被抛弃在乱葬岗中。导演Pedro Almodóvar用情节剧的方式去回闪那些他的国家中的悲催历史，但同时也在强调关于母性的关键真理：历史由母亲们铸造，文明失去她们，将无法前行。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/ParallelMothers.jpeg\"></p>\n<ul>\n<li>4.The Souvenir Part II</li>\n</ul>\n<p>这部英国制片人Joanna Hogg的令人刺痛和伤感的半自传电影中，讲述了在上世纪80年代的伦敦，一个年轻学生（Honor Swinton Byrne扮演，贡献了微妙迷人的表演）在完成她的毕业影片时，试图寻找令人心碎的个人悲剧的意义。在这个看似简单的故事中，Hogg捕捉到了一个年轻人渴望在世界中留下印记的方方面面，同时也需要绝望的寻找其中的意义。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheSouvenirPartII.jpeg\"></p>\n<ul>\n<li>3.Summer of Soul</li>\n</ul>\n<p>Ahmir “Questlove” Thompson的光辉纪录片记录了一系列发生在Woodstock的夏天，在Harlem公园的众星云集的免费演唱会。但是获得的关注却不多。The Harlem Cultural Festival 吸引众多人群，但从几年前开始，这项音乐和骄傲的国民盛典就开始被大量遗忘，或者更准确的说，单纯被忽视了。就像隐藏在眼皮底下的珠宝，电影呈现了Mahalia Jackson, Stevie Wonder and Nina Simone的伟大表演。至少现在，世界开始注意到了。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/SummerofSoul.jpeg\"></p>\n<ul>\n<li>2.The Worst Person in the World</li>\n</ul>\n<p>丹麦-挪威混血导演Joachim Trier这部无比温柔的喜剧像是上帝赋予的礼物。Julie（Renate Reinsve扮演，这是一场奇妙的而又粗中有细的表演）一路在弄清楚她自己是谁，她先后爱上两个男人，最后意识到她失去了更多。Trier将故事导向了一个苦乐参半的结局。提醒我们一直在路上，未竟的道路最终都会转向光明。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/TheWorstPersonintheWorld.jpeg\"></p>\n<ul>\n<li>1.The Power of the Dog  </li>\n</ul>\n<p>上世纪20年代的蒙大拿，一个愤世嫉俗的农场主（Benedict Cumberbatch饰演）遇到了一个精力充沛，充满梦想的少年（Kodi Smit-McPhee饰演），农场主起初对他不屑一顾，之后发生了更多故事。故事基于Thomas Savage在1967年发布的小说，在Jane Campion镜头下雄伟壮丽的西部，是犹如天空一般辽阔的电影画卷。同时也让人类的情感分毫毕现，像一根纤细的草，却又异常锋利。<br><img src=\"/2021/12/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-3/ThePoweroftheDog.jpeg\"></p>\n<p>提名: West Side Story, The Card Counter, The Velvet Underground, The Lost Daughter, The Electrical Life of Louis Wain, I’m Your Man, King Richard, The Green Knight, The Truffle Hunters</p>\n<p>生词：<br>misanthropic rancher 愤世嫉俗的农场主<br>a reedy（芦苇般）, dreamy teenager 精力充沛，充满梦想的少年<br>contempt 轻视<br>sinewy 强壮<br>a blade of grass 一叶草<br>staggeringly tender 惊人的／无比温柔<br>sturdy delicacy 粗犷细腻<br>bittersweet 苦乐参半<br>we’re all works in progress, unfinished beings whose only imperative is to turn toward the light 我们一直在路上，未竟的道路最终都会走向光明。<br>radiant 光辉<br>chronicles 把…载入编年史／历史<br>star-studded 群星荟萃<br>neglected 忽视<br>semiautobiographical 半自传<br>subtle 微妙的<br>captivating 迷人的<br>facets 方面<br>mass grave 乱葬岗<br>girlhood 少女时代<br>compact 紧凑<br>potent 强有力<br>superbly 极佳的<br>intersecting 相交／贯穿<br>A singer with great drive and discipline 一个拥有十足干劲和自律的歌手<br>with searching openness 根据公开资料显示（？）<br>rarefied 高深的／稀薄的／冷门领域<br>unlucrative 不幸的<br>examines 审视<br>feverishly 狂热的<br>takes a backseat 排在次要位置<br>wrought 精致<br>precocious 老成的<br>shimmery beauty 闪闪发光的美<br>shivery 颤抖<br>rendering 表演／翻译<br>treacherous 不可信任的<br>scheming Scots 诡计多端的苏格兰人<br>swimmingly 流畅<br>gorgeous 华丽<br>drama—adapted 戏剧改编<br>gig 现场表演／临时工作<br>nudge 推动<br>twig 树枝<br>bounty 奖金<br>We’ve all earned it 我们都值得这一切<br>copiously 大量的<br>Honorable mentions 荣誉提名</p>"},{"title":"新闻翻译-Metacritic评选的2021年度十佳PC游戏","date":"2021-12-24T05:53:50.000Z","comments":1,"_content":"[原文链接](https://www.gamespot.com/articles/best-pc-games-of-2021-according-to-metacritic/1100-6498757/) \n\n全都没玩过，甚至基本都没听过，看来确实是老了。。。\n\n---\n\n*本文提到的产品完全是我们编辑的独立选择。如果你通过我们的链接购买游戏的话，GameSpot会得到一些佣金。*\n\n## Metacritic评选的2021年度十佳PC游戏\n\n### PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\n\n--- \n\n今年也许是被刚上市的PS5和xbox series X|S统治的一年，但是PC游戏在2021年也比以往更加出色。诸多游戏平台充斥着独立制作和3A大作的标题，但是他们中哪一款是最出色的呢？通过GameSpot的兄弟网站Metacritci，我们优中选优，一致讨论出了即使批评家们也挑不出毛病的10款PC游戏。列出的结果包含了众多体裁，但是他们都有共同点，至少有一点是一样的：他们在2021年为你们贡献了最佳的游戏乐趣。\n\n## 终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）\n![](enderlilies.jpg)\n受到`空洞骑士`和`黑暗之魂`的启发并将其二者融合，并伴随着大量的`银河战士`设计的影响，你将体验到的是一场美味的2D动作角色扮演游戏的盛宴，让你直到结尾也回味无穷。更棒的是，`终焉之莉莉`在以往那些老掉牙的探索和紧张战斗的套路中加入了一些现代化的改进，沿着路线攻克一些非常棘手的任务然后直接将你置于最强的boss之中，这个游戏中都将可能发生。\n\nMeta评分: 86\n\n## 死亡循环（Deathloop）\n![](deathloop.jpeg)\n在土拨鼠日带着抢，身怀时间操控的能力，并且口吐芬芳，这听起来像是美好时光的秘方，而在`死亡循环`里，这些元素烹制出了2021年的最佳游戏之一。`死亡循环`主要侧重于其绝妙的时间循环的玩法，但这游戏的美妙之处也在于如何在每一次新的循环中奖励你新的知识，技巧，以及最终逃离暴力的黑礁大陆之后，产生的顿悟。\n\n这很可能是开发商Arkane目前的最佳作品，一个无尽的沙盒，充满创造力和魅力，并且满溢着个人风格和充满自信的大屠杀。\n\nMeta评分: 86\n<!-- more -->\n## 质量效应：传奇版（Mass Effect: Legendary Edition）\n![](masseffect.jpeg)\n如果你找一个最佳性价比的经典系列游戏的重制版，那`质量效应：传奇版`完美符合你的要求。即使是BioWare原作的科幻三部曲依旧散发着巨大的魔力。游戏首次加入一些适当的升级，让游戏更加现代化，上市后便连续两周位列销量榜首，传奇版几乎包括了薛帕德的传奇故事的所有篇章-删减了质量效应3的庞杂的多人模式以及少量的其他琐碎内容-顶尖的视觉效果，并在背后进行了若干调整，成就了这个系列的决定性版本。\n\nMeta评分: 86\n\n## 漫野奇谭（Wildermyth）\n![](wildermyth.jpeg)\n`漫野奇谭`切中了几个电视游戏设计的要害。他的美术风格像是让活生生的童话故事走进生活，他的玩法取自回合制RPG游戏的元素，通过巧妙的融合将二者融合为一种游戏体裁，而其天然的好上手让这游戏无论是玩一场马拉松的长度还是午饭间隙的一局都非常合适。对于一些特殊体裁，很少有电视游戏可以掌握休闲和硬核玩法之间的平衡并在特定的体裁领域提供新的东西，但是`漫野奇谭`接受了这个挑战并提供了一份不错的体验。\n\nMeta评分: 87\n\n## 杀手3（Hitman 3）\n![](hitman3.jpg)\n所有的故事都会走向终点，而对于47号特工来说，在经历了这么多年的全球旅行并对那些可望不可及的大人物执行了迟到的正义后，他会在`杀手3`迎来一个完美的终章。经历了前两作的打磨，`杀手3`的品质已经非常上乘，你可以沉浸在一系列的沙盒场景中度过大量游玩时光，并利用你的完美伪装来完成宿命般的屠杀。\n\n开发商IO Interactive维持了游戏一贯的丰富内容，包括难以捉摸的目标人物，甚至在PC上加入了VR支持。第二年计划开发的内容也使得游戏的未来非常明朗，`杀手3`将继续在环绕全球的旅程中进行他优雅而致命的暗杀。\n\nMeta评分: 87\n\n## 双人成行（It Takes Two）\n![](ittakestwo.jpeg)\n这一年中不乏狂野而具有想象力的游戏发布，`双人成行`则是2021年中出类拔萃的存在。一对即将分崩离析的伙伴踏上一段奇妙的冒险，`双人成行`讲述了一个关于爱，失去以及混沌的故事。这些都囊括在一个个精妙的合作谜题和舞台中，它的美术风格令人印象深刻，最后以一个令人满意的结尾呈现。\n\nMeta评分: 88\n\n## 脑航员2／疯狂世界2（Psychonauts 2）\n![](psychonauts2.jpeg)\n`脑航员2`里有太多有趣的亮点，包括设计很好的角色，杰出的音效，但是其美术风格是游戏真正的闪光点，为你创造难以忘怀的体验。这些元素融合在坚实的冒险中，确切的契合着游戏的初心，`脑航员2`的开发商Double Fine在这方面做到了最佳，通过大脑的等级和充满想象力的地点构建一个吵闹的故事，让你和脑中的邪恶战斗并在一路上学到一些知识。\n\nMeta评分: 89\n\n## 神笔狗良（Chicory: A Colorful Tale）\n![](chicory.jpg)\n尽管这一年在各种平台上发布了各种体裁的游戏和技术的展示，以及如何翻新老游戏的历程，`神笔狗良`依然是2021年并列最佳的游戏。有趣谜题的集合，尽情宣泄的画笔，多彩的角色，在数个小时的游玩中，`神笔狗良`将其不可思议的关联在一块。游戏唤起几乎每个人都有的和内心邪恶的斗争以及自我怀疑的处理，`神笔狗良`老练的将幽默和情感上的悬念融合，在一个你创建的独特视觉世界中贡献了顿悟自我的杰作。\n\nMeta评分: 90\n\n## 极限竞速：地平线5（Forza Horizon 5）\n![](forzahorizon5.jpeg)\n极限竞速：地平线系列的最后一作是一场几乎没有缺点的纯粹享受。点燃所有的气缸，在重重阻碍的墨西哥之旅中体验瑰丽的风景，`地平线5`是一场汽车文化的盛宴。不仅仅是精美渲染的汽车合集以及多种多样的赛车道，\n每次当你的收藏中加入新车时，`地平线5`都会在整个体验中给予你令人赞叹的个人体验。以华丽的画面表现在引擎盖下的马力和一些最精密的赛车部件，`地平线5`堪称是开放世界赛车游戏的天花板。\n\nMeta评分: 91\n\n## 极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）\n![](discoelysium.jpeg)\n在首部作品发布两年后，`极乐迪斯科`在2021年带着他的乐队回归了。这款早已饱受赞誉的游戏是关于谋杀和扮演一个侦探的故事，这个侦探同时也不得不面对个人失败的情感，而最终剪辑版更是一个残酷侦探故事的顶级展现。\n强大的声优给这个故事带来了新的生命力，游戏性经过了一些内外的调整，新的内容也加入了冒险中，以及一些关键的更新使得游戏的一切都比以往更好。\n\n独一无二的画风，令人迷幻的谜题，以及电视游戏中最佳的搞笑桥段，`极乐迪斯科`已经不能更好了。\n\nMeta评分: 91\n\n---\n\ntime-manipulating 时间操控\ncharisma 魅力\ncarnage 大屠杀\noozes 滲出；充满\ntrilogy 三部曲\nremaster 重制版\nprovided the best possible value for money 提供最高的性价比。\nchart-topping 排行榜榜首\nsaga 传奇故事\nfantastic 荒诞，可笑，巨大\nvibrant 充满活力的\nturn-based 回合制\ncatering 承办酒席\nrises up to the challenge 迎接挑战\nconsidered 认为；考虑过的\npeople who considered themselves to be untouchable 认为自己不可触碰的人\npure polish and class 纯正上等\nrevel 狂欢\nkarmic 业力；宿命\ncarnage 屠杀\nassassination 暗杀\nstands out from the pack 脱颖而出\nsaw no shortage of 不乏\nquirky 古怪的\nbickering 争吵的\non the rocks 岌岌可危\nturmoil 混乱\npowerhouses 强大的集团；强壮的人\nrip-roaring 吵闹的\ncerebral 大脑的\nsolid 坚实的；坚硬的\nconsoles 安慰／控制台\ncathartic 宣泄的\nplays out 演出\nexpertly 熟练的\ncliffhangers 悬念\nmasterpiece 杰作\nself-reflection 自我反省\nvisually distinctive 视觉上与众不同\nbliss 幸福\npure V8 bliss 纯粹的幸福；纯粹的快乐\ncylinders 圆筒；气缸\ngorgeous 瑰丽；非常漂亮\nbeautifully-rendered 渲染精美\nunder its hood 在引擎盖下\nhorsepower 马力\nstellar 恒星的；星光闪耀的；优秀的\ngrapple 搏斗\nhard-hitting 直言不讳的\nbanter 调侃\nmind-bending 心神不宁","source":"_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏.md","raw":"---\ntitle: 新闻翻译-Metacritic评选的2021年度十佳PC游戏\ndate: 2021-12-24 13:53:50\ntags:\n- translate\n- news\ncomments: true\ncategories: \n- 学习\n- 英语\n---\n[原文链接](https://www.gamespot.com/articles/best-pc-games-of-2021-according-to-metacritic/1100-6498757/) \n\n全都没玩过，甚至基本都没听过，看来确实是老了。。。\n\n---\n\n*本文提到的产品完全是我们编辑的独立选择。如果你通过我们的链接购买游戏的话，GameSpot会得到一些佣金。*\n\n## Metacritic评选的2021年度十佳PC游戏\n\n### PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\n\n--- \n\n今年也许是被刚上市的PS5和xbox series X|S统治的一年，但是PC游戏在2021年也比以往更加出色。诸多游戏平台充斥着独立制作和3A大作的标题，但是他们中哪一款是最出色的呢？通过GameSpot的兄弟网站Metacritci，我们优中选优，一致讨论出了即使批评家们也挑不出毛病的10款PC游戏。列出的结果包含了众多体裁，但是他们都有共同点，至少有一点是一样的：他们在2021年为你们贡献了最佳的游戏乐趣。\n\n## 终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）\n![](enderlilies.jpg)\n受到`空洞骑士`和`黑暗之魂`的启发并将其二者融合，并伴随着大量的`银河战士`设计的影响，你将体验到的是一场美味的2D动作角色扮演游戏的盛宴，让你直到结尾也回味无穷。更棒的是，`终焉之莉莉`在以往那些老掉牙的探索和紧张战斗的套路中加入了一些现代化的改进，沿着路线攻克一些非常棘手的任务然后直接将你置于最强的boss之中，这个游戏中都将可能发生。\n\nMeta评分: 86\n\n## 死亡循环（Deathloop）\n![](deathloop.jpeg)\n在土拨鼠日带着抢，身怀时间操控的能力，并且口吐芬芳，这听起来像是美好时光的秘方，而在`死亡循环`里，这些元素烹制出了2021年的最佳游戏之一。`死亡循环`主要侧重于其绝妙的时间循环的玩法，但这游戏的美妙之处也在于如何在每一次新的循环中奖励你新的知识，技巧，以及最终逃离暴力的黑礁大陆之后，产生的顿悟。\n\n这很可能是开发商Arkane目前的最佳作品，一个无尽的沙盒，充满创造力和魅力，并且满溢着个人风格和充满自信的大屠杀。\n\nMeta评分: 86\n<!-- more -->\n## 质量效应：传奇版（Mass Effect: Legendary Edition）\n![](masseffect.jpeg)\n如果你找一个最佳性价比的经典系列游戏的重制版，那`质量效应：传奇版`完美符合你的要求。即使是BioWare原作的科幻三部曲依旧散发着巨大的魔力。游戏首次加入一些适当的升级，让游戏更加现代化，上市后便连续两周位列销量榜首，传奇版几乎包括了薛帕德的传奇故事的所有篇章-删减了质量效应3的庞杂的多人模式以及少量的其他琐碎内容-顶尖的视觉效果，并在背后进行了若干调整，成就了这个系列的决定性版本。\n\nMeta评分: 86\n\n## 漫野奇谭（Wildermyth）\n![](wildermyth.jpeg)\n`漫野奇谭`切中了几个电视游戏设计的要害。他的美术风格像是让活生生的童话故事走进生活，他的玩法取自回合制RPG游戏的元素，通过巧妙的融合将二者融合为一种游戏体裁，而其天然的好上手让这游戏无论是玩一场马拉松的长度还是午饭间隙的一局都非常合适。对于一些特殊体裁，很少有电视游戏可以掌握休闲和硬核玩法之间的平衡并在特定的体裁领域提供新的东西，但是`漫野奇谭`接受了这个挑战并提供了一份不错的体验。\n\nMeta评分: 87\n\n## 杀手3（Hitman 3）\n![](hitman3.jpg)\n所有的故事都会走向终点，而对于47号特工来说，在经历了这么多年的全球旅行并对那些可望不可及的大人物执行了迟到的正义后，他会在`杀手3`迎来一个完美的终章。经历了前两作的打磨，`杀手3`的品质已经非常上乘，你可以沉浸在一系列的沙盒场景中度过大量游玩时光，并利用你的完美伪装来完成宿命般的屠杀。\n\n开发商IO Interactive维持了游戏一贯的丰富内容，包括难以捉摸的目标人物，甚至在PC上加入了VR支持。第二年计划开发的内容也使得游戏的未来非常明朗，`杀手3`将继续在环绕全球的旅程中进行他优雅而致命的暗杀。\n\nMeta评分: 87\n\n## 双人成行（It Takes Two）\n![](ittakestwo.jpeg)\n这一年中不乏狂野而具有想象力的游戏发布，`双人成行`则是2021年中出类拔萃的存在。一对即将分崩离析的伙伴踏上一段奇妙的冒险，`双人成行`讲述了一个关于爱，失去以及混沌的故事。这些都囊括在一个个精妙的合作谜题和舞台中，它的美术风格令人印象深刻，最后以一个令人满意的结尾呈现。\n\nMeta评分: 88\n\n## 脑航员2／疯狂世界2（Psychonauts 2）\n![](psychonauts2.jpeg)\n`脑航员2`里有太多有趣的亮点，包括设计很好的角色，杰出的音效，但是其美术风格是游戏真正的闪光点，为你创造难以忘怀的体验。这些元素融合在坚实的冒险中，确切的契合着游戏的初心，`脑航员2`的开发商Double Fine在这方面做到了最佳，通过大脑的等级和充满想象力的地点构建一个吵闹的故事，让你和脑中的邪恶战斗并在一路上学到一些知识。\n\nMeta评分: 89\n\n## 神笔狗良（Chicory: A Colorful Tale）\n![](chicory.jpg)\n尽管这一年在各种平台上发布了各种体裁的游戏和技术的展示，以及如何翻新老游戏的历程，`神笔狗良`依然是2021年并列最佳的游戏。有趣谜题的集合，尽情宣泄的画笔，多彩的角色，在数个小时的游玩中，`神笔狗良`将其不可思议的关联在一块。游戏唤起几乎每个人都有的和内心邪恶的斗争以及自我怀疑的处理，`神笔狗良`老练的将幽默和情感上的悬念融合，在一个你创建的独特视觉世界中贡献了顿悟自我的杰作。\n\nMeta评分: 90\n\n## 极限竞速：地平线5（Forza Horizon 5）\n![](forzahorizon5.jpeg)\n极限竞速：地平线系列的最后一作是一场几乎没有缺点的纯粹享受。点燃所有的气缸，在重重阻碍的墨西哥之旅中体验瑰丽的风景，`地平线5`是一场汽车文化的盛宴。不仅仅是精美渲染的汽车合集以及多种多样的赛车道，\n每次当你的收藏中加入新车时，`地平线5`都会在整个体验中给予你令人赞叹的个人体验。以华丽的画面表现在引擎盖下的马力和一些最精密的赛车部件，`地平线5`堪称是开放世界赛车游戏的天花板。\n\nMeta评分: 91\n\n## 极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）\n![](discoelysium.jpeg)\n在首部作品发布两年后，`极乐迪斯科`在2021年带着他的乐队回归了。这款早已饱受赞誉的游戏是关于谋杀和扮演一个侦探的故事，这个侦探同时也不得不面对个人失败的情感，而最终剪辑版更是一个残酷侦探故事的顶级展现。\n强大的声优给这个故事带来了新的生命力，游戏性经过了一些内外的调整，新的内容也加入了冒险中，以及一些关键的更新使得游戏的一切都比以往更好。\n\n独一无二的画风，令人迷幻的谜题，以及电视游戏中最佳的搞笑桥段，`极乐迪斯科`已经不能更好了。\n\nMeta评分: 91\n\n---\n\ntime-manipulating 时间操控\ncharisma 魅力\ncarnage 大屠杀\noozes 滲出；充满\ntrilogy 三部曲\nremaster 重制版\nprovided the best possible value for money 提供最高的性价比。\nchart-topping 排行榜榜首\nsaga 传奇故事\nfantastic 荒诞，可笑，巨大\nvibrant 充满活力的\nturn-based 回合制\ncatering 承办酒席\nrises up to the challenge 迎接挑战\nconsidered 认为；考虑过的\npeople who considered themselves to be untouchable 认为自己不可触碰的人\npure polish and class 纯正上等\nrevel 狂欢\nkarmic 业力；宿命\ncarnage 屠杀\nassassination 暗杀\nstands out from the pack 脱颖而出\nsaw no shortage of 不乏\nquirky 古怪的\nbickering 争吵的\non the rocks 岌岌可危\nturmoil 混乱\npowerhouses 强大的集团；强壮的人\nrip-roaring 吵闹的\ncerebral 大脑的\nsolid 坚实的；坚硬的\nconsoles 安慰／控制台\ncathartic 宣泄的\nplays out 演出\nexpertly 熟练的\ncliffhangers 悬念\nmasterpiece 杰作\nself-reflection 自我反省\nvisually distinctive 视觉上与众不同\nbliss 幸福\npure V8 bliss 纯粹的幸福；纯粹的快乐\ncylinders 圆筒；气缸\ngorgeous 瑰丽；非常漂亮\nbeautifully-rendered 渲染精美\nunder its hood 在引擎盖下\nhorsepower 马力\nstellar 恒星的；星光闪耀的；优秀的\ngrapple 搏斗\nhard-hitting 直言不讳的\nbanter 调侃\nmind-bending 心神不宁","slug":"news/新闻翻译-Metacritic评选的2021年度十佳pc游戏","published":1,"updated":"2021-12-28T07:31:54.000Z","_id":"cl102wn0h000atccf4fp9b8yi","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.gamespot.com/articles/best-pc-games-of-2021-according-to-metacritic/1100-6498757/\">原文链接</a> </p>\n<p>全都没玩过，甚至基本都没听过，看来确实是老了。。。</p>\n<hr>\n<p><em>本文提到的产品完全是我们编辑的独立选择。如果你通过我们的链接购买游戏的话，GameSpot会得到一些佣金。</em></p>\n<h2 id=\"Metacritic评选的2021年度十佳PC游戏\"><a href=\"#Metacritic评选的2021年度十佳PC游戏\" class=\"headerlink\" title=\"Metacritic评选的2021年度十佳PC游戏\"></a>Metacritic评选的2021年度十佳PC游戏</h2><h3 id=\"PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\"><a href=\"#PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\" class=\"headerlink\" title=\"PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\"></a>PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏</h3><hr>\n<p>今年也许是被刚上市的PS5和xbox series X|S统治的一年，但是PC游戏在2021年也比以往更加出色。诸多游戏平台充斥着独立制作和3A大作的标题，但是他们中哪一款是最出色的呢？通过GameSpot的兄弟网站Metacritci，我们优中选优，一致讨论出了即使批评家们也挑不出毛病的10款PC游戏。列出的结果包含了众多体裁，但是他们都有共同点，至少有一点是一样的：他们在2021年为你们贡献了最佳的游戏乐趣。</p>\n<h2 id=\"终焉之莉莉：骑士寂夜（Ender-Lilies-Quietus-of-the-Knights）\"><a href=\"#终焉之莉莉：骑士寂夜（Ender-Lilies-Quietus-of-the-Knights）\" class=\"headerlink\" title=\"终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）\"></a>终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/enderlilies.jpg\"><br>受到<code>空洞骑士</code>和<code>黑暗之魂</code>的启发并将其二者融合，并伴随着大量的<code>银河战士</code>设计的影响，你将体验到的是一场美味的2D动作角色扮演游戏的盛宴，让你直到结尾也回味无穷。更棒的是，<code>终焉之莉莉</code>在以往那些老掉牙的探索和紧张战斗的套路中加入了一些现代化的改进，沿着路线攻克一些非常棘手的任务然后直接将你置于最强的boss之中，这个游戏中都将可能发生。</p>\n<p>Meta评分: 86</p>\n<h2 id=\"死亡循环（Deathloop）\"><a href=\"#死亡循环（Deathloop）\" class=\"headerlink\" title=\"死亡循环（Deathloop）\"></a>死亡循环（Deathloop）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/deathloop.jpeg\"><br>在土拨鼠日带着抢，身怀时间操控的能力，并且口吐芬芳，这听起来像是美好时光的秘方，而在<code>死亡循环</code>里，这些元素烹制出了2021年的最佳游戏之一。<code>死亡循环</code>主要侧重于其绝妙的时间循环的玩法，但这游戏的美妙之处也在于如何在每一次新的循环中奖励你新的知识，技巧，以及最终逃离暴力的黑礁大陆之后，产生的顿悟。</p>\n<p>这很可能是开发商Arkane目前的最佳作品，一个无尽的沙盒，充满创造力和魅力，并且满溢着个人风格和充满自信的大屠杀。</p>\n<p>Meta评分: 86</p>\n<span id=\"more\"></span>\n<h2 id=\"质量效应：传奇版（Mass-Effect-Legendary-Edition）\"><a href=\"#质量效应：传奇版（Mass-Effect-Legendary-Edition）\" class=\"headerlink\" title=\"质量效应：传奇版（Mass Effect: Legendary Edition）\"></a>质量效应：传奇版（Mass Effect: Legendary Edition）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/masseffect.jpeg\"><br>如果你找一个最佳性价比的经典系列游戏的重制版，那<code>质量效应：传奇版</code>完美符合你的要求。即使是BioWare原作的科幻三部曲依旧散发着巨大的魔力。游戏首次加入一些适当的升级，让游戏更加现代化，上市后便连续两周位列销量榜首，传奇版几乎包括了薛帕德的传奇故事的所有篇章-删减了质量效应3的庞杂的多人模式以及少量的其他琐碎内容-顶尖的视觉效果，并在背后进行了若干调整，成就了这个系列的决定性版本。</p>\n<p>Meta评分: 86</p>\n<h2 id=\"漫野奇谭（Wildermyth）\"><a href=\"#漫野奇谭（Wildermyth）\" class=\"headerlink\" title=\"漫野奇谭（Wildermyth）\"></a>漫野奇谭（Wildermyth）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/wildermyth.jpeg\"><br><code>漫野奇谭</code>切中了几个电视游戏设计的要害。他的美术风格像是让活生生的童话故事走进生活，他的玩法取自回合制RPG游戏的元素，通过巧妙的融合将二者融合为一种游戏体裁，而其天然的好上手让这游戏无论是玩一场马拉松的长度还是午饭间隙的一局都非常合适。对于一些特殊体裁，很少有电视游戏可以掌握休闲和硬核玩法之间的平衡并在特定的体裁领域提供新的东西，但是<code>漫野奇谭</code>接受了这个挑战并提供了一份不错的体验。</p>\n<p>Meta评分: 87</p>\n<h2 id=\"杀手3（Hitman-3）\"><a href=\"#杀手3（Hitman-3）\" class=\"headerlink\" title=\"杀手3（Hitman 3）\"></a>杀手3（Hitman 3）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/hitman3.jpg\"><br>所有的故事都会走向终点，而对于47号特工来说，在经历了这么多年的全球旅行并对那些可望不可及的大人物执行了迟到的正义后，他会在<code>杀手3</code>迎来一个完美的终章。经历了前两作的打磨，<code>杀手3</code>的品质已经非常上乘，你可以沉浸在一系列的沙盒场景中度过大量游玩时光，并利用你的完美伪装来完成宿命般的屠杀。</p>\n<p>开发商IO Interactive维持了游戏一贯的丰富内容，包括难以捉摸的目标人物，甚至在PC上加入了VR支持。第二年计划开发的内容也使得游戏的未来非常明朗，<code>杀手3</code>将继续在环绕全球的旅程中进行他优雅而致命的暗杀。</p>\n<p>Meta评分: 87</p>\n<h2 id=\"双人成行（It-Takes-Two）\"><a href=\"#双人成行（It-Takes-Two）\" class=\"headerlink\" title=\"双人成行（It Takes Two）\"></a>双人成行（It Takes Two）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/ittakestwo.jpeg\"><br>这一年中不乏狂野而具有想象力的游戏发布，<code>双人成行</code>则是2021年中出类拔萃的存在。一对即将分崩离析的伙伴踏上一段奇妙的冒险，<code>双人成行</code>讲述了一个关于爱，失去以及混沌的故事。这些都囊括在一个个精妙的合作谜题和舞台中，它的美术风格令人印象深刻，最后以一个令人满意的结尾呈现。</p>\n<p>Meta评分: 88</p>\n<h2 id=\"脑航员2／疯狂世界2（Psychonauts-2）\"><a href=\"#脑航员2／疯狂世界2（Psychonauts-2）\" class=\"headerlink\" title=\"脑航员2／疯狂世界2（Psychonauts 2）\"></a>脑航员2／疯狂世界2（Psychonauts 2）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/psychonauts2.jpeg\"><br><code>脑航员2</code>里有太多有趣的亮点，包括设计很好的角色，杰出的音效，但是其美术风格是游戏真正的闪光点，为你创造难以忘怀的体验。这些元素融合在坚实的冒险中，确切的契合着游戏的初心，<code>脑航员2</code>的开发商Double Fine在这方面做到了最佳，通过大脑的等级和充满想象力的地点构建一个吵闹的故事，让你和脑中的邪恶战斗并在一路上学到一些知识。</p>\n<p>Meta评分: 89</p>\n<h2 id=\"神笔狗良（Chicory-A-Colorful-Tale）\"><a href=\"#神笔狗良（Chicory-A-Colorful-Tale）\" class=\"headerlink\" title=\"神笔狗良（Chicory: A Colorful Tale）\"></a>神笔狗良（Chicory: A Colorful Tale）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/chicory.jpg\"><br>尽管这一年在各种平台上发布了各种体裁的游戏和技术的展示，以及如何翻新老游戏的历程，<code>神笔狗良</code>依然是2021年并列最佳的游戏。有趣谜题的集合，尽情宣泄的画笔，多彩的角色，在数个小时的游玩中，<code>神笔狗良</code>将其不可思议的关联在一块。游戏唤起几乎每个人都有的和内心邪恶的斗争以及自我怀疑的处理，<code>神笔狗良</code>老练的将幽默和情感上的悬念融合，在一个你创建的独特视觉世界中贡献了顿悟自我的杰作。</p>\n<p>Meta评分: 90</p>\n<h2 id=\"极限竞速：地平线5（Forza-Horizon-5）\"><a href=\"#极限竞速：地平线5（Forza-Horizon-5）\" class=\"headerlink\" title=\"极限竞速：地平线5（Forza Horizon 5）\"></a>极限竞速：地平线5（Forza Horizon 5）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/forzahorizon5.jpeg\"><br>极限竞速：地平线系列的最后一作是一场几乎没有缺点的纯粹享受。点燃所有的气缸，在重重阻碍的墨西哥之旅中体验瑰丽的风景，<code>地平线5</code>是一场汽车文化的盛宴。不仅仅是精美渲染的汽车合集以及多种多样的赛车道，<br>每次当你的收藏中加入新车时，<code>地平线5</code>都会在整个体验中给予你令人赞叹的个人体验。以华丽的画面表现在引擎盖下的马力和一些最精密的赛车部件，<code>地平线5</code>堪称是开放世界赛车游戏的天花板。</p>\n<p>Meta评分: 91</p>\n<h2 id=\"极乐迪斯科-最终剪辑版（Disco-Elysium-The-Final-Cut）\"><a href=\"#极乐迪斯科-最终剪辑版（Disco-Elysium-The-Final-Cut）\" class=\"headerlink\" title=\"极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）\"></a>极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/discoelysium.jpeg\"><br>在首部作品发布两年后，<code>极乐迪斯科</code>在2021年带着他的乐队回归了。这款早已饱受赞誉的游戏是关于谋杀和扮演一个侦探的故事，这个侦探同时也不得不面对个人失败的情感，而最终剪辑版更是一个残酷侦探故事的顶级展现。<br>强大的声优给这个故事带来了新的生命力，游戏性经过了一些内外的调整，新的内容也加入了冒险中，以及一些关键的更新使得游戏的一切都比以往更好。</p>\n<p>独一无二的画风，令人迷幻的谜题，以及电视游戏中最佳的搞笑桥段，<code>极乐迪斯科</code>已经不能更好了。</p>\n<p>Meta评分: 91</p>\n<hr>\n<p>time-manipulating 时间操控<br>charisma 魅力<br>carnage 大屠杀<br>oozes 滲出；充满<br>trilogy 三部曲<br>remaster 重制版<br>provided the best possible value for money 提供最高的性价比。<br>chart-topping 排行榜榜首<br>saga 传奇故事<br>fantastic 荒诞，可笑，巨大<br>vibrant 充满活力的<br>turn-based 回合制<br>catering 承办酒席<br>rises up to the challenge 迎接挑战<br>considered 认为；考虑过的<br>people who considered themselves to be untouchable 认为自己不可触碰的人<br>pure polish and class 纯正上等<br>revel 狂欢<br>karmic 业力；宿命<br>carnage 屠杀<br>assassination 暗杀<br>stands out from the pack 脱颖而出<br>saw no shortage of 不乏<br>quirky 古怪的<br>bickering 争吵的<br>on the rocks 岌岌可危<br>turmoil 混乱<br>powerhouses 强大的集团；强壮的人<br>rip-roaring 吵闹的<br>cerebral 大脑的<br>solid 坚实的；坚硬的<br>consoles 安慰／控制台<br>cathartic 宣泄的<br>plays out 演出<br>expertly 熟练的<br>cliffhangers 悬念<br>masterpiece 杰作<br>self-reflection 自我反省<br>visually distinctive 视觉上与众不同<br>bliss 幸福<br>pure V8 bliss 纯粹的幸福；纯粹的快乐<br>cylinders 圆筒；气缸<br>gorgeous 瑰丽；非常漂亮<br>beautifully-rendered 渲染精美<br>under its hood 在引擎盖下<br>horsepower 马力<br>stellar 恒星的；星光闪耀的；优秀的<br>grapple 搏斗<br>hard-hitting 直言不讳的<br>banter 调侃<br>mind-bending 心神不宁</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><a href=\"https://www.gamespot.com/articles/best-pc-games-of-2021-according-to-metacritic/1100-6498757/\">原文链接</a> </p>\n<p>全都没玩过，甚至基本都没听过，看来确实是老了。。。</p>\n<hr>\n<p><em>本文提到的产品完全是我们编辑的独立选择。如果你通过我们的链接购买游戏的话，GameSpot会得到一些佣金。</em></p>\n<h2 id=\"Metacritic评选的2021年度十佳PC游戏\"><a href=\"#Metacritic评选的2021年度十佳PC游戏\" class=\"headerlink\" title=\"Metacritic评选的2021年度十佳PC游戏\"></a>Metacritic评选的2021年度十佳PC游戏</h2><h3 id=\"PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\"><a href=\"#PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\" class=\"headerlink\" title=\"PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏\"></a>PC游戏爱好者们今年有理由感到高兴，毕竟今年有很多的优秀游戏</h3><hr>\n<p>今年也许是被刚上市的PS5和xbox series X|S统治的一年，但是PC游戏在2021年也比以往更加出色。诸多游戏平台充斥着独立制作和3A大作的标题，但是他们中哪一款是最出色的呢？通过GameSpot的兄弟网站Metacritci，我们优中选优，一致讨论出了即使批评家们也挑不出毛病的10款PC游戏。列出的结果包含了众多体裁，但是他们都有共同点，至少有一点是一样的：他们在2021年为你们贡献了最佳的游戏乐趣。</p>\n<h2 id=\"终焉之莉莉：骑士寂夜（Ender-Lilies-Quietus-of-the-Knights）\"><a href=\"#终焉之莉莉：骑士寂夜（Ender-Lilies-Quietus-of-the-Knights）\" class=\"headerlink\" title=\"终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）\"></a>终焉之莉莉：骑士寂夜（Ender Lilies: Quietus of the Knights）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/enderlilies.jpg\"><br>受到<code>空洞骑士</code>和<code>黑暗之魂</code>的启发并将其二者融合，并伴随着大量的<code>银河战士</code>设计的影响，你将体验到的是一场美味的2D动作角色扮演游戏的盛宴，让你直到结尾也回味无穷。更棒的是，<code>终焉之莉莉</code>在以往那些老掉牙的探索和紧张战斗的套路中加入了一些现代化的改进，沿着路线攻克一些非常棘手的任务然后直接将你置于最强的boss之中，这个游戏中都将可能发生。</p>\n<p>Meta评分: 86</p>\n<h2 id=\"死亡循环（Deathloop）\"><a href=\"#死亡循环（Deathloop）\" class=\"headerlink\" title=\"死亡循环（Deathloop）\"></a>死亡循环（Deathloop）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/deathloop.jpeg\"><br>在土拨鼠日带着抢，身怀时间操控的能力，并且口吐芬芳，这听起来像是美好时光的秘方，而在<code>死亡循环</code>里，这些元素烹制出了2021年的最佳游戏之一。<code>死亡循环</code>主要侧重于其绝妙的时间循环的玩法，但这游戏的美妙之处也在于如何在每一次新的循环中奖励你新的知识，技巧，以及最终逃离暴力的黑礁大陆之后，产生的顿悟。</p>\n<p>这很可能是开发商Arkane目前的最佳作品，一个无尽的沙盒，充满创造力和魅力，并且满溢着个人风格和充满自信的大屠杀。</p>\n<p>Meta评分: 86</p>","more":"<h2 id=\"质量效应：传奇版（Mass-Effect-Legendary-Edition）\"><a href=\"#质量效应：传奇版（Mass-Effect-Legendary-Edition）\" class=\"headerlink\" title=\"质量效应：传奇版（Mass Effect: Legendary Edition）\"></a>质量效应：传奇版（Mass Effect: Legendary Edition）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/masseffect.jpeg\"><br>如果你找一个最佳性价比的经典系列游戏的重制版，那<code>质量效应：传奇版</code>完美符合你的要求。即使是BioWare原作的科幻三部曲依旧散发着巨大的魔力。游戏首次加入一些适当的升级，让游戏更加现代化，上市后便连续两周位列销量榜首，传奇版几乎包括了薛帕德的传奇故事的所有篇章-删减了质量效应3的庞杂的多人模式以及少量的其他琐碎内容-顶尖的视觉效果，并在背后进行了若干调整，成就了这个系列的决定性版本。</p>\n<p>Meta评分: 86</p>\n<h2 id=\"漫野奇谭（Wildermyth）\"><a href=\"#漫野奇谭（Wildermyth）\" class=\"headerlink\" title=\"漫野奇谭（Wildermyth）\"></a>漫野奇谭（Wildermyth）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/wildermyth.jpeg\"><br><code>漫野奇谭</code>切中了几个电视游戏设计的要害。他的美术风格像是让活生生的童话故事走进生活，他的玩法取自回合制RPG游戏的元素，通过巧妙的融合将二者融合为一种游戏体裁，而其天然的好上手让这游戏无论是玩一场马拉松的长度还是午饭间隙的一局都非常合适。对于一些特殊体裁，很少有电视游戏可以掌握休闲和硬核玩法之间的平衡并在特定的体裁领域提供新的东西，但是<code>漫野奇谭</code>接受了这个挑战并提供了一份不错的体验。</p>\n<p>Meta评分: 87</p>\n<h2 id=\"杀手3（Hitman-3）\"><a href=\"#杀手3（Hitman-3）\" class=\"headerlink\" title=\"杀手3（Hitman 3）\"></a>杀手3（Hitman 3）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/hitman3.jpg\"><br>所有的故事都会走向终点，而对于47号特工来说，在经历了这么多年的全球旅行并对那些可望不可及的大人物执行了迟到的正义后，他会在<code>杀手3</code>迎来一个完美的终章。经历了前两作的打磨，<code>杀手3</code>的品质已经非常上乘，你可以沉浸在一系列的沙盒场景中度过大量游玩时光，并利用你的完美伪装来完成宿命般的屠杀。</p>\n<p>开发商IO Interactive维持了游戏一贯的丰富内容，包括难以捉摸的目标人物，甚至在PC上加入了VR支持。第二年计划开发的内容也使得游戏的未来非常明朗，<code>杀手3</code>将继续在环绕全球的旅程中进行他优雅而致命的暗杀。</p>\n<p>Meta评分: 87</p>\n<h2 id=\"双人成行（It-Takes-Two）\"><a href=\"#双人成行（It-Takes-Two）\" class=\"headerlink\" title=\"双人成行（It Takes Two）\"></a>双人成行（It Takes Two）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/ittakestwo.jpeg\"><br>这一年中不乏狂野而具有想象力的游戏发布，<code>双人成行</code>则是2021年中出类拔萃的存在。一对即将分崩离析的伙伴踏上一段奇妙的冒险，<code>双人成行</code>讲述了一个关于爱，失去以及混沌的故事。这些都囊括在一个个精妙的合作谜题和舞台中，它的美术风格令人印象深刻，最后以一个令人满意的结尾呈现。</p>\n<p>Meta评分: 88</p>\n<h2 id=\"脑航员2／疯狂世界2（Psychonauts-2）\"><a href=\"#脑航员2／疯狂世界2（Psychonauts-2）\" class=\"headerlink\" title=\"脑航员2／疯狂世界2（Psychonauts 2）\"></a>脑航员2／疯狂世界2（Psychonauts 2）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/psychonauts2.jpeg\"><br><code>脑航员2</code>里有太多有趣的亮点，包括设计很好的角色，杰出的音效，但是其美术风格是游戏真正的闪光点，为你创造难以忘怀的体验。这些元素融合在坚实的冒险中，确切的契合着游戏的初心，<code>脑航员2</code>的开发商Double Fine在这方面做到了最佳，通过大脑的等级和充满想象力的地点构建一个吵闹的故事，让你和脑中的邪恶战斗并在一路上学到一些知识。</p>\n<p>Meta评分: 89</p>\n<h2 id=\"神笔狗良（Chicory-A-Colorful-Tale）\"><a href=\"#神笔狗良（Chicory-A-Colorful-Tale）\" class=\"headerlink\" title=\"神笔狗良（Chicory: A Colorful Tale）\"></a>神笔狗良（Chicory: A Colorful Tale）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/chicory.jpg\"><br>尽管这一年在各种平台上发布了各种体裁的游戏和技术的展示，以及如何翻新老游戏的历程，<code>神笔狗良</code>依然是2021年并列最佳的游戏。有趣谜题的集合，尽情宣泄的画笔，多彩的角色，在数个小时的游玩中，<code>神笔狗良</code>将其不可思议的关联在一块。游戏唤起几乎每个人都有的和内心邪恶的斗争以及自我怀疑的处理，<code>神笔狗良</code>老练的将幽默和情感上的悬念融合，在一个你创建的独特视觉世界中贡献了顿悟自我的杰作。</p>\n<p>Meta评分: 90</p>\n<h2 id=\"极限竞速：地平线5（Forza-Horizon-5）\"><a href=\"#极限竞速：地平线5（Forza-Horizon-5）\" class=\"headerlink\" title=\"极限竞速：地平线5（Forza Horizon 5）\"></a>极限竞速：地平线5（Forza Horizon 5）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/forzahorizon5.jpeg\"><br>极限竞速：地平线系列的最后一作是一场几乎没有缺点的纯粹享受。点燃所有的气缸，在重重阻碍的墨西哥之旅中体验瑰丽的风景，<code>地平线5</code>是一场汽车文化的盛宴。不仅仅是精美渲染的汽车合集以及多种多样的赛车道，<br>每次当你的收藏中加入新车时，<code>地平线5</code>都会在整个体验中给予你令人赞叹的个人体验。以华丽的画面表现在引擎盖下的马力和一些最精密的赛车部件，<code>地平线5</code>堪称是开放世界赛车游戏的天花板。</p>\n<p>Meta评分: 91</p>\n<h2 id=\"极乐迪斯科-最终剪辑版（Disco-Elysium-The-Final-Cut）\"><a href=\"#极乐迪斯科-最终剪辑版（Disco-Elysium-The-Final-Cut）\" class=\"headerlink\" title=\"极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）\"></a>极乐迪斯科:最终剪辑版（Disco Elysium: The Final Cut）</h2><p><img src=\"/2021/12/24/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-Metacritic%E8%AF%84%E9%80%89%E7%9A%842021%E5%B9%B4%E5%BA%A6%E5%8D%81%E4%BD%B3pc%E6%B8%B8%E6%88%8F/discoelysium.jpeg\"><br>在首部作品发布两年后，<code>极乐迪斯科</code>在2021年带着他的乐队回归了。这款早已饱受赞誉的游戏是关于谋杀和扮演一个侦探的故事，这个侦探同时也不得不面对个人失败的情感，而最终剪辑版更是一个残酷侦探故事的顶级展现。<br>强大的声优给这个故事带来了新的生命力，游戏性经过了一些内外的调整，新的内容也加入了冒险中，以及一些关键的更新使得游戏的一切都比以往更好。</p>\n<p>独一无二的画风，令人迷幻的谜题，以及电视游戏中最佳的搞笑桥段，<code>极乐迪斯科</code>已经不能更好了。</p>\n<p>Meta评分: 91</p>\n<hr>\n<p>time-manipulating 时间操控<br>charisma 魅力<br>carnage 大屠杀<br>oozes 滲出；充满<br>trilogy 三部曲<br>remaster 重制版<br>provided the best possible value for money 提供最高的性价比。<br>chart-topping 排行榜榜首<br>saga 传奇故事<br>fantastic 荒诞，可笑，巨大<br>vibrant 充满活力的<br>turn-based 回合制<br>catering 承办酒席<br>rises up to the challenge 迎接挑战<br>considered 认为；考虑过的<br>people who considered themselves to be untouchable 认为自己不可触碰的人<br>pure polish and class 纯正上等<br>revel 狂欢<br>karmic 业力；宿命<br>carnage 屠杀<br>assassination 暗杀<br>stands out from the pack 脱颖而出<br>saw no shortage of 不乏<br>quirky 古怪的<br>bickering 争吵的<br>on the rocks 岌岌可危<br>turmoil 混乱<br>powerhouses 强大的集团；强壮的人<br>rip-roaring 吵闹的<br>cerebral 大脑的<br>solid 坚实的；坚硬的<br>consoles 安慰／控制台<br>cathartic 宣泄的<br>plays out 演出<br>expertly 熟练的<br>cliffhangers 悬念<br>masterpiece 杰作<br>self-reflection 自我反省<br>visually distinctive 视觉上与众不同<br>bliss 幸福<br>pure V8 bliss 纯粹的幸福；纯粹的快乐<br>cylinders 圆筒；气缸<br>gorgeous 瑰丽；非常漂亮<br>beautifully-rendered 渲染精美<br>under its hood 在引擎盖下<br>horsepower 马力<br>stellar 恒星的；星光闪耀的；优秀的<br>grapple 搏斗<br>hard-hitting 直言不讳的<br>banter 调侃<br>mind-bending 心神不宁</p>"},{"title":"新闻翻译-考古发现罕见的中世纪符文","date":"2022-01-13T06:55:26.000Z","comments":1,"_content":"[原文链接](https://www.smithsonianmag.com/smart-news/newly-discovered-norwegian-runes-might-contain-a-medieval-joke-180979381/) \n\n---\n\n## 考古学家发现并开始破译罕见的中世纪符文\n### 这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\n![](bone.png)\n\n去年下半年，挪威的考古学家在几天内连续有了惊人的发现，在奥斯陆[中世纪公园](https://www.middelalder.no/middelalderbyen-i-dag/middelalderparken)的不同区域出土了两件罕见的符文文物。\n\n[挪威国家遗产研究中心](https://www.niku.no/) (NIKU) 的[Solveig Thorkildsen](https://www.niku.no/ansatt/solveig-thorkildsen/)和[Ingeborg Hornkjøl](https://www.niku.no/en/ansatt/ingeborg-hornkjol/)在不断的[挖掘过程](https://www.niku.no/prosjekter/middelalderparken/)中发现了这些文物，其中一个骨头上雕刻了挪威语铭文，另一个的符文则同时由拉丁语和挪威文字写就。根据[声明](https://www.niku.no/2021/12/unike-runefunn-i-middelalderparken/)，符文骨是30多年来在挪威首都首次有这种发现。\n\n团队在结束一天工作的时候，Thorkildsen发现了在地上的一个巨大骨头。她和同事开玩笑说：\"看，这上面有符文！\"\n\n研究员捡起骨头然后把它翻过来，她震惊的发现在骨头的表面真的雕刻了14个符文。\n\n\"当时我的心脏狂跳，\"Thorkildsen在声明中回忆说，\"这次挖掘我心愿单的第一位就是找到符文。\"NIKU介绍，符文骨可能是从马或牛的肋骨上取下的。至今为止在奥斯陆只发现了27块这样的骨头。\n\n![](bone2.png)\n\n在Thorkildsen的发现几天后，Hornkjøl也有了同样令人振奋的发现。当时她站在一个用于灌满水的深坑中，她注意到一片木头被冲到了沟中。就像之前被翻过来的骨头一样，棍上的符文可追溯到中世纪。\n\n这次同时发现两件刻字的文物，是及其罕见的，这将帮助研究者了解更多关于奥斯陆中世纪居民的信息。尽管文物还暂未在实验室中研究，考古学家已经推断这两个符文可追溯到公元1100年至1350年。\n\n\"每一次符文的发现都很重要，这将告诉我们更多关于中世纪的人民的喜好，且愿意将这些分享给周围的人，\"来自奥斯陆大学的符文学专家Kristel Zilmer在一份声明中说道。\"两份发现的符文提示了在那个时期人民的知识和兴趣的多样性。\"\n\nZilmer初步研究发现在木板条符文的四面中，有三面刻着符文文字。文字包含拉丁语`manus Domine or Domini`，这可能是祷告的一部分，\"Into your hands, O Lord, I commend my spirit. You have redeemed me, O Lord, O God of truth.\"（学者告诉`挪威科学`，中世纪基督徒经常使用符文表达简单的祷告）\n\n![](bone3.png)\n\n一个叫Bryngjerd的北欧人也在木棒中出现，也许描述了这个女人用了符文去表达她对上帝的奉献。\n\nThorkildsen发现的骨头上的符文的含义，Zilmer提供了两种理论解释。这个物品上带有北欧符文`basmarþærbæin`-这可能是一个名字或昵称，或者这是一个对于骨头本身的描述。\n\n符文学者Karen Langsholt Holmqvist告诉`挪威科学`，符文是具有高度上下文相关含义的短文本。在中世纪的挪威，只有贵族可以读写，但也有相当一部分人熟知关于词汇，姓名和名句的符文。\n\n12月份是中世纪公园的研究员们的大事件月。在Thorkildsen和Hornkjøl的发现前，NIKU的考古学家发掘出了一个中世纪的遗骸，戴着王冠，手持猎鹰。`挪威科学`当时发布报告时，一个三英尺长的文物发掘出来，来自动物的骨头，可能是用于刀具或工具。雕像可能是一种斯堪的纳维亚人对猎鹰的描绘，一种狩猎的鸟类用于对杀戮野生动物。\n\n--- \nMedieval 中世纪\nRunes 符文\nunearthed 出土；发掘\ninscribed 在…上写(词语、名字等);题;刻\nonly days apart 相隔几天\nstunning 令人震惊的\nheritage 遗产(指国家或社会长期形成的历史、传统和特色)\nNorse 挪威语\ninscription 碑文；铭文\nstick with 紧随；和……呆在一起\nongoing 不间断的\nexcavations (对古物的)发掘;发掘现场;挖掘;开凿;挖土\nwrapping up 总结\nper a translation 根据翻译\ntrench 沟槽;沟;海沟;战壕;堑壕;渠;大洋沟\nprone 有做…倾向的;俯卧的;易于遭受;有做(坏事)的倾向;易于遭受…的\ndated to the medieval era 追溯到中世纪\nfragments 碎片\nrunology 符文学\ndiversity 多样性\npreliminary 初步的\nmanus 手\nredeemed 补偿\nThe object bears the Norse inscription 该物品带有北欧符文\nThat runes are short pieces of text with highly context-dependent meanings 符文是具有高度上下文相关含义的短文本 \na broad segment of the population 相当一部分人\nfalcon 猎鹰\nScandinavian depictions of falconry 斯堪的纳维亚人对猎鹰的描绘\nfigurine 雕像","source":"_posts/news/新闻翻译-地质发现罕见的中古符文.md","raw":"---\ntitle: 新闻翻译-考古发现罕见的中世纪符文\ndate: 2022-01-13 14:55:26\ntags:\n- translate\n- news\ncomments: true\ncategories: \n- 学习\n- 英语\n---\n[原文链接](https://www.smithsonianmag.com/smart-news/newly-discovered-norwegian-runes-might-contain-a-medieval-joke-180979381/) \n\n---\n\n## 考古学家发现并开始破译罕见的中世纪符文\n### 这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\n![](bone.png)\n\n去年下半年，挪威的考古学家在几天内连续有了惊人的发现，在奥斯陆[中世纪公园](https://www.middelalder.no/middelalderbyen-i-dag/middelalderparken)的不同区域出土了两件罕见的符文文物。\n\n[挪威国家遗产研究中心](https://www.niku.no/) (NIKU) 的[Solveig Thorkildsen](https://www.niku.no/ansatt/solveig-thorkildsen/)和[Ingeborg Hornkjøl](https://www.niku.no/en/ansatt/ingeborg-hornkjol/)在不断的[挖掘过程](https://www.niku.no/prosjekter/middelalderparken/)中发现了这些文物，其中一个骨头上雕刻了挪威语铭文，另一个的符文则同时由拉丁语和挪威文字写就。根据[声明](https://www.niku.no/2021/12/unike-runefunn-i-middelalderparken/)，符文骨是30多年来在挪威首都首次有这种发现。\n\n团队在结束一天工作的时候，Thorkildsen发现了在地上的一个巨大骨头。她和同事开玩笑说：\"看，这上面有符文！\"\n\n研究员捡起骨头然后把它翻过来，她震惊的发现在骨头的表面真的雕刻了14个符文。\n\n\"当时我的心脏狂跳，\"Thorkildsen在声明中回忆说，\"这次挖掘我心愿单的第一位就是找到符文。\"NIKU介绍，符文骨可能是从马或牛的肋骨上取下的。至今为止在奥斯陆只发现了27块这样的骨头。\n\n![](bone2.png)\n\n在Thorkildsen的发现几天后，Hornkjøl也有了同样令人振奋的发现。当时她站在一个用于灌满水的深坑中，她注意到一片木头被冲到了沟中。就像之前被翻过来的骨头一样，棍上的符文可追溯到中世纪。\n\n这次同时发现两件刻字的文物，是及其罕见的，这将帮助研究者了解更多关于奥斯陆中世纪居民的信息。尽管文物还暂未在实验室中研究，考古学家已经推断这两个符文可追溯到公元1100年至1350年。\n\n\"每一次符文的发现都很重要，这将告诉我们更多关于中世纪的人民的喜好，且愿意将这些分享给周围的人，\"来自奥斯陆大学的符文学专家Kristel Zilmer在一份声明中说道。\"两份发现的符文提示了在那个时期人民的知识和兴趣的多样性。\"\n\nZilmer初步研究发现在木板条符文的四面中，有三面刻着符文文字。文字包含拉丁语`manus Domine or Domini`，这可能是祷告的一部分，\"Into your hands, O Lord, I commend my spirit. You have redeemed me, O Lord, O God of truth.\"（学者告诉`挪威科学`，中世纪基督徒经常使用符文表达简单的祷告）\n\n![](bone3.png)\n\n一个叫Bryngjerd的北欧人也在木棒中出现，也许描述了这个女人用了符文去表达她对上帝的奉献。\n\nThorkildsen发现的骨头上的符文的含义，Zilmer提供了两种理论解释。这个物品上带有北欧符文`basmarþærbæin`-这可能是一个名字或昵称，或者这是一个对于骨头本身的描述。\n\n符文学者Karen Langsholt Holmqvist告诉`挪威科学`，符文是具有高度上下文相关含义的短文本。在中世纪的挪威，只有贵族可以读写，但也有相当一部分人熟知关于词汇，姓名和名句的符文。\n\n12月份是中世纪公园的研究员们的大事件月。在Thorkildsen和Hornkjøl的发现前，NIKU的考古学家发掘出了一个中世纪的遗骸，戴着王冠，手持猎鹰。`挪威科学`当时发布报告时，一个三英尺长的文物发掘出来，来自动物的骨头，可能是用于刀具或工具。雕像可能是一种斯堪的纳维亚人对猎鹰的描绘，一种狩猎的鸟类用于对杀戮野生动物。\n\n--- \nMedieval 中世纪\nRunes 符文\nunearthed 出土；发掘\ninscribed 在…上写(词语、名字等);题;刻\nonly days apart 相隔几天\nstunning 令人震惊的\nheritage 遗产(指国家或社会长期形成的历史、传统和特色)\nNorse 挪威语\ninscription 碑文；铭文\nstick with 紧随；和……呆在一起\nongoing 不间断的\nexcavations (对古物的)发掘;发掘现场;挖掘;开凿;挖土\nwrapping up 总结\nper a translation 根据翻译\ntrench 沟槽;沟;海沟;战壕;堑壕;渠;大洋沟\nprone 有做…倾向的;俯卧的;易于遭受;有做(坏事)的倾向;易于遭受…的\ndated to the medieval era 追溯到中世纪\nfragments 碎片\nrunology 符文学\ndiversity 多样性\npreliminary 初步的\nmanus 手\nredeemed 补偿\nThe object bears the Norse inscription 该物品带有北欧符文\nThat runes are short pieces of text with highly context-dependent meanings 符文是具有高度上下文相关含义的短文本 \na broad segment of the population 相当一部分人\nfalcon 猎鹰\nScandinavian depictions of falconry 斯堪的纳维亚人对猎鹰的描绘\nfigurine 雕像","slug":"news/新闻翻译-地质发现罕见的中古符文","published":1,"updated":"2022-01-14T08:56:28.000Z","_id":"cl102wnad000ftccfarkwes78","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.smithsonianmag.com/smart-news/newly-discovered-norwegian-runes-might-contain-a-medieval-joke-180979381/\">原文链接</a> </p>\n<hr>\n<h2 id=\"考古学家发现并开始破译罕见的中世纪符文\"><a href=\"#考古学家发现并开始破译罕见的中世纪符文\" class=\"headerlink\" title=\"考古学家发现并开始破译罕见的中世纪符文\"></a>考古学家发现并开始破译罕见的中世纪符文</h2><h3 id=\"这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\"><a href=\"#这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\" class=\"headerlink\" title=\"这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\"></a>这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，</h3><p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone.png\"></p>\n<p>去年下半年，挪威的考古学家在几天内连续有了惊人的发现，在奥斯陆<a href=\"https://www.middelalder.no/middelalderbyen-i-dag/middelalderparken\">中世纪公园</a>的不同区域出土了两件罕见的符文文物。</p>\n<p><a href=\"https://www.niku.no/\">挪威国家遗产研究中心</a> (NIKU) 的<a href=\"https://www.niku.no/ansatt/solveig-thorkildsen/\">Solveig Thorkildsen</a>和<a href=\"https://www.niku.no/en/ansatt/ingeborg-hornkjol/\">Ingeborg Hornkjøl</a>在不断的<a href=\"https://www.niku.no/prosjekter/middelalderparken/\">挖掘过程</a>中发现了这些文物，其中一个骨头上雕刻了挪威语铭文，另一个的符文则同时由拉丁语和挪威文字写就。根据<a href=\"https://www.niku.no/2021/12/unike-runefunn-i-middelalderparken/\">声明</a>，符文骨是30多年来在挪威首都首次有这种发现。</p>\n<p>团队在结束一天工作的时候，Thorkildsen发现了在地上的一个巨大骨头。她和同事开玩笑说：”看，这上面有符文！”</p>\n<p>研究员捡起骨头然后把它翻过来，她震惊的发现在骨头的表面真的雕刻了14个符文。</p>\n<p>“当时我的心脏狂跳，”Thorkildsen在声明中回忆说，”这次挖掘我心愿单的第一位就是找到符文。”NIKU介绍，符文骨可能是从马或牛的肋骨上取下的。至今为止在奥斯陆只发现了27块这样的骨头。</p>\n<p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone2.png\"></p>\n<p>在Thorkildsen的发现几天后，Hornkjøl也有了同样令人振奋的发现。当时她站在一个用于灌满水的深坑中，她注意到一片木头被冲到了沟中。就像之前被翻过来的骨头一样，棍上的符文可追溯到中世纪。</p>\n<p>这次同时发现两件刻字的文物，是及其罕见的，这将帮助研究者了解更多关于奥斯陆中世纪居民的信息。尽管文物还暂未在实验室中研究，考古学家已经推断这两个符文可追溯到公元1100年至1350年。</p>\n<p>“每一次符文的发现都很重要，这将告诉我们更多关于中世纪的人民的喜好，且愿意将这些分享给周围的人，”来自奥斯陆大学的符文学专家Kristel Zilmer在一份声明中说道。”两份发现的符文提示了在那个时期人民的知识和兴趣的多样性。”</p>\n<p>Zilmer初步研究发现在木板条符文的四面中，有三面刻着符文文字。文字包含拉丁语<code>manus Domine or Domini</code>，这可能是祷告的一部分，”Into your hands, O Lord, I commend my spirit. You have redeemed me, O Lord, O God of truth.”（学者告诉<code>挪威科学</code>，中世纪基督徒经常使用符文表达简单的祷告）</p>\n<p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone3.png\"></p>\n<p>一个叫Bryngjerd的北欧人也在木棒中出现，也许描述了这个女人用了符文去表达她对上帝的奉献。</p>\n<p>Thorkildsen发现的骨头上的符文的含义，Zilmer提供了两种理论解释。这个物品上带有北欧符文<code>basmarþærbæin</code>-这可能是一个名字或昵称，或者这是一个对于骨头本身的描述。</p>\n<p>符文学者Karen Langsholt Holmqvist告诉<code>挪威科学</code>，符文是具有高度上下文相关含义的短文本。在中世纪的挪威，只有贵族可以读写，但也有相当一部分人熟知关于词汇，姓名和名句的符文。</p>\n<p>12月份是中世纪公园的研究员们的大事件月。在Thorkildsen和Hornkjøl的发现前，NIKU的考古学家发掘出了一个中世纪的遗骸，戴着王冠，手持猎鹰。<code>挪威科学</code>当时发布报告时，一个三英尺长的文物发掘出来，来自动物的骨头，可能是用于刀具或工具。雕像可能是一种斯堪的纳维亚人对猎鹰的描绘，一种狩猎的鸟类用于对杀戮野生动物。</p>\n<hr>\n<p>Medieval 中世纪<br>Runes 符文<br>unearthed 出土；发掘<br>inscribed 在…上写(词语、名字等);题;刻<br>only days apart 相隔几天<br>stunning 令人震惊的<br>heritage 遗产(指国家或社会长期形成的历史、传统和特色)<br>Norse 挪威语<br>inscription 碑文；铭文<br>stick with 紧随；和……呆在一起<br>ongoing 不间断的<br>excavations (对古物的)发掘;发掘现场;挖掘;开凿;挖土<br>wrapping up 总结<br>per a translation 根据翻译<br>trench 沟槽;沟;海沟;战壕;堑壕;渠;大洋沟<br>prone 有做…倾向的;俯卧的;易于遭受;有做(坏事)的倾向;易于遭受…的<br>dated to the medieval era 追溯到中世纪<br>fragments 碎片<br>runology 符文学<br>diversity 多样性<br>preliminary 初步的<br>manus 手<br>redeemed 补偿<br>The object bears the Norse inscription 该物品带有北欧符文<br>That runes are short pieces of text with highly context-dependent meanings 符文是具有高度上下文相关含义的短文本<br>a broad segment of the population 相当一部分人<br>falcon 猎鹰<br>Scandinavian depictions of falconry 斯堪的纳维亚人对猎鹰的描绘<br>figurine 雕像</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.smithsonianmag.com/smart-news/newly-discovered-norwegian-runes-might-contain-a-medieval-joke-180979381/\">原文链接</a> </p>\n<hr>\n<h2 id=\"考古学家发现并开始破译罕见的中世纪符文\"><a href=\"#考古学家发现并开始破译罕见的中世纪符文\" class=\"headerlink\" title=\"考古学家发现并开始破译罕见的中世纪符文\"></a>考古学家发现并开始破译罕见的中世纪符文</h2><h3 id=\"这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\"><a href=\"#这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\" class=\"headerlink\" title=\"这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，\"></a>这个刻了字的骨头是最新发现的出土文物，同时也是近几十年首次在奥斯陆有此发现，</h3><p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone.png\"></p>\n<p>去年下半年，挪威的考古学家在几天内连续有了惊人的发现，在奥斯陆<a href=\"https://www.middelalder.no/middelalderbyen-i-dag/middelalderparken\">中世纪公园</a>的不同区域出土了两件罕见的符文文物。</p>\n<p><a href=\"https://www.niku.no/\">挪威国家遗产研究中心</a> (NIKU) 的<a href=\"https://www.niku.no/ansatt/solveig-thorkildsen/\">Solveig Thorkildsen</a>和<a href=\"https://www.niku.no/en/ansatt/ingeborg-hornkjol/\">Ingeborg Hornkjøl</a>在不断的<a href=\"https://www.niku.no/prosjekter/middelalderparken/\">挖掘过程</a>中发现了这些文物，其中一个骨头上雕刻了挪威语铭文，另一个的符文则同时由拉丁语和挪威文字写就。根据<a href=\"https://www.niku.no/2021/12/unike-runefunn-i-middelalderparken/\">声明</a>，符文骨是30多年来在挪威首都首次有这种发现。</p>\n<p>团队在结束一天工作的时候，Thorkildsen发现了在地上的一个巨大骨头。她和同事开玩笑说：”看，这上面有符文！”</p>\n<p>研究员捡起骨头然后把它翻过来，她震惊的发现在骨头的表面真的雕刻了14个符文。</p>\n<p>“当时我的心脏狂跳，”Thorkildsen在声明中回忆说，”这次挖掘我心愿单的第一位就是找到符文。”NIKU介绍，符文骨可能是从马或牛的肋骨上取下的。至今为止在奥斯陆只发现了27块这样的骨头。</p>\n<p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone2.png\"></p>\n<p>在Thorkildsen的发现几天后，Hornkjøl也有了同样令人振奋的发现。当时她站在一个用于灌满水的深坑中，她注意到一片木头被冲到了沟中。就像之前被翻过来的骨头一样，棍上的符文可追溯到中世纪。</p>\n<p>这次同时发现两件刻字的文物，是及其罕见的，这将帮助研究者了解更多关于奥斯陆中世纪居民的信息。尽管文物还暂未在实验室中研究，考古学家已经推断这两个符文可追溯到公元1100年至1350年。</p>\n<p>“每一次符文的发现都很重要，这将告诉我们更多关于中世纪的人民的喜好，且愿意将这些分享给周围的人，”来自奥斯陆大学的符文学专家Kristel Zilmer在一份声明中说道。”两份发现的符文提示了在那个时期人民的知识和兴趣的多样性。”</p>\n<p>Zilmer初步研究发现在木板条符文的四面中，有三面刻着符文文字。文字包含拉丁语<code>manus Domine or Domini</code>，这可能是祷告的一部分，”Into your hands, O Lord, I commend my spirit. You have redeemed me, O Lord, O God of truth.”（学者告诉<code>挪威科学</code>，中世纪基督徒经常使用符文表达简单的祷告）</p>\n<p><img src=\"/2022/01/13/news/%E6%96%B0%E9%97%BB%E7%BF%BB%E8%AF%91-%E5%9C%B0%E8%B4%A8%E5%8F%91%E7%8E%B0%E7%BD%95%E8%A7%81%E7%9A%84%E4%B8%AD%E5%8F%A4%E7%AC%A6%E6%96%87/bone3.png\"></p>\n<p>一个叫Bryngjerd的北欧人也在木棒中出现，也许描述了这个女人用了符文去表达她对上帝的奉献。</p>\n<p>Thorkildsen发现的骨头上的符文的含义，Zilmer提供了两种理论解释。这个物品上带有北欧符文<code>basmarþærbæin</code>-这可能是一个名字或昵称，或者这是一个对于骨头本身的描述。</p>\n<p>符文学者Karen Langsholt Holmqvist告诉<code>挪威科学</code>，符文是具有高度上下文相关含义的短文本。在中世纪的挪威，只有贵族可以读写，但也有相当一部分人熟知关于词汇，姓名和名句的符文。</p>\n<p>12月份是中世纪公园的研究员们的大事件月。在Thorkildsen和Hornkjøl的发现前，NIKU的考古学家发掘出了一个中世纪的遗骸，戴着王冠，手持猎鹰。<code>挪威科学</code>当时发布报告时，一个三英尺长的文物发掘出来，来自动物的骨头，可能是用于刀具或工具。雕像可能是一种斯堪的纳维亚人对猎鹰的描绘，一种狩猎的鸟类用于对杀戮野生动物。</p>\n<hr>\n<p>Medieval 中世纪<br>Runes 符文<br>unearthed 出土；发掘<br>inscribed 在…上写(词语、名字等);题;刻<br>only days apart 相隔几天<br>stunning 令人震惊的<br>heritage 遗产(指国家或社会长期形成的历史、传统和特色)<br>Norse 挪威语<br>inscription 碑文；铭文<br>stick with 紧随；和……呆在一起<br>ongoing 不间断的<br>excavations (对古物的)发掘;发掘现场;挖掘;开凿;挖土<br>wrapping up 总结<br>per a translation 根据翻译<br>trench 沟槽;沟;海沟;战壕;堑壕;渠;大洋沟<br>prone 有做…倾向的;俯卧的;易于遭受;有做(坏事)的倾向;易于遭受…的<br>dated to the medieval era 追溯到中世纪<br>fragments 碎片<br>runology 符文学<br>diversity 多样性<br>preliminary 初步的<br>manus 手<br>redeemed 补偿<br>The object bears the Norse inscription 该物品带有北欧符文<br>That runes are short pieces of text with highly context-dependent meanings 符文是具有高度上下文相关含义的短文本<br>a broad segment of the population 相当一部分人<br>falcon 猎鹰<br>Scandinavian depictions of falconry 斯堪的纳维亚人对猎鹰的描绘<br>figurine 雕像</p>\n"},{"title":"解决maven库中无法引入Oracle_jdbc_driver","date":"2019-11-04T06:02:10.000Z","comments":1,"_content":"\n1.在maven库中直接引入oracle jdbc driver是不能下载到本地的，原因是oracle的jdbc工具包不是开放给公众下载的，需要用户是oracle的注册用户才能在oracle官网下载到。\n\n2.解决方式：目前没有发现更简便的方法，只能从oracle官网上下载jdbc driver的包，然后从本地upload到本地仓库。\n\n- 进入JDBC[下载网站](https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html)，选择自己需要的JDBC driver版本，点击进入。\n![](1.png)\n\n- 下载需要的JDBC driver的jar包\n\n![](2.png)\n\n- 如果还没有登陆oracle账号，需要你登陆以后才能下载，没有注册过的注册一个账号，这里不再赘述。\n\n- 下载完成后，进入下载完成的文件夹。在这里需要手动执行命令，在该文件夹打开git窗口，如何在windows安装git请自行百度。执行如下命令。\n<!-- more -->\n  ```bash\n  mvn deploy:deploy-file -Dmaven.test.skip=true -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.0.0.7 -Dpackaging=jar -DrepositoryId=localmaven -Durl=http://localhost/nexus/content/repositories/releases\n  ```\n\n  各个参数含义如下：\n\n  -Dmaven.test.skip ：是否跳过jar包检测。这种官方的包，我们不需要对其进行测试，设置为true即可。\n\n  -Dfile：需要上传的jar包名。建议直接在jar包所在目录执行上述命令，可以避免再输入jar包的地址。\n\n  -DgroupId，-DartifactId，-Dversion：jar包在本地maven库中的地址。理论上这三个值都是自己定义的，只要自己能够区分出来即可。建议地址不要和官方的maven地址完全一致，改一个版本号，或者artifactId都行，这样可以避免自动从官方maven库下载jar包，导致还是不能引入。\n\n  -Dpackaging：打包方式。一般选择下载的是jar包，这里也写jar就行。\n\n  -DrepositoryId：部署的仓库ID。这个ID配置在maven的setings.xml中，参考如下：\n\n![](3.png)\n\n  自行写入本地仓库的用户名和密码。\n\n  -Durl：部署的本地仓库的地址。\n\n- 执行完成后，显示如下页面，就表示上传成功。\n\n![](4.png)\n\n- 在项目的pom.xml文件下需要做如下配置即可：\n\n  ```xml\n  <!--增加本地仓库地址-->\n  <repositories>\n      <repository>\n          <id>java.net2</id>\n          <url>http://localhost/nexus/content/groups/public/</url>\n      </repository>\n  </repositories>\n  <!--引入oracle包-->\n  <dependencies>\n      <!--oracle-->\n      <dependency>\n          <groupId>com.oracle</groupId>\n          <artifactId>ojdbc6</artifactId>\n          <version>11.0.0.7</version>\n      </dependency>\n  </dependencies>\n  ```","source":"_posts/tech/OracleJDBC.md","raw":"---\ntitle: 解决maven库中无法引入Oracle_jdbc_driver\ndate: 2019-11-04 14:02:10\ntags: \n- solved\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n\n1.在maven库中直接引入oracle jdbc driver是不能下载到本地的，原因是oracle的jdbc工具包不是开放给公众下载的，需要用户是oracle的注册用户才能在oracle官网下载到。\n\n2.解决方式：目前没有发现更简便的方法，只能从oracle官网上下载jdbc driver的包，然后从本地upload到本地仓库。\n\n- 进入JDBC[下载网站](https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html)，选择自己需要的JDBC driver版本，点击进入。\n![](1.png)\n\n- 下载需要的JDBC driver的jar包\n\n![](2.png)\n\n- 如果还没有登陆oracle账号，需要你登陆以后才能下载，没有注册过的注册一个账号，这里不再赘述。\n\n- 下载完成后，进入下载完成的文件夹。在这里需要手动执行命令，在该文件夹打开git窗口，如何在windows安装git请自行百度。执行如下命令。\n<!-- more -->\n  ```bash\n  mvn deploy:deploy-file -Dmaven.test.skip=true -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.0.0.7 -Dpackaging=jar -DrepositoryId=localmaven -Durl=http://localhost/nexus/content/repositories/releases\n  ```\n\n  各个参数含义如下：\n\n  -Dmaven.test.skip ：是否跳过jar包检测。这种官方的包，我们不需要对其进行测试，设置为true即可。\n\n  -Dfile：需要上传的jar包名。建议直接在jar包所在目录执行上述命令，可以避免再输入jar包的地址。\n\n  -DgroupId，-DartifactId，-Dversion：jar包在本地maven库中的地址。理论上这三个值都是自己定义的，只要自己能够区分出来即可。建议地址不要和官方的maven地址完全一致，改一个版本号，或者artifactId都行，这样可以避免自动从官方maven库下载jar包，导致还是不能引入。\n\n  -Dpackaging：打包方式。一般选择下载的是jar包，这里也写jar就行。\n\n  -DrepositoryId：部署的仓库ID。这个ID配置在maven的setings.xml中，参考如下：\n\n![](3.png)\n\n  自行写入本地仓库的用户名和密码。\n\n  -Durl：部署的本地仓库的地址。\n\n- 执行完成后，显示如下页面，就表示上传成功。\n\n![](4.png)\n\n- 在项目的pom.xml文件下需要做如下配置即可：\n\n  ```xml\n  <!--增加本地仓库地址-->\n  <repositories>\n      <repository>\n          <id>java.net2</id>\n          <url>http://localhost/nexus/content/groups/public/</url>\n      </repository>\n  </repositories>\n  <!--引入oracle包-->\n  <dependencies>\n      <!--oracle-->\n      <dependency>\n          <groupId>com.oracle</groupId>\n          <artifactId>ojdbc6</artifactId>\n          <version>11.0.0.7</version>\n      </dependency>\n  </dependencies>\n  ```","slug":"tech/OracleJDBC","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yqll000ktccf8tzfgpb9","layout":"post","photos":[],"link":"","content":"<p>1.在maven库中直接引入oracle jdbc driver是不能下载到本地的，原因是oracle的jdbc工具包不是开放给公众下载的，需要用户是oracle的注册用户才能在oracle官网下载到。</p>\n<p>2.解决方式：目前没有发现更简便的方法，只能从oracle官网上下载jdbc driver的包，然后从本地upload到本地仓库。</p>\n<ul>\n<li><p>进入JDBC<a href=\"https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html\">下载网站</a>，选择自己需要的JDBC driver版本，点击进入。<br><img src=\"/2019/11/04/tech/OracleJDBC/1.png\"></p>\n</li>\n<li><p>下载需要的JDBC driver的jar包</p>\n</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/2.png\"></p>\n<ul>\n<li><p>如果还没有登陆oracle账号，需要你登陆以后才能下载，没有注册过的注册一个账号，这里不再赘述。</p>\n</li>\n<li><p>下载完成后，进入下载完成的文件夹。在这里需要手动执行命令，在该文件夹打开git窗口，如何在windows安装git请自行百度。执行如下命令。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy:deploy-file -Dmaven.test.skip=<span class=\"literal\">true</span> -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.0.0.7 -Dpackaging=jar -DrepositoryId=localmaven -Durl=http://localhost/nexus/content/repositories/releases</span><br></pre></td></tr></table></figure>\n\n<p>各个参数含义如下：</p>\n<p>-Dmaven.test.skip ：是否跳过jar包检测。这种官方的包，我们不需要对其进行测试，设置为true即可。</p>\n<p>-Dfile：需要上传的jar包名。建议直接在jar包所在目录执行上述命令，可以避免再输入jar包的地址。</p>\n<p>-DgroupId，-DartifactId，-Dversion：jar包在本地maven库中的地址。理论上这三个值都是自己定义的，只要自己能够区分出来即可。建议地址不要和官方的maven地址完全一致，改一个版本号，或者artifactId都行，这样可以避免自动从官方maven库下载jar包，导致还是不能引入。</p>\n<p>-Dpackaging：打包方式。一般选择下载的是jar包，这里也写jar就行。</p>\n<p>-DrepositoryId：部署的仓库ID。这个ID配置在maven的setings.xml中，参考如下：</p>\n</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/3.png\"></p>\n<p>  自行写入本地仓库的用户名和密码。</p>\n<p>  -Durl：部署的本地仓库的地址。</p>\n<ul>\n<li>执行完成后，显示如下页面，就表示上传成功。</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/4.png\"></p>\n<ul>\n<li><p>在项目的pom.xml文件下需要做如下配置即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--增加本地仓库地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>java.net2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入oracle包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--oracle--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc6<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>11.0.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>1.在maven库中直接引入oracle jdbc driver是不能下载到本地的，原因是oracle的jdbc工具包不是开放给公众下载的，需要用户是oracle的注册用户才能在oracle官网下载到。</p>\n<p>2.解决方式：目前没有发现更简便的方法，只能从oracle官网上下载jdbc driver的包，然后从本地upload到本地仓库。</p>\n<ul>\n<li><p>进入JDBC<a href=\"https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html\">下载网站</a>，选择自己需要的JDBC driver版本，点击进入。<br><img src=\"/2019/11/04/tech/OracleJDBC/1.png\"></p>\n</li>\n<li><p>下载需要的JDBC driver的jar包</p>\n</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/2.png\"></p>\n<ul>\n<li><p>如果还没有登陆oracle账号，需要你登陆以后才能下载，没有注册过的注册一个账号，这里不再赘述。</p>\n</li>\n<li><p>下载完成后，进入下载完成的文件夹。在这里需要手动执行命令，在该文件夹打开git窗口，如何在windows安装git请自行百度。执行如下命令。</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy:deploy-file -Dmaven.test.skip=<span class=\"literal\">true</span> -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.0.0.7 -Dpackaging=jar -DrepositoryId=localmaven -Durl=http://localhost/nexus/content/repositories/releases</span><br></pre></td></tr></table></figure>\n\n<p>各个参数含义如下：</p>\n<p>-Dmaven.test.skip ：是否跳过jar包检测。这种官方的包，我们不需要对其进行测试，设置为true即可。</p>\n<p>-Dfile：需要上传的jar包名。建议直接在jar包所在目录执行上述命令，可以避免再输入jar包的地址。</p>\n<p>-DgroupId，-DartifactId，-Dversion：jar包在本地maven库中的地址。理论上这三个值都是自己定义的，只要自己能够区分出来即可。建议地址不要和官方的maven地址完全一致，改一个版本号，或者artifactId都行，这样可以避免自动从官方maven库下载jar包，导致还是不能引入。</p>\n<p>-Dpackaging：打包方式。一般选择下载的是jar包，这里也写jar就行。</p>\n<p>-DrepositoryId：部署的仓库ID。这个ID配置在maven的setings.xml中，参考如下：</p>\n</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/3.png\"></p>\n<p>  自行写入本地仓库的用户名和密码。</p>\n<p>  -Durl：部署的本地仓库的地址。</p>\n<ul>\n<li>执行完成后，显示如下页面，就表示上传成功。</li>\n</ul>\n<p><img src=\"/2019/11/04/tech/OracleJDBC/4.png\"></p>\n<ul>\n<li><p>在项目的pom.xml文件下需要做如下配置即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--增加本地仓库地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>java.net2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入oracle包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--oracle--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc6<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>11.0.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"Python数据爬虫实践-爬取历年东西部周最佳对比","date":"2019-11-20T08:43:40.000Z","_content":"\n## 数据来源\n\n历年周最佳的数据来自于NBA数据官网，链接为 http://www.stat-nba.com/award/item18.html\n\n![](1.png)\n\n这里可以看到每个赛季的周最佳球员。然后每个球员旁边有个数据的链接，表示的就是这名球员当周的平均数据。比如11月11日-11月17日的东部周最佳是武切维奇，其数据链接为http://www.stat-nba.com/player/3672.html\n\n![](2.png)\n\n## 数据处理\n\n### 爬取周最佳球员\n\n首先看周最佳的页面，链接是http://www.stat-nba.com/award/item18.html，选中武切维奇的名字，右键打开右键菜单，选择“查看页面元素”。出现如下页面：\n\n![](3.png)\n\n注意，我们需要获取到的是**所有的周最佳数据**，而不是某个人的，因此我们需要找到这个页面元素的父元素，因此才能找到这个父元素下面的所有子元素-即所有的周最佳数据。\n\n![](4.png)\n\n```\n如图所示，周最佳数据的节点来自于<td class='current'> -> <table class='stat-box'  style='width:170px;border:0'>  -> <td>\n\n根据网页上下文的查看，可以知道\"<td class=\"current\">是赛季的节点，<table class=\"stat-box\" style=\"width:170px;border:0\">是每个赛季下每周的节点，而<td>就是每周下面每个球员的节点。\n```\n<!-- more -->\n因此我们根据节点的继承关系，可以写出如下的基本的爬虫逻辑。\n\n```python\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\n# 获取周最佳页面\nhtml = urlopen(\"http://www.stat-nba.com/award/item18.html\").read().decode('utf-8')\n# 格式化为lxml\nsoup = BeautifulSoup(html, features='lxml')\n# 查找<td class=\"current\"> 获取各个赛季\noutResult = soup.find_all(\"td\", {\"class\": \"current\"})\nfor i in range(len(outResult)):\n    single = outResult[i]\n    # 获取每赛季数据 \n    data = single.parent.find_all(\"table\", {\"class\": \"stat_box\", \"style\": \"width:170px;border:0\"})\n    for j in range(len(data)):\n        singleData = data[j]\n        # 获取周\n        week = singleData.find(\"th\")\n        tdList = singleData.find_all(\"td\")\n        for k in range(len(tdList)):\n            singleTd = tdList[k]\n            print(week.text, singleTd.text)\n\n```\n\n输出结果如下：\n\n![](5.png)\n\n\n\n### 爬取周最佳数据\n\n接下来我们爬取每个球员的周最佳数据，点击球员旁边的“数据”按钮，会跳转到周数据页面。\n\n![](6.png)\n\n\n\n![](7.png)\n\n根据看到数据页面是在球员td标签下的第二个a标签下\n\n![](8.png)\n\n根据a标签的结构使用如下代码来获取球员数据的链接：\n\n```python\ntdData = singleTd.find_all(\"a\")\nif len(tdData) > 1:\n    # 爬取最佳周数据\n    playerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\n```\n\n获取到链接之后，按照前文所述来爬取球员的详细数据：\n\n```python\n# 爬取最佳周数据\nplayerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\nplayerHtml = urlopen(playerUrl).read().decode('utf-8')\nplayerSoup = BeautifulSoup(playerHtml, features='lxml')\nplayerTable = playerSoup.find(\"table\", {\"class\": \"stat_box\"})\nif hasattr(playerTable, 'find_all'):\n    playerStatList = playerTable.find_all(\"td\")\n    if hasattr(playerTable, 'find_all'):\n        for m in range(1, len(playerStatList)):\n            playerStat = playerStatList[m]\n            # 打印数据\n            print(playerStat.text)\n```\n\n### 输出数据到Excel\n\n将前文进行整合，并将数据输出到Excel，代码如下：\n\n```python\nimport random\nimport time\nfrom urllib.request import urlopen\n\nimport xlwt as xlwt\nfrom bs4 import BeautifulSoup\n\n# 定义单元格格式\ndef set_style(name='Times New Roman', height=220, bold=False):\n    style = xlwt.XFStyle()\n    font = xlwt.Font()\n    font.name = name\n    font.bold = bold\n    font.color_index = 4\n    font.height = height\n    style.font = font\n    return style\n\n\nhtml = urlopen(\"http://www.stat-nba.com/award/item18.html\").read().decode('utf-8')\nsoup = BeautifulSoup(html, features='lxml')\noutResult = soup.find_all(\"td\", {\"class\": \"current\"})\n# 创建excel\nf = xlwt.Workbook()\nsheet1 = f.add_sheet('周最佳数据', cell_overwrite_ok=True)\nnum = 0\nstyle = set_style()\nfor i in range(len(outResult)):\n    single = outResult[i]\n    # 2000年以前数据不再显示\n    if single.text.startswith(\"19\"):\n        break\n    # 获取每赛季数据\n    data = single.parent.find_all(\"table\", {\"class\": \"stat_box\", \"style\": \"width:170px;border:0\"})\n    for j in range(len(data)):\n        singleData = data[j]\n        # 打印周\n        week = singleData.find(\"th\")\n        tdList = singleData.find_all(\"td\")\n        for k in range(len(tdList)):\n            singleTd = tdList[k]\n            # 暂停随机时间，以避免被反爬虫\n            sleeptime = random.randint(0, 1000)\n            time.sleep(sleeptime / 1000)\n            tdData = singleTd.find_all(\"a\")\n            # 获取球员名\n            playerName = tdData[0].text\n            print(single.text, week.text, playerName)\n            if len(tdData) > 1:\n                # 爬取最佳周数据\n                playerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\n                playerHtml = urlopen(playerUrl).read().decode('utf-8')\n                playerSoup = BeautifulSoup(playerHtml, features='lxml')\n                playerTable = playerSoup.find(\"table\", {\"class\": \"stat_box\"})\n                if hasattr(playerTable, 'find_all'):\n                    playerStatList = playerTable.find_all(\"td\")\n                sheet1.write(num, 0, single.text, style)\n                sheet1.write(num, 1, week.text, style)\n                if hasattr(playerTable, 'find_all'):\n                    for m in range(1, len(playerStatList)):\n                        playerStat = playerStatList[m]\n                        # 打印赛季\n                        sheet1.write(num, 1 + m, playerStat.text, style)\n                num = num + 1\nf.save('nbastat-week.xls')\n\n```\n\n\n\n输出的结果如下：\n\n![](9.png)\n\n\n\n## 分析数据\n\n分析过程我就懒得再写一遍了，之前已经将分析结果发布到虎扑，链接是https://bbs.hupu.com/30738461.html\n\n![](10.png)\n\n![](11.png)","source":"_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比.md","raw":"---\ntitle: Python数据爬虫实践-爬取历年东西部周最佳对比\ndate: 2019-11-20 16:43:40\ntags: python\n---\n\n## 数据来源\n\n历年周最佳的数据来自于NBA数据官网，链接为 http://www.stat-nba.com/award/item18.html\n\n![](1.png)\n\n这里可以看到每个赛季的周最佳球员。然后每个球员旁边有个数据的链接，表示的就是这名球员当周的平均数据。比如11月11日-11月17日的东部周最佳是武切维奇，其数据链接为http://www.stat-nba.com/player/3672.html\n\n![](2.png)\n\n## 数据处理\n\n### 爬取周最佳球员\n\n首先看周最佳的页面，链接是http://www.stat-nba.com/award/item18.html，选中武切维奇的名字，右键打开右键菜单，选择“查看页面元素”。出现如下页面：\n\n![](3.png)\n\n注意，我们需要获取到的是**所有的周最佳数据**，而不是某个人的，因此我们需要找到这个页面元素的父元素，因此才能找到这个父元素下面的所有子元素-即所有的周最佳数据。\n\n![](4.png)\n\n```\n如图所示，周最佳数据的节点来自于<td class='current'> -> <table class='stat-box'  style='width:170px;border:0'>  -> <td>\n\n根据网页上下文的查看，可以知道\"<td class=\"current\">是赛季的节点，<table class=\"stat-box\" style=\"width:170px;border:0\">是每个赛季下每周的节点，而<td>就是每周下面每个球员的节点。\n```\n<!-- more -->\n因此我们根据节点的继承关系，可以写出如下的基本的爬虫逻辑。\n\n```python\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\n# 获取周最佳页面\nhtml = urlopen(\"http://www.stat-nba.com/award/item18.html\").read().decode('utf-8')\n# 格式化为lxml\nsoup = BeautifulSoup(html, features='lxml')\n# 查找<td class=\"current\"> 获取各个赛季\noutResult = soup.find_all(\"td\", {\"class\": \"current\"})\nfor i in range(len(outResult)):\n    single = outResult[i]\n    # 获取每赛季数据 \n    data = single.parent.find_all(\"table\", {\"class\": \"stat_box\", \"style\": \"width:170px;border:0\"})\n    for j in range(len(data)):\n        singleData = data[j]\n        # 获取周\n        week = singleData.find(\"th\")\n        tdList = singleData.find_all(\"td\")\n        for k in range(len(tdList)):\n            singleTd = tdList[k]\n            print(week.text, singleTd.text)\n\n```\n\n输出结果如下：\n\n![](5.png)\n\n\n\n### 爬取周最佳数据\n\n接下来我们爬取每个球员的周最佳数据，点击球员旁边的“数据”按钮，会跳转到周数据页面。\n\n![](6.png)\n\n\n\n![](7.png)\n\n根据看到数据页面是在球员td标签下的第二个a标签下\n\n![](8.png)\n\n根据a标签的结构使用如下代码来获取球员数据的链接：\n\n```python\ntdData = singleTd.find_all(\"a\")\nif len(tdData) > 1:\n    # 爬取最佳周数据\n    playerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\n```\n\n获取到链接之后，按照前文所述来爬取球员的详细数据：\n\n```python\n# 爬取最佳周数据\nplayerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\nplayerHtml = urlopen(playerUrl).read().decode('utf-8')\nplayerSoup = BeautifulSoup(playerHtml, features='lxml')\nplayerTable = playerSoup.find(\"table\", {\"class\": \"stat_box\"})\nif hasattr(playerTable, 'find_all'):\n    playerStatList = playerTable.find_all(\"td\")\n    if hasattr(playerTable, 'find_all'):\n        for m in range(1, len(playerStatList)):\n            playerStat = playerStatList[m]\n            # 打印数据\n            print(playerStat.text)\n```\n\n### 输出数据到Excel\n\n将前文进行整合，并将数据输出到Excel，代码如下：\n\n```python\nimport random\nimport time\nfrom urllib.request import urlopen\n\nimport xlwt as xlwt\nfrom bs4 import BeautifulSoup\n\n# 定义单元格格式\ndef set_style(name='Times New Roman', height=220, bold=False):\n    style = xlwt.XFStyle()\n    font = xlwt.Font()\n    font.name = name\n    font.bold = bold\n    font.color_index = 4\n    font.height = height\n    style.font = font\n    return style\n\n\nhtml = urlopen(\"http://www.stat-nba.com/award/item18.html\").read().decode('utf-8')\nsoup = BeautifulSoup(html, features='lxml')\noutResult = soup.find_all(\"td\", {\"class\": \"current\"})\n# 创建excel\nf = xlwt.Workbook()\nsheet1 = f.add_sheet('周最佳数据', cell_overwrite_ok=True)\nnum = 0\nstyle = set_style()\nfor i in range(len(outResult)):\n    single = outResult[i]\n    # 2000年以前数据不再显示\n    if single.text.startswith(\"19\"):\n        break\n    # 获取每赛季数据\n    data = single.parent.find_all(\"table\", {\"class\": \"stat_box\", \"style\": \"width:170px;border:0\"})\n    for j in range(len(data)):\n        singleData = data[j]\n        # 打印周\n        week = singleData.find(\"th\")\n        tdList = singleData.find_all(\"td\")\n        for k in range(len(tdList)):\n            singleTd = tdList[k]\n            # 暂停随机时间，以避免被反爬虫\n            sleeptime = random.randint(0, 1000)\n            time.sleep(sleeptime / 1000)\n            tdData = singleTd.find_all(\"a\")\n            # 获取球员名\n            playerName = tdData[0].text\n            print(single.text, week.text, playerName)\n            if len(tdData) > 1:\n                # 爬取最佳周数据\n                playerUrl = tdData[1].attrs['href'].replace(\"..\", \"http://www.stat-nba.com\", 1)\n                playerHtml = urlopen(playerUrl).read().decode('utf-8')\n                playerSoup = BeautifulSoup(playerHtml, features='lxml')\n                playerTable = playerSoup.find(\"table\", {\"class\": \"stat_box\"})\n                if hasattr(playerTable, 'find_all'):\n                    playerStatList = playerTable.find_all(\"td\")\n                sheet1.write(num, 0, single.text, style)\n                sheet1.write(num, 1, week.text, style)\n                if hasattr(playerTable, 'find_all'):\n                    for m in range(1, len(playerStatList)):\n                        playerStat = playerStatList[m]\n                        # 打印赛季\n                        sheet1.write(num, 1 + m, playerStat.text, style)\n                num = num + 1\nf.save('nbastat-week.xls')\n\n```\n\n\n\n输出的结果如下：\n\n![](9.png)\n\n\n\n## 分析数据\n\n分析过程我就懒得再写一遍了，之前已经将分析结果发布到虎扑，链接是https://bbs.hupu.com/30738461.html\n\n![](10.png)\n\n![](11.png)","slug":"tech/Python数据爬虫实践-爬取历年东西部周最佳对比","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yqp2000otccf0hwwdr6d","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p>历年周最佳的数据来自于NBA数据官网，链接为 <a href=\"http://www.stat-nba.com/award/item18.html\">http://www.stat-nba.com/award/item18.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/1.png\"></p>\n<p>这里可以看到每个赛季的周最佳球员。然后每个球员旁边有个数据的链接，表示的就是这名球员当周的平均数据。比如11月11日-11月17日的东部周最佳是武切维奇，其数据链接为<a href=\"http://www.stat-nba.com/player/3672.html\">http://www.stat-nba.com/player/3672.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/2.png\"></p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"爬取周最佳球员\"><a href=\"#爬取周最佳球员\" class=\"headerlink\" title=\"爬取周最佳球员\"></a>爬取周最佳球员</h3><p>首先看周最佳的页面，链接是<a href=\"http://www.stat-nba.com/award/item18.html%EF%BC%8C%E9%80%89%E4%B8%AD%E6%AD%A6%E5%88%87%E7%BB%B4%E5%A5%87%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%8C%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%8C%E9%80%89%E6%8B%A9%E2%80%9C%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E2%80%9D%E3%80%82%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%9A\">http://www.stat-nba.com/award/item18.html，选中武切维奇的名字，右键打开右键菜单，选择“查看页面元素”。出现如下页面：</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/3.png\"></p>\n<p>注意，我们需要获取到的是<strong>所有的周最佳数据</strong>，而不是某个人的，因此我们需要找到这个页面元素的父元素，因此才能找到这个父元素下面的所有子元素-即所有的周最佳数据。</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/4.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图所示，周最佳数据的节点来自于&lt;td class=&#x27;current&#x27;&gt; -&gt; &lt;table class=&#x27;stat-box&#x27;  style=&#x27;width:170px;border:0&#x27;&gt;  -&gt; &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">根据网页上下文的查看，可以知道&quot;&lt;td class=&quot;current&quot;&gt;是赛季的节点，&lt;table class=&quot;stat-box&quot; style=&quot;width:170px;border:0&quot;&gt;是每个赛季下每周的节点，而&lt;td&gt;就是每周下面每个球员的节点。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>因此我们根据节点的继承关系，可以写出如下的基本的爬虫逻辑。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取周最佳页面</span></span><br><span class=\"line\">html = urlopen(<span class=\"string\">&quot;http://www.stat-nba.com/award/item18.html&quot;</span>).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 格式化为lxml</span></span><br><span class=\"line\">soup = BeautifulSoup(html, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查找&lt;td class=&quot;current&quot;&gt; 获取各个赛季</span></span><br><span class=\"line\">outResult = soup.find_all(<span class=\"string\">&quot;td&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;current&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(outResult)):</span><br><span class=\"line\">    single = outResult[i]</span><br><span class=\"line\">    <span class=\"comment\"># 获取每赛季数据 </span></span><br><span class=\"line\">    data = single.parent.find_all(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>, <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;width:170px;border:0&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">        singleData = data[j]</span><br><span class=\"line\">        <span class=\"comment\"># 获取周</span></span><br><span class=\"line\">        week = singleData.find(<span class=\"string\">&quot;th&quot;</span>)</span><br><span class=\"line\">        tdList = singleData.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(tdList)):</span><br><span class=\"line\">            singleTd = tdList[k]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(week.text, singleTd.text)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/5.png\"></p>\n<h3 id=\"爬取周最佳数据\"><a href=\"#爬取周最佳数据\" class=\"headerlink\" title=\"爬取周最佳数据\"></a>爬取周最佳数据</h3><p>接下来我们爬取每个球员的周最佳数据，点击球员旁边的“数据”按钮，会跳转到周数据页面。</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/6.png\"></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/7.png\"></p>\n<p>根据看到数据页面是在球员td标签下的第二个a标签下</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/8.png\"></p>\n<p>根据a标签的结构使用如下代码来获取球员数据的链接：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tdData = singleTd.find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tdData) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">    playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>获取到链接之后，按照前文所述来爬取球员的详细数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">playerHtml = urlopen(playerUrl).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">playerSoup = BeautifulSoup(playerHtml, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">playerTable = playerSoup.find(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">    playerStatList = playerTable.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(playerStatList)):</span><br><span class=\"line\">            playerStat = playerStatList[m]</span><br><span class=\"line\">            <span class=\"comment\"># 打印数据</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(playerStat.text)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出数据到Excel\"><a href=\"#输出数据到Excel\" class=\"headerlink\" title=\"输出数据到Excel\"></a>输出数据到Excel</h3><p>将前文进行整合，并将数据输出到Excel，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwt <span class=\"keyword\">as</span> xlwt</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义单元格格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_style</span>(<span class=\"params\">name=<span class=\"string\">&#x27;Times New Roman&#x27;</span>, height=<span class=\"number\">220</span>, bold=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">    style = xlwt.XFStyle()</span><br><span class=\"line\">    font = xlwt.Font()</span><br><span class=\"line\">    font.name = name</span><br><span class=\"line\">    font.bold = bold</span><br><span class=\"line\">    font.color_index = <span class=\"number\">4</span></span><br><span class=\"line\">    font.height = height</span><br><span class=\"line\">    style.font = font</span><br><span class=\"line\">    <span class=\"keyword\">return</span> style</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(<span class=\"string\">&quot;http://www.stat-nba.com/award/item18.html&quot;</span>).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">soup = BeautifulSoup(html, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">outResult = soup.find_all(<span class=\"string\">&quot;td&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;current&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建excel</span></span><br><span class=\"line\">f = xlwt.Workbook()</span><br><span class=\"line\">sheet1 = f.add_sheet(<span class=\"string\">&#x27;周最佳数据&#x27;</span>, cell_overwrite_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\">style = set_style()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(outResult)):</span><br><span class=\"line\">    single = outResult[i]</span><br><span class=\"line\">    <span class=\"comment\"># 2000年以前数据不再显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> single.text.startswith(<span class=\"string\">&quot;19&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取每赛季数据</span></span><br><span class=\"line\">    data = single.parent.find_all(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>, <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;width:170px;border:0&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">        singleData = data[j]</span><br><span class=\"line\">        <span class=\"comment\"># 打印周</span></span><br><span class=\"line\">        week = singleData.find(<span class=\"string\">&quot;th&quot;</span>)</span><br><span class=\"line\">        tdList = singleData.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(tdList)):</span><br><span class=\"line\">            singleTd = tdList[k]</span><br><span class=\"line\">            <span class=\"comment\"># 暂停随机时间，以避免被反爬虫</span></span><br><span class=\"line\">            sleeptime = random.randint(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            time.sleep(sleeptime / <span class=\"number\">1000</span>)</span><br><span class=\"line\">            tdData = singleTd.find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取球员名</span></span><br><span class=\"line\">            playerName = tdData[<span class=\"number\">0</span>].text</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(single.text, week.text, playerName)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tdData) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">                playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                playerHtml = urlopen(playerUrl).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">                playerSoup = BeautifulSoup(playerHtml, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">                playerTable = playerSoup.find(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">                    playerStatList = playerTable.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">                sheet1.write(num, <span class=\"number\">0</span>, single.text, style)</span><br><span class=\"line\">                sheet1.write(num, <span class=\"number\">1</span>, week.text, style)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(playerStatList)):</span><br><span class=\"line\">                        playerStat = playerStatList[m]</span><br><span class=\"line\">                        <span class=\"comment\"># 打印赛季</span></span><br><span class=\"line\">                        sheet1.write(num, <span class=\"number\">1</span> + m, playerStat.text, style)</span><br><span class=\"line\">                num = num + <span class=\"number\">1</span></span><br><span class=\"line\">f.save(<span class=\"string\">&#x27;nbastat-week.xls&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出的结果如下：</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/9.png\"></p>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><p>分析过程我就懒得再写一遍了，之前已经将分析结果发布到虎扑，链接是<a href=\"https://bbs.hupu.com/30738461.html\">https://bbs.hupu.com/30738461.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/10.png\"></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/11.png\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p>历年周最佳的数据来自于NBA数据官网，链接为 <a href=\"http://www.stat-nba.com/award/item18.html\">http://www.stat-nba.com/award/item18.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/1.png\"></p>\n<p>这里可以看到每个赛季的周最佳球员。然后每个球员旁边有个数据的链接，表示的就是这名球员当周的平均数据。比如11月11日-11月17日的东部周最佳是武切维奇，其数据链接为<a href=\"http://www.stat-nba.com/player/3672.html\">http://www.stat-nba.com/player/3672.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/2.png\"></p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"爬取周最佳球员\"><a href=\"#爬取周最佳球员\" class=\"headerlink\" title=\"爬取周最佳球员\"></a>爬取周最佳球员</h3><p>首先看周最佳的页面，链接是<a href=\"http://www.stat-nba.com/award/item18.html%EF%BC%8C%E9%80%89%E4%B8%AD%E6%AD%A6%E5%88%87%E7%BB%B4%E5%A5%87%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%8C%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%8C%E9%80%89%E6%8B%A9%E2%80%9C%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E2%80%9D%E3%80%82%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%9A\">http://www.stat-nba.com/award/item18.html，选中武切维奇的名字，右键打开右键菜单，选择“查看页面元素”。出现如下页面：</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/3.png\"></p>\n<p>注意，我们需要获取到的是<strong>所有的周最佳数据</strong>，而不是某个人的，因此我们需要找到这个页面元素的父元素，因此才能找到这个父元素下面的所有子元素-即所有的周最佳数据。</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/4.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图所示，周最佳数据的节点来自于&lt;td class=&#x27;current&#x27;&gt; -&gt; &lt;table class=&#x27;stat-box&#x27;  style=&#x27;width:170px;border:0&#x27;&gt;  -&gt; &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">根据网页上下文的查看，可以知道&quot;&lt;td class=&quot;current&quot;&gt;是赛季的节点，&lt;table class=&quot;stat-box&quot; style=&quot;width:170px;border:0&quot;&gt;是每个赛季下每周的节点，而&lt;td&gt;就是每周下面每个球员的节点。</span><br></pre></td></tr></table></figure>","more":"<p>因此我们根据节点的继承关系，可以写出如下的基本的爬虫逻辑。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取周最佳页面</span></span><br><span class=\"line\">html = urlopen(<span class=\"string\">&quot;http://www.stat-nba.com/award/item18.html&quot;</span>).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 格式化为lxml</span></span><br><span class=\"line\">soup = BeautifulSoup(html, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查找&lt;td class=&quot;current&quot;&gt; 获取各个赛季</span></span><br><span class=\"line\">outResult = soup.find_all(<span class=\"string\">&quot;td&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;current&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(outResult)):</span><br><span class=\"line\">    single = outResult[i]</span><br><span class=\"line\">    <span class=\"comment\"># 获取每赛季数据 </span></span><br><span class=\"line\">    data = single.parent.find_all(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>, <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;width:170px;border:0&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">        singleData = data[j]</span><br><span class=\"line\">        <span class=\"comment\"># 获取周</span></span><br><span class=\"line\">        week = singleData.find(<span class=\"string\">&quot;th&quot;</span>)</span><br><span class=\"line\">        tdList = singleData.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(tdList)):</span><br><span class=\"line\">            singleTd = tdList[k]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(week.text, singleTd.text)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/5.png\"></p>\n<h3 id=\"爬取周最佳数据\"><a href=\"#爬取周最佳数据\" class=\"headerlink\" title=\"爬取周最佳数据\"></a>爬取周最佳数据</h3><p>接下来我们爬取每个球员的周最佳数据，点击球员旁边的“数据”按钮，会跳转到周数据页面。</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/6.png\"></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/7.png\"></p>\n<p>根据看到数据页面是在球员td标签下的第二个a标签下</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/8.png\"></p>\n<p>根据a标签的结构使用如下代码来获取球员数据的链接：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tdData = singleTd.find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tdData) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">    playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>获取到链接之后，按照前文所述来爬取球员的详细数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">playerHtml = urlopen(playerUrl).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">playerSoup = BeautifulSoup(playerHtml, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">playerTable = playerSoup.find(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">    playerStatList = playerTable.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(playerStatList)):</span><br><span class=\"line\">            playerStat = playerStatList[m]</span><br><span class=\"line\">            <span class=\"comment\"># 打印数据</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(playerStat.text)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出数据到Excel\"><a href=\"#输出数据到Excel\" class=\"headerlink\" title=\"输出数据到Excel\"></a>输出数据到Excel</h3><p>将前文进行整合，并将数据输出到Excel，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwt <span class=\"keyword\">as</span> xlwt</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义单元格格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_style</span>(<span class=\"params\">name=<span class=\"string\">&#x27;Times New Roman&#x27;</span>, height=<span class=\"number\">220</span>, bold=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">    style = xlwt.XFStyle()</span><br><span class=\"line\">    font = xlwt.Font()</span><br><span class=\"line\">    font.name = name</span><br><span class=\"line\">    font.bold = bold</span><br><span class=\"line\">    font.color_index = <span class=\"number\">4</span></span><br><span class=\"line\">    font.height = height</span><br><span class=\"line\">    style.font = font</span><br><span class=\"line\">    <span class=\"keyword\">return</span> style</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(<span class=\"string\">&quot;http://www.stat-nba.com/award/item18.html&quot;</span>).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">soup = BeautifulSoup(html, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">outResult = soup.find_all(<span class=\"string\">&quot;td&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;current&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建excel</span></span><br><span class=\"line\">f = xlwt.Workbook()</span><br><span class=\"line\">sheet1 = f.add_sheet(<span class=\"string\">&#x27;周最佳数据&#x27;</span>, cell_overwrite_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\">style = set_style()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(outResult)):</span><br><span class=\"line\">    single = outResult[i]</span><br><span class=\"line\">    <span class=\"comment\"># 2000年以前数据不再显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> single.text.startswith(<span class=\"string\">&quot;19&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取每赛季数据</span></span><br><span class=\"line\">    data = single.parent.find_all(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>, <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;width:170px;border:0&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)):</span><br><span class=\"line\">        singleData = data[j]</span><br><span class=\"line\">        <span class=\"comment\"># 打印周</span></span><br><span class=\"line\">        week = singleData.find(<span class=\"string\">&quot;th&quot;</span>)</span><br><span class=\"line\">        tdList = singleData.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(tdList)):</span><br><span class=\"line\">            singleTd = tdList[k]</span><br><span class=\"line\">            <span class=\"comment\"># 暂停随机时间，以避免被反爬虫</span></span><br><span class=\"line\">            sleeptime = random.randint(<span class=\"number\">0</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            time.sleep(sleeptime / <span class=\"number\">1000</span>)</span><br><span class=\"line\">            tdData = singleTd.find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取球员名</span></span><br><span class=\"line\">            playerName = tdData[<span class=\"number\">0</span>].text</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(single.text, week.text, playerName)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tdData) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 爬取最佳周数据</span></span><br><span class=\"line\">                playerUrl = tdData[<span class=\"number\">1</span>].attrs[<span class=\"string\">&#x27;href&#x27;</span>].replace(<span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;http://www.stat-nba.com&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                playerHtml = urlopen(playerUrl).read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">                playerSoup = BeautifulSoup(playerHtml, features=<span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">                playerTable = playerSoup.find(<span class=\"string\">&quot;table&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;stat_box&quot;</span>&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">                    playerStatList = playerTable.find_all(<span class=\"string\">&quot;td&quot;</span>)</span><br><span class=\"line\">                sheet1.write(num, <span class=\"number\">0</span>, single.text, style)</span><br><span class=\"line\">                sheet1.write(num, <span class=\"number\">1</span>, week.text, style)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">hasattr</span>(playerTable, <span class=\"string\">&#x27;find_all&#x27;</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(playerStatList)):</span><br><span class=\"line\">                        playerStat = playerStatList[m]</span><br><span class=\"line\">                        <span class=\"comment\"># 打印赛季</span></span><br><span class=\"line\">                        sheet1.write(num, <span class=\"number\">1</span> + m, playerStat.text, style)</span><br><span class=\"line\">                num = num + <span class=\"number\">1</span></span><br><span class=\"line\">f.save(<span class=\"string\">&#x27;nbastat-week.xls&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出的结果如下：</p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/9.png\"></p>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><p>分析过程我就懒得再写一遍了，之前已经将分析结果发布到虎扑，链接是<a href=\"https://bbs.hupu.com/30738461.html\">https://bbs.hupu.com/30738461.html</a></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/10.png\"></p>\n<p><img src=\"/2019/11/20/tech/Python%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%88%AC%E5%8F%96%E5%8E%86%E5%B9%B4%E4%B8%9C%E8%A5%BF%E9%83%A8%E5%91%A8%E6%9C%80%E4%BD%B3%E5%AF%B9%E6%AF%94/11.png\"></p>"},{"title":"利用hexo和github搭建个人博客","date":"2019-10-08T00:55:33.000Z","comments":1,"_content":"## github建立个人网站  \n1.github的账号申请不再赘述  \n2.打开github.com, 点击new, 新建一个项目  \n![](1.png)  \n3.输入项目名称, 注意项目名称的格式必须是\"用户名.github.io\"的格式\n![](2.png)  \n4.点击Create Repository完成项目新建  \n5.点击新建的项目, 进入settings, 往下找到GitHub Pages, 点击Choose a theme, 选择一个主题后, 点击select theme就完成了网站的发布  \n![](3.png)  \n6.在浏览器输入\"用户名.github.io\", 就可以看到github为你默认创建的首页  \n\n## hexo搭建博客  \n1.在使用hexo搭建博客之前, 需要完成几个基础工作  \n[安装git](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)  \n[新增ssh key到github](https://help.github.com/cn/articles/adding-a-new-ssh-key-to-your-github-account)  \n[安装node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)  \n2.在本地拉取github上刚刚创建的网页项目(用户名.github.io)\n3.在项目目录下新建一个文件夹, 可以随意命名, 比如hexo  \n4.进入hexo目录, windows下右键空白处, 点击Git Bash Here  \n5.依次执行命令  \nnpm install hexo-cli -g  (安装hexo)  \nhexo init  (初始化网站)  \nnpm install hexo-deployer-git --save  (安装hexo发布到git的插件)  \n中间遇到需要确认的信息, 直接按回车即可  \n6.打开hexo目录下的_config.yml文件, 有几个地方可以进行修改  \ntitle: 你的网站名字  \nauthor: 网站作者  \ntheme: 去[hexo主题](https://hexo.io/themes/)可以选择, 注意要先将主题下载到hexo/themes下才可选择该主题  \n注意: **必须要修改的部分是deploy, 改成如下格式**  \n<!-- more -->\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n其他配置的详细说明在[hexo配置文件说明](https://hexo.io/docs/configuration.html)  \n7.接下来就可以开始写博客了  \n使用命令hexo n \"博客标题\", 即完成了一个新的博客文件的创建  \n该命令会在hexo/source/_posts目录下新建一个\"博客标题.md\"的文件  \n该文件内容格式如下  \n![](4.png)  \n正文内容使用markdown语法进行编写, 至于markdown怎么写, 可以参考[markdown官方文档](http://www.markdown.cn/)  \n8.博客写完之后, 保存文件, 然后依次执行如下命令  \nhexo g  (根据md文件创建静态网页文件, 注意每次更新博客内容都需要执行这个命令)  \nhexo s  (这一步是启动本地hexo服务器, 主要是为了本地预览博客效果, 浏览器打开localhost:4000预览效果)  \nhexo d (发布网页到github)  \n9.浏览器打开\"用户名.github.io\"即可看到你刚刚写的博客内容  \n![](5.png)  \n## 小结  \n总的来说, hexo+github搭建博客非常的简便, hexo内置的几种主题也都非常的简洁美观, 对于既想要有逼格的有自己的个人博客网站, 又不想太麻烦的人来说, 是个不错的选择\n\n","source":"_posts/tech/利用hexo和github搭建个人博客.md","raw":"---\ntitle: 利用hexo和github搭建个人博客\ndate: 2019-10-08 08:55:33\ntags: \n- hexo\n- github\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n## github建立个人网站  \n1.github的账号申请不再赘述  \n2.打开github.com, 点击new, 新建一个项目  \n![](1.png)  \n3.输入项目名称, 注意项目名称的格式必须是\"用户名.github.io\"的格式\n![](2.png)  \n4.点击Create Repository完成项目新建  \n5.点击新建的项目, 进入settings, 往下找到GitHub Pages, 点击Choose a theme, 选择一个主题后, 点击select theme就完成了网站的发布  \n![](3.png)  \n6.在浏览器输入\"用户名.github.io\", 就可以看到github为你默认创建的首页  \n\n## hexo搭建博客  \n1.在使用hexo搭建博客之前, 需要完成几个基础工作  \n[安装git](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)  \n[新增ssh key到github](https://help.github.com/cn/articles/adding-a-new-ssh-key-to-your-github-account)  \n[安装node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)  \n2.在本地拉取github上刚刚创建的网页项目(用户名.github.io)\n3.在项目目录下新建一个文件夹, 可以随意命名, 比如hexo  \n4.进入hexo目录, windows下右键空白处, 点击Git Bash Here  \n5.依次执行命令  \nnpm install hexo-cli -g  (安装hexo)  \nhexo init  (初始化网站)  \nnpm install hexo-deployer-git --save  (安装hexo发布到git的插件)  \n中间遇到需要确认的信息, 直接按回车即可  \n6.打开hexo目录下的_config.yml文件, 有几个地方可以进行修改  \ntitle: 你的网站名字  \nauthor: 网站作者  \ntheme: 去[hexo主题](https://hexo.io/themes/)可以选择, 注意要先将主题下载到hexo/themes下才可选择该主题  \n注意: **必须要修改的部分是deploy, 改成如下格式**  \n<!-- more -->\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n其他配置的详细说明在[hexo配置文件说明](https://hexo.io/docs/configuration.html)  \n7.接下来就可以开始写博客了  \n使用命令hexo n \"博客标题\", 即完成了一个新的博客文件的创建  \n该命令会在hexo/source/_posts目录下新建一个\"博客标题.md\"的文件  \n该文件内容格式如下  \n![](4.png)  \n正文内容使用markdown语法进行编写, 至于markdown怎么写, 可以参考[markdown官方文档](http://www.markdown.cn/)  \n8.博客写完之后, 保存文件, 然后依次执行如下命令  \nhexo g  (根据md文件创建静态网页文件, 注意每次更新博客内容都需要执行这个命令)  \nhexo s  (这一步是启动本地hexo服务器, 主要是为了本地预览博客效果, 浏览器打开localhost:4000预览效果)  \nhexo d (发布网页到github)  \n9.浏览器打开\"用户名.github.io\"即可看到你刚刚写的博客内容  \n![](5.png)  \n## 小结  \n总的来说, hexo+github搭建博客非常的简便, hexo内置的几种主题也都非常的简洁美观, 对于既想要有逼格的有自己的个人博客网站, 又不想太麻烦的人来说, 是个不错的选择\n\n","slug":"tech/利用hexo和github搭建个人博客","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yr16000qtccf3bqa4ll6","layout":"post","photos":[],"link":"","content":"<h2 id=\"github建立个人网站\"><a href=\"#github建立个人网站\" class=\"headerlink\" title=\"github建立个人网站\"></a>github建立个人网站</h2><p>1.github的账号申请不再赘述<br>2.打开github.com, 点击new, 新建一个项目<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png\"><br>3.输入项目名称, 注意项目名称的格式必须是”用户名.github.io”的格式<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png\"><br>4.点击Create Repository完成项目新建<br>5.点击新建的项目, 进入settings, 往下找到GitHub Pages, 点击Choose a theme, 选择一个主题后, 点击select theme就完成了网站的发布<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png\"><br>6.在浏览器输入”用户名.github.io”, 就可以看到github为你默认创建的首页  </p>\n<h2 id=\"hexo搭建博客\"><a href=\"#hexo搭建博客\" class=\"headerlink\" title=\"hexo搭建博客\"></a>hexo搭建博客</h2><p>1.在使用hexo搭建博客之前, 需要完成几个基础工作<br><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">安装git</a><br><a href=\"https://help.github.com/cn/articles/adding-a-new-ssh-key-to-your-github-account\">新增ssh key到github</a><br><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装node.js</a><br>2.在本地拉取github上刚刚创建的网页项目(用户名.github.io)<br>3.在项目目录下新建一个文件夹, 可以随意命名, 比如hexo<br>4.进入hexo目录, windows下右键空白处, 点击Git Bash Here<br>5.依次执行命令<br>npm install hexo-cli -g  (安装hexo)<br>hexo init  (初始化网站)<br>npm install hexo-deployer-git –save  (安装hexo发布到git的插件)<br>中间遇到需要确认的信息, 直接按回车即可<br>6.打开hexo目录下的_config.yml文件, 有几个地方可以进行修改<br>title: 你的网站名字<br>author: 网站作者<br>theme: 去<a href=\"https://hexo.io/themes/\">hexo主题</a>可以选择, 注意要先将主题下载到hexo/themes下才可选择该主题<br>注意: <strong>必须要修改的部分是deploy, 改成如下格式</strong>  </p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其他配置的详细说明在<a href=\"https://hexo.io/docs/configuration.html\">hexo配置文件说明</a><br>7.接下来就可以开始写博客了<br>使用命令hexo n “博客标题”, 即完成了一个新的博客文件的创建<br>该命令会在hexo/source/_posts目录下新建一个”博客标题.md”的文件<br>该文件内容格式如下<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png\"><br>正文内容使用markdown语法进行编写, 至于markdown怎么写, 可以参考<a href=\"http://www.markdown.cn/\">markdown官方文档</a><br>8.博客写完之后, 保存文件, 然后依次执行如下命令<br>hexo g  (根据md文件创建静态网页文件, 注意每次更新博客内容都需要执行这个命令)<br>hexo s  (这一步是启动本地hexo服务器, 主要是为了本地预览博客效果, 浏览器打开localhost:4000预览效果)<br>hexo d (发布网页到github)<br>9.浏览器打开”用户名.github.io”即可看到你刚刚写的博客内容<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png\">  </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总的来说, hexo+github搭建博客非常的简便, hexo内置的几种主题也都非常的简洁美观, 对于既想要有逼格的有自己的个人博客网站, 又不想太麻烦的人来说, 是个不错的选择</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"github建立个人网站\"><a href=\"#github建立个人网站\" class=\"headerlink\" title=\"github建立个人网站\"></a>github建立个人网站</h2><p>1.github的账号申请不再赘述<br>2.打开github.com, 点击new, 新建一个项目<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png\"><br>3.输入项目名称, 注意项目名称的格式必须是”用户名.github.io”的格式<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png\"><br>4.点击Create Repository完成项目新建<br>5.点击新建的项目, 进入settings, 往下找到GitHub Pages, 点击Choose a theme, 选择一个主题后, 点击select theme就完成了网站的发布<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png\"><br>6.在浏览器输入”用户名.github.io”, 就可以看到github为你默认创建的首页  </p>\n<h2 id=\"hexo搭建博客\"><a href=\"#hexo搭建博客\" class=\"headerlink\" title=\"hexo搭建博客\"></a>hexo搭建博客</h2><p>1.在使用hexo搭建博客之前, 需要完成几个基础工作<br><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">安装git</a><br><a href=\"https://help.github.com/cn/articles/adding-a-new-ssh-key-to-your-github-account\">新增ssh key到github</a><br><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装node.js</a><br>2.在本地拉取github上刚刚创建的网页项目(用户名.github.io)<br>3.在项目目录下新建一个文件夹, 可以随意命名, 比如hexo<br>4.进入hexo目录, windows下右键空白处, 点击Git Bash Here<br>5.依次执行命令<br>npm install hexo-cli -g  (安装hexo)<br>hexo init  (初始化网站)<br>npm install hexo-deployer-git –save  (安装hexo发布到git的插件)<br>中间遇到需要确认的信息, 直接按回车即可<br>6.打开hexo目录下的_config.yml文件, 有几个地方可以进行修改<br>title: 你的网站名字<br>author: 网站作者<br>theme: 去<a href=\"https://hexo.io/themes/\">hexo主题</a>可以选择, 注意要先将主题下载到hexo/themes下才可选择该主题<br>注意: <strong>必须要修改的部分是deploy, 改成如下格式</strong>  </p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其他配置的详细说明在<a href=\"https://hexo.io/docs/configuration.html\">hexo配置文件说明</a><br>7.接下来就可以开始写博客了<br>使用命令hexo n “博客标题”, 即完成了一个新的博客文件的创建<br>该命令会在hexo/source/_posts目录下新建一个”博客标题.md”的文件<br>该文件内容格式如下<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png\"><br>正文内容使用markdown语法进行编写, 至于markdown怎么写, 可以参考<a href=\"http://www.markdown.cn/\">markdown官方文档</a><br>8.博客写完之后, 保存文件, 然后依次执行如下命令<br>hexo g  (根据md文件创建静态网页文件, 注意每次更新博客内容都需要执行这个命令)<br>hexo s  (这一步是启动本地hexo服务器, 主要是为了本地预览博客效果, 浏览器打开localhost:4000预览效果)<br>hexo d (发布网页到github)<br>9.浏览器打开”用户名.github.io”即可看到你刚刚写的博客内容<br><img src=\"/2019/10/08/tech/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png\">  </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总的来说, hexo+github搭建博客非常的简便, hexo内置的几种主题也都非常的简洁美观, 对于既想要有逼格的有自己的个人博客网站, 又不想太麻烦的人来说, 是个不错的选择</p>"},{"title":"官方文档解释MySQL最左匹配(最左前缀)原则","date":"2019-10-15T00:48:10.000Z","comments":1,"_content":"\n## 什么是最左匹配原则  \n关于最左匹配原则的解释, 网上找了很多, 但是我感觉都不是特别准确, 于是一怒之下\n直接找了官网的文档, 一下子就清晰了. 下面贴下官网的解释, 然后我自己翻译了一下.  \n\n### 来自官方文档的解释  \n[原文链接](https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html)  \n> MySQL can create composite indexes (that is, indexes on multiple columns). \n An index may consist of up to 16 columns. For certain data types,\n you can index a prefix of the column (see \n [Section 8.3.5, “Column Indexes”](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html)).  \n\nMySQL可以创建联合索引(即, 多列的索引). 一个索引可以包含最多16列. 对于\n某些数据类型, 你可以索引列的前缀(这里说的是对于Blob和Text类型, 索引列的前几位就可以, \n如INDEX(blob_col(10)), 详见[索引文档](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html))  \n\n> MySQL can use multiple-column indexes for queries that test all the columns in the index, \nor queries that test just the first column, the first two columns, the first three columns, and so on. \nIf you specify the columns in the right order in the index definition, \na single composite index can speed up several kinds of queries on the same table.  \n\nMySQL的联合索引可以用于包含索引中所有列的查询条件的语句, 或者包含索引中的第一列的查询条件的语句, \n以及索引中前两列, 索引中的前三列, 以此类推. 如果你在索引定义中以正确的顺序指定列, \n那么联合索引就可以加速同一张表中的多个不同类型的查询.  \n\n> A multiple-column index can be considered a sorted array, the rows of \nwhich contain values that are created by concatenating the values of the indexed columns.  \n\n一个联合索引可以看作是一个有序队列, 里面有值的列是根据连接索引列的值创建的.(这句可能不准确)  \n\n> Note  \nAs an alternative to a composite index, you can introduce a column that \nis “hashed” based on information from other columns. If this column is \nshort, reasonably unique, and indexed, it might be faster than a “wide” \nindex on many columns. In MySQL, it is very easy to use this extra column:  \n\n提示  \n作为联合索引的一个替代项, 你可以采用一个Hash值列, 这个列的Hash值来自其他的列. \n如果该列简短, 合理唯一, 且被索引, 那该列就可能比一个很\"宽\"的由多个列构成的索引\n更快. MySQL里可以很容易的使用这种列:\n```sql\nSELECT * FROM tbl_name\n  WHERE hash_col=MD5(CONCAT(val1,val2))\n  AND col1=val1 AND col2=val2;\n```\n<!-- more -->\n> Suppose that a table has the following specification:\n\n假设有如下表定义:\n```sql\nCREATE TABLE test (\n    id         INT NOT NULL,\n    last_name  CHAR(30) NOT NULL,\n    first_name CHAR(30) NOT NULL,\n    PRIMARY KEY (id),\n    INDEX name (last_name,first_name)\n);\n```\n\n> The name index is an index over the last_name and first_name columns. \nThe index can be used for lookups in queries that specify values in a known \nrange for combinations of last_name and first_name values. It can also be used \nfor queries that specify just a last_name value because that column is a \nleftmost prefix of the index (as described later in this section). \nTherefore, the name index is used for lookups in the following queries:  \n\n索引name是一个包含了last_name和first_name列的索引. 该索引可以用于为last_name\n和first_name值的组合指定一个已知范围内的查询. 同样也可以用于只指定了last_name列值的查询, \n因为这个列是索引的一个最左前缀(就如下一节所说). 因此, 索引name可以用于下列的查询语句:  \n```sql\nSELECT * FROM test WHERE last_name='Jones';\n\nSELECT * FROM test\n  WHERE last_name='Jones' AND first_name='John';\n\nSELECT * FROM test\n  WHERE last_name='Jones'\n  AND (first_name='John' OR first_name='Jon');\n\nSELECT * FROM test\n  WHERE last_name='Jones'\n  AND first_name >='M' AND first_name < 'N';\n```\n\n> However, the name index is not used for lookups in the following queries:  \n\n然而, 索引name不能用于下列的查询:  \n```sql\nSELECT * FROM test WHERE first_name='John';\n\nSELECT * FROM test\n  WHERE last_name='Jones' OR first_name='John';\n```\n\n> Suppose that you issue the following SELECT statement:  \n\n假设存在以下select语句:  \n```sql\nSELECT * FROM tbl_name\n  WHERE col1=val1 AND col2=val2;\n```\n\n> If a multiple-column index exists on col1 and col2, the appropriate \nrows can be fetched directly. If separate single-column indexes exist \non col1 and col2, the optimizer attempts to use the Index Merge optimization \n(see Section 8.2.1.3, “Index Merge Optimization”), or attempts to find \nthe most restrictive index by deciding which index excludes more rows \nand using that index to fetch the rows.  \n\n如果一个联合索引存在于col1和col2, 相应的列会被直接抓取. 如果是分为单独的索引\n分别存在于col1和col2, 优化器会尝试利用索引联合优化(详见8.2.1.3, [\"索引联合\n优化\"](https://dev.mysql.com/doc/refman/8.0/en/index-merge-optimization.html)),\n或者尝试去寻找包含最多列, 最大限制的索引, 并利用该索引去抓取列.  \n\n> **If the table has a multiple-column index, any leftmost prefix of the \nindex can be used by the optimizer to look up rows. For example, \nif you have a three-column index on (col1, col2, col3), you have indexed \nsearch capabilities on (col1), (col1, col2), and (col1, col2, col3).**  \n\n**如果表拥有一个联合索引, 任何一个索引的最左前缀都会被优化器用于查找列. 比如, \n如果你创建了一个三列的联合索引包含(col1, col2, col3), 你的索引会生效于(col1),\n(col1, col2), 以及(col1, col2, col3)**  \n\n> **MySQL cannot use the index to perform lookups if the columns do not \nform a leftmost prefix of the index. Suppose that you have the SELECT \nstatements shown here:**  \n\n**如果查询的列不是索引的最左前缀, 那MySQL不会将索引用于执行查询. 假设你有\n下列查询语句:** \n```sql\nSELECT * FROM tbl_name WHERE col1=val1;\nSELECT * FROM tbl_name WHERE col1=val1 AND col2=val2;\n\nSELECT * FROM tbl_name WHERE col2=val2;\nSELECT * FROM tbl_name WHERE col2=val2 AND col3=val3;\n```\n\n> If an index exists on (col1, col2, col3), only the first two queries \nuse the index. The third and fourth queries do involve indexed columns, \nbut do not use an index to perform lookups because (col2) and (col2, col3) \nare not leftmost prefixes of (col1, col2, col3).  \n\n如果索引存在于(col1, col2, col3), 那只有头两个查询语句用到了索引. 第三个和\n第四个查询包含索引的列, 但是不会用索引去执行查询. 因为(col2)和(col2, col3)\n不是(col1, col2, col3)的最左前缀  \n\n## 官方文档小结  \n其实官方文档已经解释的非常详细了, 总结关于最左匹配的解释, 那其实只有这么\n几句话:  \n1.按照文档, 更准确的说法应该是最左前缀原则, 即如果你创建一个联合索引, 那\n这个索引的任何前缀都会用于查询, (col1, col2, col3)这个联合索引的所有前缀\n就是(col1), (col1, col2), (col1, col2, col3), 包含这些列的查询都会启用索\n引查询.   \n2.其他所有不在最左前缀里的列都不会启用索引, 即使包含了联合索引里的部分列\n也不行. 即上述中的(col2), (col3), (col2, col3) 都不会启用索引去查询.  \n**注意, (col1, col3)会启用(col1)的索引查询**  \n\n### 官方文档的其他细节  \n读一下官方文档, 还有很多别的发现, 跟最左前缀无关, 关于联合索引的别的细节, \n总结如下:  \n- 联合索引最多只能包含16列  \n- blob和text也能创建索引, 但是必须指定前面多少位  \n- 官方推荐了一种联合索引的替代方案: 可以额外创建一列, 其列值由联合索引包含\n的所有列值所生成的hash值来构成(个人认为似乎破坏了第一范式的设计规则) ","source":"_posts/tech/官方文档解释MySQL最左匹配(最左前缀)原则.md","raw":"---\ntitle: 官方文档解释MySQL最左匹配(最左前缀)原则\ndate: 2019-10-15 08:48:10\ntags: \n- mysql\n- translate\ncomments: true\ncategories: \n- 学习\n- 数据库\n---\n\n## 什么是最左匹配原则  \n关于最左匹配原则的解释, 网上找了很多, 但是我感觉都不是特别准确, 于是一怒之下\n直接找了官网的文档, 一下子就清晰了. 下面贴下官网的解释, 然后我自己翻译了一下.  \n\n### 来自官方文档的解释  \n[原文链接](https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html)  \n> MySQL can create composite indexes (that is, indexes on multiple columns). \n An index may consist of up to 16 columns. For certain data types,\n you can index a prefix of the column (see \n [Section 8.3.5, “Column Indexes”](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html)).  \n\nMySQL可以创建联合索引(即, 多列的索引). 一个索引可以包含最多16列. 对于\n某些数据类型, 你可以索引列的前缀(这里说的是对于Blob和Text类型, 索引列的前几位就可以, \n如INDEX(blob_col(10)), 详见[索引文档](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html))  \n\n> MySQL can use multiple-column indexes for queries that test all the columns in the index, \nor queries that test just the first column, the first two columns, the first three columns, and so on. \nIf you specify the columns in the right order in the index definition, \na single composite index can speed up several kinds of queries on the same table.  \n\nMySQL的联合索引可以用于包含索引中所有列的查询条件的语句, 或者包含索引中的第一列的查询条件的语句, \n以及索引中前两列, 索引中的前三列, 以此类推. 如果你在索引定义中以正确的顺序指定列, \n那么联合索引就可以加速同一张表中的多个不同类型的查询.  \n\n> A multiple-column index can be considered a sorted array, the rows of \nwhich contain values that are created by concatenating the values of the indexed columns.  \n\n一个联合索引可以看作是一个有序队列, 里面有值的列是根据连接索引列的值创建的.(这句可能不准确)  \n\n> Note  \nAs an alternative to a composite index, you can introduce a column that \nis “hashed” based on information from other columns. If this column is \nshort, reasonably unique, and indexed, it might be faster than a “wide” \nindex on many columns. In MySQL, it is very easy to use this extra column:  \n\n提示  \n作为联合索引的一个替代项, 你可以采用一个Hash值列, 这个列的Hash值来自其他的列. \n如果该列简短, 合理唯一, 且被索引, 那该列就可能比一个很\"宽\"的由多个列构成的索引\n更快. MySQL里可以很容易的使用这种列:\n```sql\nSELECT * FROM tbl_name\n  WHERE hash_col=MD5(CONCAT(val1,val2))\n  AND col1=val1 AND col2=val2;\n```\n<!-- more -->\n> Suppose that a table has the following specification:\n\n假设有如下表定义:\n```sql\nCREATE TABLE test (\n    id         INT NOT NULL,\n    last_name  CHAR(30) NOT NULL,\n    first_name CHAR(30) NOT NULL,\n    PRIMARY KEY (id),\n    INDEX name (last_name,first_name)\n);\n```\n\n> The name index is an index over the last_name and first_name columns. \nThe index can be used for lookups in queries that specify values in a known \nrange for combinations of last_name and first_name values. It can also be used \nfor queries that specify just a last_name value because that column is a \nleftmost prefix of the index (as described later in this section). \nTherefore, the name index is used for lookups in the following queries:  \n\n索引name是一个包含了last_name和first_name列的索引. 该索引可以用于为last_name\n和first_name值的组合指定一个已知范围内的查询. 同样也可以用于只指定了last_name列值的查询, \n因为这个列是索引的一个最左前缀(就如下一节所说). 因此, 索引name可以用于下列的查询语句:  \n```sql\nSELECT * FROM test WHERE last_name='Jones';\n\nSELECT * FROM test\n  WHERE last_name='Jones' AND first_name='John';\n\nSELECT * FROM test\n  WHERE last_name='Jones'\n  AND (first_name='John' OR first_name='Jon');\n\nSELECT * FROM test\n  WHERE last_name='Jones'\n  AND first_name >='M' AND first_name < 'N';\n```\n\n> However, the name index is not used for lookups in the following queries:  \n\n然而, 索引name不能用于下列的查询:  \n```sql\nSELECT * FROM test WHERE first_name='John';\n\nSELECT * FROM test\n  WHERE last_name='Jones' OR first_name='John';\n```\n\n> Suppose that you issue the following SELECT statement:  \n\n假设存在以下select语句:  \n```sql\nSELECT * FROM tbl_name\n  WHERE col1=val1 AND col2=val2;\n```\n\n> If a multiple-column index exists on col1 and col2, the appropriate \nrows can be fetched directly. If separate single-column indexes exist \non col1 and col2, the optimizer attempts to use the Index Merge optimization \n(see Section 8.2.1.3, “Index Merge Optimization”), or attempts to find \nthe most restrictive index by deciding which index excludes more rows \nand using that index to fetch the rows.  \n\n如果一个联合索引存在于col1和col2, 相应的列会被直接抓取. 如果是分为单独的索引\n分别存在于col1和col2, 优化器会尝试利用索引联合优化(详见8.2.1.3, [\"索引联合\n优化\"](https://dev.mysql.com/doc/refman/8.0/en/index-merge-optimization.html)),\n或者尝试去寻找包含最多列, 最大限制的索引, 并利用该索引去抓取列.  \n\n> **If the table has a multiple-column index, any leftmost prefix of the \nindex can be used by the optimizer to look up rows. For example, \nif you have a three-column index on (col1, col2, col3), you have indexed \nsearch capabilities on (col1), (col1, col2), and (col1, col2, col3).**  \n\n**如果表拥有一个联合索引, 任何一个索引的最左前缀都会被优化器用于查找列. 比如, \n如果你创建了一个三列的联合索引包含(col1, col2, col3), 你的索引会生效于(col1),\n(col1, col2), 以及(col1, col2, col3)**  \n\n> **MySQL cannot use the index to perform lookups if the columns do not \nform a leftmost prefix of the index. Suppose that you have the SELECT \nstatements shown here:**  \n\n**如果查询的列不是索引的最左前缀, 那MySQL不会将索引用于执行查询. 假设你有\n下列查询语句:** \n```sql\nSELECT * FROM tbl_name WHERE col1=val1;\nSELECT * FROM tbl_name WHERE col1=val1 AND col2=val2;\n\nSELECT * FROM tbl_name WHERE col2=val2;\nSELECT * FROM tbl_name WHERE col2=val2 AND col3=val3;\n```\n\n> If an index exists on (col1, col2, col3), only the first two queries \nuse the index. The third and fourth queries do involve indexed columns, \nbut do not use an index to perform lookups because (col2) and (col2, col3) \nare not leftmost prefixes of (col1, col2, col3).  \n\n如果索引存在于(col1, col2, col3), 那只有头两个查询语句用到了索引. 第三个和\n第四个查询包含索引的列, 但是不会用索引去执行查询. 因为(col2)和(col2, col3)\n不是(col1, col2, col3)的最左前缀  \n\n## 官方文档小结  \n其实官方文档已经解释的非常详细了, 总结关于最左匹配的解释, 那其实只有这么\n几句话:  \n1.按照文档, 更准确的说法应该是最左前缀原则, 即如果你创建一个联合索引, 那\n这个索引的任何前缀都会用于查询, (col1, col2, col3)这个联合索引的所有前缀\n就是(col1), (col1, col2), (col1, col2, col3), 包含这些列的查询都会启用索\n引查询.   \n2.其他所有不在最左前缀里的列都不会启用索引, 即使包含了联合索引里的部分列\n也不行. 即上述中的(col2), (col3), (col2, col3) 都不会启用索引去查询.  \n**注意, (col1, col3)会启用(col1)的索引查询**  \n\n### 官方文档的其他细节  \n读一下官方文档, 还有很多别的发现, 跟最左前缀无关, 关于联合索引的别的细节, \n总结如下:  \n- 联合索引最多只能包含16列  \n- blob和text也能创建索引, 但是必须指定前面多少位  \n- 官方推荐了一种联合索引的替代方案: 可以额外创建一列, 其列值由联合索引包含\n的所有列值所生成的hash值来构成(个人认为似乎破坏了第一范式的设计规则) ","slug":"tech/官方文档解释MySQL最左匹配(最左前缀)原则","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yr27000vtccfep8a2wqo","layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是最左匹配原则\"><a href=\"#什么是最左匹配原则\" class=\"headerlink\" title=\"什么是最左匹配原则\"></a>什么是最左匹配原则</h2><p>关于最左匹配原则的解释, 网上找了很多, 但是我感觉都不是特别准确, 于是一怒之下<br>直接找了官网的文档, 一下子就清晰了. 下面贴下官网的解释, 然后我自己翻译了一下.  </p>\n<h3 id=\"来自官方文档的解释\"><a href=\"#来自官方文档的解释\" class=\"headerlink\" title=\"来自官方文档的解释\"></a>来自官方文档的解释</h3><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html\">原文链接</a>  </p>\n<blockquote>\n<p>MySQL can create composite indexes (that is, indexes on multiple columns).<br> An index may consist of up to 16 columns. For certain data types,<br> you can index a prefix of the column (see<br> <a href=\"https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html\">Section 8.3.5, “Column Indexes”</a>).  </p>\n</blockquote>\n<p>MySQL可以创建联合索引(即, 多列的索引). 一个索引可以包含最多16列. 对于<br>某些数据类型, 你可以索引列的前缀(这里说的是对于Blob和Text类型, 索引列的前几位就可以,<br>如INDEX(blob_col(10)), 详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html\">索引文档</a>)  </p>\n<blockquote>\n<p>MySQL can use multiple-column indexes for queries that test all the columns in the index,<br>or queries that test just the first column, the first two columns, the first three columns, and so on.<br>If you specify the columns in the right order in the index definition,<br>a single composite index can speed up several kinds of queries on the same table.  </p>\n</blockquote>\n<p>MySQL的联合索引可以用于包含索引中所有列的查询条件的语句, 或者包含索引中的第一列的查询条件的语句,<br>以及索引中前两列, 索引中的前三列, 以此类推. 如果你在索引定义中以正确的顺序指定列,<br>那么联合索引就可以加速同一张表中的多个不同类型的查询.  </p>\n<blockquote>\n<p>A multiple-column index can be considered a sorted array, the rows of<br>which contain values that are created by concatenating the values of the indexed columns.  </p>\n</blockquote>\n<p>一个联合索引可以看作是一个有序队列, 里面有值的列是根据连接索引列的值创建的.(这句可能不准确)  </p>\n<blockquote>\n<p>Note<br>As an alternative to a composite index, you can introduce a column that<br>is “hashed” based on information from other columns. If this column is<br>short, reasonably unique, and indexed, it might be faster than a “wide”<br>index on many columns. In MySQL, it is very easy to use this extra column:  </p>\n</blockquote>\n<p>提示<br>作为联合索引的一个替代项, 你可以采用一个Hash值列, 这个列的Hash值来自其他的列.<br>如果该列简短, 合理唯一, 且被索引, 那该列就可能比一个很”宽”的由多个列构成的索引<br>更快. MySQL里可以很容易的使用这种列:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> hash_col<span class=\"operator\">=</span>MD5(CONCAT(val1,val2))</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<blockquote>\n<p>Suppose that a table has the following specification:</p>\n</blockquote>\n<p>假设有如下表定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test (</span><br><span class=\"line\">    id         <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (id),</span><br><span class=\"line\">    INDEX name (last_name,first_name)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The name index is an index over the last_name and first_name columns.<br>The index can be used for lookups in queries that specify values in a known<br>range for combinations of last_name and first_name values. It can also be used<br>for queries that specify just a last_name value because that column is a<br>leftmost prefix of the index (as described later in this section).<br>Therefore, the name index is used for lookups in the following queries:  </p>\n</blockquote>\n<p>索引name是一个包含了last_name和first_name列的索引. 该索引可以用于为last_name<br>和first_name值的组合指定一个已知范围内的查询. 同样也可以用于只指定了last_name列值的查询,<br>因为这个列是索引的一个最左前缀(就如下一节所说). 因此, 索引name可以用于下列的查询语句:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span> <span class=\"keyword\">AND</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> (first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span> <span class=\"keyword\">OR</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jon&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> first_name <span class=\"operator\">&gt;=</span><span class=\"string\">&#x27;M&#x27;</span> <span class=\"keyword\">AND</span> first_name <span class=\"operator\">&lt;</span> <span class=\"string\">&#x27;N&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>However, the name index is not used for lookups in the following queries:  </p>\n</blockquote>\n<p>然而, 索引name不能用于下列的查询:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span> <span class=\"keyword\">OR</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Suppose that you issue the following SELECT statement:  </p>\n</blockquote>\n<p>假设存在以下select语句:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If a multiple-column index exists on col1 and col2, the appropriate<br>rows can be fetched directly. If separate single-column indexes exist<br>on col1 and col2, the optimizer attempts to use the Index Merge optimization<br>(see Section 8.2.1.3, “Index Merge Optimization”), or attempts to find<br>the most restrictive index by deciding which index excludes more rows<br>and using that index to fetch the rows.  </p>\n</blockquote>\n<p>如果一个联合索引存在于col1和col2, 相应的列会被直接抓取. 如果是分为单独的索引<br>分别存在于col1和col2, 优化器会尝试利用索引联合优化(详见8.2.1.3, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/index-merge-optimization.html\">“索引联合<br>优化”</a>),<br>或者尝试去寻找包含最多列, 最大限制的索引, 并利用该索引去抓取列.  </p>\n<blockquote>\n<p><strong>If the table has a multiple-column index, any leftmost prefix of the<br>index can be used by the optimizer to look up rows. For example,<br>if you have a three-column index on (col1, col2, col3), you have indexed<br>search capabilities on (col1), (col1, col2), and (col1, col2, col3).</strong>  </p>\n</blockquote>\n<p><strong>如果表拥有一个联合索引, 任何一个索引的最左前缀都会被优化器用于查找列. 比如,<br>如果你创建了一个三列的联合索引包含(col1, col2, col3), 你的索引会生效于(col1),<br>(col1, col2), 以及(col1, col2, col3)</strong>  </p>\n<blockquote>\n<p><strong>MySQL cannot use the index to perform lookups if the columns do not<br>form a leftmost prefix of the index. Suppose that you have the SELECT<br>statements shown here:</strong>  </p>\n</blockquote>\n<p><strong>如果查询的列不是索引的最左前缀, 那MySQL不会将索引用于执行查询. 假设你有<br>下列查询语句:</strong> </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col2<span class=\"operator\">=</span>val2;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col2<span class=\"operator\">=</span>val2 <span class=\"keyword\">AND</span> col3<span class=\"operator\">=</span>val3;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If an index exists on (col1, col2, col3), only the first two queries<br>use the index. The third and fourth queries do involve indexed columns,<br>but do not use an index to perform lookups because (col2) and (col2, col3)<br>are not leftmost prefixes of (col1, col2, col3).  </p>\n</blockquote>\n<p>如果索引存在于(col1, col2, col3), 那只有头两个查询语句用到了索引. 第三个和<br>第四个查询包含索引的列, 但是不会用索引去执行查询. 因为(col2)和(col2, col3)<br>不是(col1, col2, col3)的最左前缀  </p>\n<h2 id=\"官方文档小结\"><a href=\"#官方文档小结\" class=\"headerlink\" title=\"官方文档小结\"></a>官方文档小结</h2><p>其实官方文档已经解释的非常详细了, 总结关于最左匹配的解释, 那其实只有这么<br>几句话:<br>1.按照文档, 更准确的说法应该是最左前缀原则, 即如果你创建一个联合索引, 那<br>这个索引的任何前缀都会用于查询, (col1, col2, col3)这个联合索引的所有前缀<br>就是(col1), (col1, col2), (col1, col2, col3), 包含这些列的查询都会启用索<br>引查询.<br>2.其他所有不在最左前缀里的列都不会启用索引, 即使包含了联合索引里的部分列<br>也不行. 即上述中的(col2), (col3), (col2, col3) 都不会启用索引去查询.<br><strong>注意, (col1, col3)会启用(col1)的索引查询</strong>  </p>\n<h3 id=\"官方文档的其他细节\"><a href=\"#官方文档的其他细节\" class=\"headerlink\" title=\"官方文档的其他细节\"></a>官方文档的其他细节</h3><p>读一下官方文档, 还有很多别的发现, 跟最左前缀无关, 关于联合索引的别的细节,<br>总结如下:  </p>\n<ul>\n<li>联合索引最多只能包含16列  </li>\n<li>blob和text也能创建索引, 但是必须指定前面多少位  </li>\n<li>官方推荐了一种联合索引的替代方案: 可以额外创建一列, 其列值由联合索引包含<br>的所有列值所生成的hash值来构成(个人认为似乎破坏了第一范式的设计规则) </li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"什么是最左匹配原则\"><a href=\"#什么是最左匹配原则\" class=\"headerlink\" title=\"什么是最左匹配原则\"></a>什么是最左匹配原则</h2><p>关于最左匹配原则的解释, 网上找了很多, 但是我感觉都不是特别准确, 于是一怒之下<br>直接找了官网的文档, 一下子就清晰了. 下面贴下官网的解释, 然后我自己翻译了一下.  </p>\n<h3 id=\"来自官方文档的解释\"><a href=\"#来自官方文档的解释\" class=\"headerlink\" title=\"来自官方文档的解释\"></a>来自官方文档的解释</h3><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html\">原文链接</a>  </p>\n<blockquote>\n<p>MySQL can create composite indexes (that is, indexes on multiple columns).<br> An index may consist of up to 16 columns. For certain data types,<br> you can index a prefix of the column (see<br> <a href=\"https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html\">Section 8.3.5, “Column Indexes”</a>).  </p>\n</blockquote>\n<p>MySQL可以创建联合索引(即, 多列的索引). 一个索引可以包含最多16列. 对于<br>某些数据类型, 你可以索引列的前缀(这里说的是对于Blob和Text类型, 索引列的前几位就可以,<br>如INDEX(blob_col(10)), 详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html\">索引文档</a>)  </p>\n<blockquote>\n<p>MySQL can use multiple-column indexes for queries that test all the columns in the index,<br>or queries that test just the first column, the first two columns, the first three columns, and so on.<br>If you specify the columns in the right order in the index definition,<br>a single composite index can speed up several kinds of queries on the same table.  </p>\n</blockquote>\n<p>MySQL的联合索引可以用于包含索引中所有列的查询条件的语句, 或者包含索引中的第一列的查询条件的语句,<br>以及索引中前两列, 索引中的前三列, 以此类推. 如果你在索引定义中以正确的顺序指定列,<br>那么联合索引就可以加速同一张表中的多个不同类型的查询.  </p>\n<blockquote>\n<p>A multiple-column index can be considered a sorted array, the rows of<br>which contain values that are created by concatenating the values of the indexed columns.  </p>\n</blockquote>\n<p>一个联合索引可以看作是一个有序队列, 里面有值的列是根据连接索引列的值创建的.(这句可能不准确)  </p>\n<blockquote>\n<p>Note<br>As an alternative to a composite index, you can introduce a column that<br>is “hashed” based on information from other columns. If this column is<br>short, reasonably unique, and indexed, it might be faster than a “wide”<br>index on many columns. In MySQL, it is very easy to use this extra column:  </p>\n</blockquote>\n<p>提示<br>作为联合索引的一个替代项, 你可以采用一个Hash值列, 这个列的Hash值来自其他的列.<br>如果该列简短, 合理唯一, 且被索引, 那该列就可能比一个很”宽”的由多个列构成的索引<br>更快. MySQL里可以很容易的使用这种列:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> hash_col<span class=\"operator\">=</span>MD5(CONCAT(val1,val2))</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>Suppose that a table has the following specification:</p>\n</blockquote>\n<p>假设有如下表定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test (</span><br><span class=\"line\">    id         <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    last_name  <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    first_name <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (id),</span><br><span class=\"line\">    INDEX name (last_name,first_name)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The name index is an index over the last_name and first_name columns.<br>The index can be used for lookups in queries that specify values in a known<br>range for combinations of last_name and first_name values. It can also be used<br>for queries that specify just a last_name value because that column is a<br>leftmost prefix of the index (as described later in this section).<br>Therefore, the name index is used for lookups in the following queries:  </p>\n</blockquote>\n<p>索引name是一个包含了last_name和first_name列的索引. 该索引可以用于为last_name<br>和first_name值的组合指定一个已知范围内的查询. 同样也可以用于只指定了last_name列值的查询,<br>因为这个列是索引的一个最左前缀(就如下一节所说). 因此, 索引name可以用于下列的查询语句:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span> <span class=\"keyword\">AND</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> (first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span> <span class=\"keyword\">OR</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jon&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> first_name <span class=\"operator\">&gt;=</span><span class=\"string\">&#x27;M&#x27;</span> <span class=\"keyword\">AND</span> first_name <span class=\"operator\">&lt;</span> <span class=\"string\">&#x27;N&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>However, the name index is not used for lookups in the following queries:  </p>\n</blockquote>\n<p>然而, 索引name不能用于下列的查询:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Jones&#x27;</span> <span class=\"keyword\">OR</span> first_name<span class=\"operator\">=</span><span class=\"string\">&#x27;John&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Suppose that you issue the following SELECT statement:  </p>\n</blockquote>\n<p>假设存在以下select语句:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If a multiple-column index exists on col1 and col2, the appropriate<br>rows can be fetched directly. If separate single-column indexes exist<br>on col1 and col2, the optimizer attempts to use the Index Merge optimization<br>(see Section 8.2.1.3, “Index Merge Optimization”), or attempts to find<br>the most restrictive index by deciding which index excludes more rows<br>and using that index to fetch the rows.  </p>\n</blockquote>\n<p>如果一个联合索引存在于col1和col2, 相应的列会被直接抓取. 如果是分为单独的索引<br>分别存在于col1和col2, 优化器会尝试利用索引联合优化(详见8.2.1.3, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/index-merge-optimization.html\">“索引联合<br>优化”</a>),<br>或者尝试去寻找包含最多列, 最大限制的索引, 并利用该索引去抓取列.  </p>\n<blockquote>\n<p><strong>If the table has a multiple-column index, any leftmost prefix of the<br>index can be used by the optimizer to look up rows. For example,<br>if you have a three-column index on (col1, col2, col3), you have indexed<br>search capabilities on (col1), (col1, col2), and (col1, col2, col3).</strong>  </p>\n</blockquote>\n<p><strong>如果表拥有一个联合索引, 任何一个索引的最左前缀都会被优化器用于查找列. 比如,<br>如果你创建了一个三列的联合索引包含(col1, col2, col3), 你的索引会生效于(col1),<br>(col1, col2), 以及(col1, col2, col3)</strong>  </p>\n<blockquote>\n<p><strong>MySQL cannot use the index to perform lookups if the columns do not<br>form a leftmost prefix of the index. Suppose that you have the SELECT<br>statements shown here:</strong>  </p>\n</blockquote>\n<p><strong>如果查询的列不是索引的最左前缀, 那MySQL不会将索引用于执行查询. 假设你有<br>下列查询语句:</strong> </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col1<span class=\"operator\">=</span>val1 <span class=\"keyword\">AND</span> col2<span class=\"operator\">=</span>val2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col2<span class=\"operator\">=</span>val2;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> tbl_name <span class=\"keyword\">WHERE</span> col2<span class=\"operator\">=</span>val2 <span class=\"keyword\">AND</span> col3<span class=\"operator\">=</span>val3;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If an index exists on (col1, col2, col3), only the first two queries<br>use the index. The third and fourth queries do involve indexed columns,<br>but do not use an index to perform lookups because (col2) and (col2, col3)<br>are not leftmost prefixes of (col1, col2, col3).  </p>\n</blockquote>\n<p>如果索引存在于(col1, col2, col3), 那只有头两个查询语句用到了索引. 第三个和<br>第四个查询包含索引的列, 但是不会用索引去执行查询. 因为(col2)和(col2, col3)<br>不是(col1, col2, col3)的最左前缀  </p>\n<h2 id=\"官方文档小结\"><a href=\"#官方文档小结\" class=\"headerlink\" title=\"官方文档小结\"></a>官方文档小结</h2><p>其实官方文档已经解释的非常详细了, 总结关于最左匹配的解释, 那其实只有这么<br>几句话:<br>1.按照文档, 更准确的说法应该是最左前缀原则, 即如果你创建一个联合索引, 那<br>这个索引的任何前缀都会用于查询, (col1, col2, col3)这个联合索引的所有前缀<br>就是(col1), (col1, col2), (col1, col2, col3), 包含这些列的查询都会启用索<br>引查询.<br>2.其他所有不在最左前缀里的列都不会启用索引, 即使包含了联合索引里的部分列<br>也不行. 即上述中的(col2), (col3), (col2, col3) 都不会启用索引去查询.<br><strong>注意, (col1, col3)会启用(col1)的索引查询</strong>  </p>\n<h3 id=\"官方文档的其他细节\"><a href=\"#官方文档的其他细节\" class=\"headerlink\" title=\"官方文档的其他细节\"></a>官方文档的其他细节</h3><p>读一下官方文档, 还有很多别的发现, 跟最左前缀无关, 关于联合索引的别的细节,<br>总结如下:  </p>\n<ul>\n<li>联合索引最多只能包含16列  </li>\n<li>blob和text也能创建索引, 但是必须指定前面多少位  </li>\n<li>官方推荐了一种联合索引的替代方案: 可以额外创建一列, 其列值由联合索引包含<br>的所有列值所生成的hash值来构成(个人认为似乎破坏了第一范式的设计规则) </li>\n</ul>"},{"title":"搭建新项目的框架","date":"2019-10-22T01:37:48.000Z","comments":1,"_content":"\n- [x] 基础架构：Spring Boot / Spring Cloud\n- [x] 数据库：MySQL / Oracle\n- [x] 数据库层连接：Hibernate / Mybatis / JPA\n- [x] 分页\n- [x] 日志：Log4j / Slf4J\n- [x] 数据库连接池：Druid\n- [x] 消息中间件：Dubbo / Grpc\n- [ ] 缓存：Redis\n- [x] 权限：Spring Security / Shiro\n- [x] 包管理仓库：Maven / Gradle\n- [ ] 统一日志记录-数据库层面\n- [x] JSON处理：FastJSON\n- [x] 统一返回结果处理\n- [x] Zookeeper\n- [ ] MQ组件：RabbitMQ / RocketMQ / Kafka\n- [x] 统一Exception处理\n- [x] 公用Util类\n- [x] 测试用例：JUnit\n- [ ] 集群\n\n\n\n\n\n","source":"_posts/tech/搭建新项目的框架.md","raw":"---\ntitle: 搭建新项目的框架\ndate: 2019-10-22 09:37:48\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n\n- [x] 基础架构：Spring Boot / Spring Cloud\n- [x] 数据库：MySQL / Oracle\n- [x] 数据库层连接：Hibernate / Mybatis / JPA\n- [x] 分页\n- [x] 日志：Log4j / Slf4J\n- [x] 数据库连接池：Druid\n- [x] 消息中间件：Dubbo / Grpc\n- [ ] 缓存：Redis\n- [x] 权限：Spring Security / Shiro\n- [x] 包管理仓库：Maven / Gradle\n- [ ] 统一日志记录-数据库层面\n- [x] JSON处理：FastJSON\n- [x] 统一返回结果处理\n- [x] Zookeeper\n- [ ] MQ组件：RabbitMQ / RocketMQ / Kafka\n- [x] 统一Exception处理\n- [x] 公用Util类\n- [x] 测试用例：JUnit\n- [ ] 集群\n\n\n\n\n\n","slug":"tech/搭建新项目的框架","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yr8e0010tccfg7dn4n70","layout":"post","photos":[],"link":"","content":"<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 基础架构：Spring Boot / Spring Cloud</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库：MySQL / Oracle</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库层连接：Hibernate / Mybatis / JPA</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 分页</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 日志：Log4j / Slf4J</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库连接池：Druid</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 消息中间件：Dubbo / Grpc</li>\n<li><input disabled=\"\" type=\"checkbox\"> 缓存：Redis</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 权限：Spring Security / Shiro</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 包管理仓库：Maven / Gradle</li>\n<li><input disabled=\"\" type=\"checkbox\"> 统一日志记录-数据库层面</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> JSON处理：FastJSON</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 统一返回结果处理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Zookeeper</li>\n<li><input disabled=\"\" type=\"checkbox\"> MQ组件：RabbitMQ / RocketMQ / Kafka</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 统一Exception处理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 公用Util类</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 测试用例：JUnit</li>\n<li><input disabled=\"\" type=\"checkbox\"> 集群</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 基础架构：Spring Boot / Spring Cloud</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库：MySQL / Oracle</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库层连接：Hibernate / Mybatis / JPA</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 分页</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 日志：Log4j / Slf4J</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库连接池：Druid</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 消息中间件：Dubbo / Grpc</li>\n<li><input disabled=\"\" type=\"checkbox\"> 缓存：Redis</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 权限：Spring Security / Shiro</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 包管理仓库：Maven / Gradle</li>\n<li><input disabled=\"\" type=\"checkbox\"> 统一日志记录-数据库层面</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> JSON处理：FastJSON</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 统一返回结果处理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Zookeeper</li>\n<li><input disabled=\"\" type=\"checkbox\"> MQ组件：RabbitMQ / RocketMQ / Kafka</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 统一Exception处理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 公用Util类</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 测试用例：JUnit</li>\n<li><input disabled=\"\" type=\"checkbox\"> 集群</li>\n</ul>\n"},{"title":"用curl计算网络请求的时间","date":"2021-11-29T01:51:08.000Z","comments":1,"_content":"**声明**\n\n翻译自[Timing With Curl](https://susam.in/maze/timing-with-curl.html)\n\n---\n\n当一个http请求花费了太长时间的时候，我经常用下面的命令来查找原因。\n```shell\ncurl -L -w \"time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n\" https://example.com/\n```\n下面是用一条指令来实现的同样的命令，我可以在未来用到的时候，在这个页面通过三次点击快速复制。\n```shell\ncurl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" https://example.com/\n```\n这个命令输入之后，一般能看到以下输出：\n```shell\n$ curl -L -w \"namelookup: %{time_namelookup}\\nconnect: %{time_connect}\\nappconnect: %{time_appconnect}\\npretransfer: %{time_pretransfer}\\nstarttransfer: %{time_starttransfer}\\ntotal: %{time_total}\\n\" https://example.com/\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n...\n</html>\ntime_namelookup: 0.001403\ntime_connect: 0.245464\ntime_appconnect: 0.757656\ntime_pretransfer: 0.757823\ntime_redirect: 0.000000\ntime_starttransfer: 0.982111\ntime_total: 0.982326\n```\n为了简洁起见，在上面的输出中，我用省略号忽略了大部分的html部分的输出。\n下面的列表描述了输出中每一个数字的含义。这些信息直接取自curl 7.20.0版本的手册。以下是详情：\n\n- *time_namelookup*: 以秒为单位，表示从命令开始到域名被解析完成所需时间。\n- *time_connect*: 以秒为单位，表示从命令开始到TCP请求完成连接到远程端口（或代理）所需时间。\n- *time_appconnect*: 以秒为单位，表示从命令开始到SSL／SSH等请求完成到远程端口的连接／握手所需时间。（7.19.0版本后加入）\n- *time_pretransfer*: 以秒为单位，表示从命令开始到文件传输开始所需时间。这包括所有的预传输命令和协议。包含所有涉及到特定协议的预传输指令和谈判（？）。\n- *time_redirect*: 以秒为单位，包括所有的重定向步骤，从域名检索，连接，预传输以及在最后交换数据开始之前的传输所需时间。time_redirect展示了多个重定向请求的完整执行时间。（7.12.3版本后加入）\n- *time_starttransfer*: 以秒为单位，表示从命令开始到第一个字节被传输所属时间。这包含了*time_pretransfer*，以及服务器计算结果所属的时间。\n- *time_total*: 以秒为单位，表示整个操作持续到最后所需的总时间。这个时间会精确到毫秒进行展现。\n\n一个没啥用的关键细节是，*time_appconnect*和*time_connect*之间的时间差可以告诉我们SSL／TLS握手所需时间。对于一个没有SSL／TLS的干净连接，这个时间会显示为0。下面的输出证明了这件事：\n```shell\n$ curl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" http://example.com/\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n...\n</html>\ntime_namelookup: 0.001507\ntime_connect: 0.247032\ntime_appconnect: 0.000000\ntime_pretransfer: 0.247122\ntime_redirect: 0.000000\ntime_starttransfer: 0.512645\ntime_total: 0.512853\n```\n\n同样注意*time_redirect*在上面的输出中也是0。这是因为访问example.com的时候，没有重定向发生。以下是另一个例子，展示了当重定向发生时输出会是什么样子：\n```shell\n$ curl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" https://susam.in/blog\n<!DOCTYPE HTML>\n<html>\n...\n</html>\ntime_namelookup: 0.001886\ntime_connect: 0.152445\ntime_appconnect: 0.465326\ntime_pretransfer: 0.465413\ntime_redirect: 0.614289\ntime_starttransfer: 0.763997\ntime_total: 0.765413\n```\n\n当网络服务遭遇一个潜在的延迟事件时，我会在多个客户端优先使用这条命令，因为这个命令返回的结果帮助我快速找到网络延迟的原因。\n","source":"_posts/tech/用curl计时.md","raw":"---\ntitle: 用curl计算网络请求的时间\ndate: 2021-11-29 09:51:08\ntags: \n- linux\n- translate\ncomments: true\ncategories: \n- 学习\n---\n**声明**\n\n翻译自[Timing With Curl](https://susam.in/maze/timing-with-curl.html)\n\n---\n\n当一个http请求花费了太长时间的时候，我经常用下面的命令来查找原因。\n```shell\ncurl -L -w \"time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n\" https://example.com/\n```\n下面是用一条指令来实现的同样的命令，我可以在未来用到的时候，在这个页面通过三次点击快速复制。\n```shell\ncurl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" https://example.com/\n```\n这个命令输入之后，一般能看到以下输出：\n```shell\n$ curl -L -w \"namelookup: %{time_namelookup}\\nconnect: %{time_connect}\\nappconnect: %{time_appconnect}\\npretransfer: %{time_pretransfer}\\nstarttransfer: %{time_starttransfer}\\ntotal: %{time_total}\\n\" https://example.com/\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n...\n</html>\ntime_namelookup: 0.001403\ntime_connect: 0.245464\ntime_appconnect: 0.757656\ntime_pretransfer: 0.757823\ntime_redirect: 0.000000\ntime_starttransfer: 0.982111\ntime_total: 0.982326\n```\n为了简洁起见，在上面的输出中，我用省略号忽略了大部分的html部分的输出。\n下面的列表描述了输出中每一个数字的含义。这些信息直接取自curl 7.20.0版本的手册。以下是详情：\n\n- *time_namelookup*: 以秒为单位，表示从命令开始到域名被解析完成所需时间。\n- *time_connect*: 以秒为单位，表示从命令开始到TCP请求完成连接到远程端口（或代理）所需时间。\n- *time_appconnect*: 以秒为单位，表示从命令开始到SSL／SSH等请求完成到远程端口的连接／握手所需时间。（7.19.0版本后加入）\n- *time_pretransfer*: 以秒为单位，表示从命令开始到文件传输开始所需时间。这包括所有的预传输命令和协议。包含所有涉及到特定协议的预传输指令和谈判（？）。\n- *time_redirect*: 以秒为单位，包括所有的重定向步骤，从域名检索，连接，预传输以及在最后交换数据开始之前的传输所需时间。time_redirect展示了多个重定向请求的完整执行时间。（7.12.3版本后加入）\n- *time_starttransfer*: 以秒为单位，表示从命令开始到第一个字节被传输所属时间。这包含了*time_pretransfer*，以及服务器计算结果所属的时间。\n- *time_total*: 以秒为单位，表示整个操作持续到最后所需的总时间。这个时间会精确到毫秒进行展现。\n\n一个没啥用的关键细节是，*time_appconnect*和*time_connect*之间的时间差可以告诉我们SSL／TLS握手所需时间。对于一个没有SSL／TLS的干净连接，这个时间会显示为0。下面的输出证明了这件事：\n```shell\n$ curl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" http://example.com/\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n...\n</html>\ntime_namelookup: 0.001507\ntime_connect: 0.247032\ntime_appconnect: 0.000000\ntime_pretransfer: 0.247122\ntime_redirect: 0.000000\ntime_starttransfer: 0.512645\ntime_total: 0.512853\n```\n\n同样注意*time_redirect*在上面的输出中也是0。这是因为访问example.com的时候，没有重定向发生。以下是另一个例子，展示了当重定向发生时输出会是什么样子：\n```shell\n$ curl -L -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_redirect: %{time_redirect}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" https://susam.in/blog\n<!DOCTYPE HTML>\n<html>\n...\n</html>\ntime_namelookup: 0.001886\ntime_connect: 0.152445\ntime_appconnect: 0.465326\ntime_pretransfer: 0.465413\ntime_redirect: 0.614289\ntime_starttransfer: 0.763997\ntime_total: 0.765413\n```\n\n当网络服务遭遇一个潜在的延迟事件时，我会在多个客户端优先使用这条命令，因为这个命令返回的结果帮助我快速找到网络延迟的原因。\n","slug":"tech/用curl计时","published":1,"updated":"2021-11-29T02:50:49.000Z","_id":"cl102yrep0013tccfha3wbwfy","layout":"post","photos":[],"link":"","content":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://susam.in/maze/timing-with-curl.html\">Timing With Curl</a></p>\n<hr>\n<p>当一个http请求花费了太长时间的时候，我经常用下面的命令来查找原因。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -w &quot;time_namelookup: %&#123;time_namelookup&#125;</span><br><span class=\"line\">time_connect: %&#123;time_connect&#125;</span><br><span class=\"line\">time_appconnect: %&#123;time_appconnect&#125;</span><br><span class=\"line\">time_pretransfer: %&#123;time_pretransfer&#125;</span><br><span class=\"line\">time_redirect: %&#123;time_redirect&#125;</span><br><span class=\"line\">time_starttransfer: %&#123;time_starttransfer&#125;</span><br><span class=\"line\">time_total: %&#123;time_total&#125;</span><br><span class=\"line\">&quot; https://example.com/</span><br></pre></td></tr></table></figure>\n<p>下面是用一条指令来实现的同样的命令，我可以在未来用到的时候，在这个页面通过三次点击快速复制。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -w &quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot; https://example.com/</span><br></pre></td></tr></table></figure>\n<p>这个命令输入之后，一般能看到以下输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;namelookup: %&#123;time_namelookup&#125;\\nconnect: %&#123;time_connect&#125;\\nappconnect: %&#123;time_appconnect&#125;\\npretransfer: %&#123;time_pretransfer&#125;\\nstarttransfer: %&#123;time_starttransfer&#125;\\ntotal: %&#123;time_total&#125;\\n&quot;</span> https://example.com/</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001403</span><br><span class=\"line\">time_connect: 0.245464</span><br><span class=\"line\">time_appconnect: 0.757656</span><br><span class=\"line\">time_pretransfer: 0.757823</span><br><span class=\"line\">time_redirect: 0.000000</span><br><span class=\"line\">time_starttransfer: 0.982111</span><br><span class=\"line\">time_total: 0.982326</span><br></pre></td></tr></table></figure>\n<p>为了简洁起见，在上面的输出中，我用省略号忽略了大部分的html部分的输出。<br>下面的列表描述了输出中每一个数字的含义。这些信息直接取自curl 7.20.0版本的手册。以下是详情：</p>\n<ul>\n<li><em>time_namelookup</em>: 以秒为单位，表示从命令开始到域名被解析完成所需时间。</li>\n<li><em>time_connect</em>: 以秒为单位，表示从命令开始到TCP请求完成连接到远程端口（或代理）所需时间。</li>\n<li><em>time_appconnect</em>: 以秒为单位，表示从命令开始到SSL／SSH等请求完成到远程端口的连接／握手所需时间。（7.19.0版本后加入）</li>\n<li><em>time_pretransfer</em>: 以秒为单位，表示从命令开始到文件传输开始所需时间。这包括所有的预传输命令和协议。包含所有涉及到特定协议的预传输指令和谈判（？）。</li>\n<li><em>time_redirect</em>: 以秒为单位，包括所有的重定向步骤，从域名检索，连接，预传输以及在最后交换数据开始之前的传输所需时间。time_redirect展示了多个重定向请求的完整执行时间。（7.12.3版本后加入）</li>\n<li><em>time_starttransfer</em>: 以秒为单位，表示从命令开始到第一个字节被传输所属时间。这包含了<em>time_pretransfer</em>，以及服务器计算结果所属的时间。</li>\n<li><em>time_total</em>: 以秒为单位，表示整个操作持续到最后所需的总时间。这个时间会精确到毫秒进行展现。</li>\n</ul>\n<p>一个没啥用的关键细节是，<em>time_appconnect</em>和<em>time_connect</em>之间的时间差可以告诉我们SSL／TLS握手所需时间。对于一个没有SSL／TLS的干净连接，这个时间会显示为0。下面的输出证明了这件事：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot;</span> http://example.com/</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001507</span><br><span class=\"line\">time_connect: 0.247032</span><br><span class=\"line\">time_appconnect: 0.000000</span><br><span class=\"line\">time_pretransfer: 0.247122</span><br><span class=\"line\">time_redirect: 0.000000</span><br><span class=\"line\">time_starttransfer: 0.512645</span><br><span class=\"line\">time_total: 0.512853</span><br></pre></td></tr></table></figure>\n\n<p>同样注意<em>time_redirect</em>在上面的输出中也是0。这是因为访问example.com的时候，没有重定向发生。以下是另一个例子，展示了当重定向发生时输出会是什么样子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot;</span> https://susam.in/blog</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001886</span><br><span class=\"line\">time_connect: 0.152445</span><br><span class=\"line\">time_appconnect: 0.465326</span><br><span class=\"line\">time_pretransfer: 0.465413</span><br><span class=\"line\">time_redirect: 0.614289</span><br><span class=\"line\">time_starttransfer: 0.763997</span><br><span class=\"line\">time_total: 0.765413</span><br></pre></td></tr></table></figure>\n\n<p>当网络服务遭遇一个潜在的延迟事件时，我会在多个客户端优先使用这条命令，因为这个命令返回的结果帮助我快速找到网络延迟的原因。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://susam.in/maze/timing-with-curl.html\">Timing With Curl</a></p>\n<hr>\n<p>当一个http请求花费了太长时间的时候，我经常用下面的命令来查找原因。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -w &quot;time_namelookup: %&#123;time_namelookup&#125;</span><br><span class=\"line\">time_connect: %&#123;time_connect&#125;</span><br><span class=\"line\">time_appconnect: %&#123;time_appconnect&#125;</span><br><span class=\"line\">time_pretransfer: %&#123;time_pretransfer&#125;</span><br><span class=\"line\">time_redirect: %&#123;time_redirect&#125;</span><br><span class=\"line\">time_starttransfer: %&#123;time_starttransfer&#125;</span><br><span class=\"line\">time_total: %&#123;time_total&#125;</span><br><span class=\"line\">&quot; https://example.com/</span><br></pre></td></tr></table></figure>\n<p>下面是用一条指令来实现的同样的命令，我可以在未来用到的时候，在这个页面通过三次点击快速复制。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -w &quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot; https://example.com/</span><br></pre></td></tr></table></figure>\n<p>这个命令输入之后，一般能看到以下输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;namelookup: %&#123;time_namelookup&#125;\\nconnect: %&#123;time_connect&#125;\\nappconnect: %&#123;time_appconnect&#125;\\npretransfer: %&#123;time_pretransfer&#125;\\nstarttransfer: %&#123;time_starttransfer&#125;\\ntotal: %&#123;time_total&#125;\\n&quot;</span> https://example.com/</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001403</span><br><span class=\"line\">time_connect: 0.245464</span><br><span class=\"line\">time_appconnect: 0.757656</span><br><span class=\"line\">time_pretransfer: 0.757823</span><br><span class=\"line\">time_redirect: 0.000000</span><br><span class=\"line\">time_starttransfer: 0.982111</span><br><span class=\"line\">time_total: 0.982326</span><br></pre></td></tr></table></figure>\n<p>为了简洁起见，在上面的输出中，我用省略号忽略了大部分的html部分的输出。<br>下面的列表描述了输出中每一个数字的含义。这些信息直接取自curl 7.20.0版本的手册。以下是详情：</p>\n<ul>\n<li><em>time_namelookup</em>: 以秒为单位，表示从命令开始到域名被解析完成所需时间。</li>\n<li><em>time_connect</em>: 以秒为单位，表示从命令开始到TCP请求完成连接到远程端口（或代理）所需时间。</li>\n<li><em>time_appconnect</em>: 以秒为单位，表示从命令开始到SSL／SSH等请求完成到远程端口的连接／握手所需时间。（7.19.0版本后加入）</li>\n<li><em>time_pretransfer</em>: 以秒为单位，表示从命令开始到文件传输开始所需时间。这包括所有的预传输命令和协议。包含所有涉及到特定协议的预传输指令和谈判（？）。</li>\n<li><em>time_redirect</em>: 以秒为单位，包括所有的重定向步骤，从域名检索，连接，预传输以及在最后交换数据开始之前的传输所需时间。time_redirect展示了多个重定向请求的完整执行时间。（7.12.3版本后加入）</li>\n<li><em>time_starttransfer</em>: 以秒为单位，表示从命令开始到第一个字节被传输所属时间。这包含了<em>time_pretransfer</em>，以及服务器计算结果所属的时间。</li>\n<li><em>time_total</em>: 以秒为单位，表示整个操作持续到最后所需的总时间。这个时间会精确到毫秒进行展现。</li>\n</ul>\n<p>一个没啥用的关键细节是，<em>time_appconnect</em>和<em>time_connect</em>之间的时间差可以告诉我们SSL／TLS握手所需时间。对于一个没有SSL／TLS的干净连接，这个时间会显示为0。下面的输出证明了这件事：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot;</span> http://example.com/</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001507</span><br><span class=\"line\">time_connect: 0.247032</span><br><span class=\"line\">time_appconnect: 0.000000</span><br><span class=\"line\">time_pretransfer: 0.247122</span><br><span class=\"line\">time_redirect: 0.000000</span><br><span class=\"line\">time_starttransfer: 0.512645</span><br><span class=\"line\">time_total: 0.512853</span><br></pre></td></tr></table></figure>\n\n<p>同样注意<em>time_redirect</em>在上面的输出中也是0。这是因为访问example.com的时候，没有重定向发生。以下是另一个例子，展示了当重定向发生时输出会是什么样子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L -w <span class=\"string\">&quot;time_namelookup: %&#123;time_namelookup&#125;\\ntime_connect: %&#123;time_connect&#125;\\ntime_appconnect: %&#123;time_appconnect&#125;\\ntime_pretransfer: %&#123;time_pretransfer&#125;\\ntime_redirect: %&#123;time_redirect&#125;\\ntime_starttransfer: %&#123;time_starttransfer&#125;\\ntime_total: %&#123;time_total&#125;\\n&quot;</span> https://susam.in/blog</span></span><br><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">time_namelookup: 0.001886</span><br><span class=\"line\">time_connect: 0.152445</span><br><span class=\"line\">time_appconnect: 0.465326</span><br><span class=\"line\">time_pretransfer: 0.465413</span><br><span class=\"line\">time_redirect: 0.614289</span><br><span class=\"line\">time_starttransfer: 0.763997</span><br><span class=\"line\">time_total: 0.765413</span><br></pre></td></tr></table></figure>\n\n<p>当网络服务遭遇一个潜在的延迟事件时，我会在多个客户端优先使用这条命令，因为这个命令返回的结果帮助我快速找到网络延迟的原因。</p>\n"},{"title":"用ssh加密文件","date":"2021-12-06T07:40:05.000Z","comments":1,"_content":"**声明**\n\n翻译自[Andrew Ayer博客](https://www.agwa.name/blog/post/ssh_signatures)\n翻译水平不佳，自己学习使用\n---\n\n## 现在可以使用SSH密钥给任意数据加密\n\n你知道吗，你可以使用ssh-keygen命令加密和验证任意数据，比如文件和发行软件？尽管这个特性并不是特别新（在2019年随着OpenSSH 8.0发布），依然很少有人知道。\n这就有点尴尬，因为这个功能非常有用而且可以作为PGP的有效替换用以加密数据。如果你现在在用PGP加密数据，你可以考虑转到SSH签名上。\n\n以下是我喜欢用SSH签名的原因：\n- **不是PGP。** 多年来，安全专家已经[对PGP做出了警告](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html)，包括其最重要的组件GnuPG/GPG。\nPGP太复杂了，用户体验非常糟糕，而且充斥着门槛很高的粗糙老旧的密码学原理，\n- **SSH无处不在，而且用户早就有SSH密钥了。** 如果你用的是 Debian Bullseye 或者 Ubuntu 20.04以及更新的版本，你已经有了足够的SSH安装版本。如果你有用Github，\n或者任何其他的借助SSH命令来验证的服务，你也早就有了一个SSH密钥用于创建签名了。这就是为什么我对SSH签名更热衷，而不是其他PGP的替代品，比如[signify](https://github.com/aperezdc/signify) 或者 \n[minisign](https://jedisct1.github.io/minisign/)。后两者很优秀，但是需要你安装新的软件和创建一个新的密钥，这就会阻碍更大范围的兼容性。\n- **SSH密钥很容易分配。** SSH公钥只用一行代码就可以轻松到处复制。你不需要网络白名单或者费心去配置密钥的\"信任等级\"。Github作为一个密钥分配服务早就演示过，比起原先的\nPGP密钥服务器更加简易也更加安全。你可以通过访问网页https://github.com/USERNAME.keys去检索任意用户的SSH公钥。（比如，我的公钥在[https://github.com/AGWA.keys](https://github.com/AGWA.keys)）\n（这个例子可能不适用于所有的情况，毕竟Github在这里作为一个可信任的第三方，而且你也必须相信他们不会对大众的公钥作假。但是依赖于Github这样的专业安全团队作为可信赖的第三方，应该比几乎不可能用到的PGP的网络白名单更好。\n在实践中，如果你曾经想搞清楚如何审核透明度日志，那第三方的公钥的透明度需要考虑进去。）\n- **SSH有可选的轻量级证书。** SSH证书不是必需的（而且大部分人也用不到），但是证书可以让你的操作更轻松，SSH有一套比X.509简单很多的轻量级证书系统。这使得SSH签名和S/MIME一样是一个好的选项。\n\n## 你现在可以使用SSH给Git提交和标签加签名\n给Git的提交和标签加签名可以帮助你确认你的的仓库在被别人使用的时候，代码未曾被篡改。但是，你必须用PGP或者S/MIME来做到这件事，而我个人从2018年PGP密钥过期后就没在这件事上被困扰过。\n马上在Git 2.34这些都会改变了，这个版本支持了SSH签名。（TODO 咋翻译都不对。。）\n\n## 文件签名\n像这样直接对一个文件进行签名：\n```bash\nssh-keygen -Y sign -f ~/.ssh/id_ed25519 -n file file_to_sign\n```\n需要更改的参数如下：\n- `~/.ssh/id_ed25519`是你私钥的路径。例子里的是你的SSH Ed25519私钥的标准路径。如果你有一个RSA密钥，改为使用id_rsa。\n\n- `file` 参数是\"命名空间\"，用来描述签名的目的，对于一般文件的签名，SSH将其定义为`file`，邮件的签名定义为`email`，Git则使用`git`作为签名。\n如果你的签名用于其他目的，比如一个一般协议，你必须指明你自己的命名空间。这样，你可以避免来自一个单一协议信息的合法签名被移除后，或者附属在不同的协议信息，发起的跨协议攻击。\n如果对于协议签名不使用特定的命名空间，那第一个协议的签名就有可能被视作第二个签名的协议，从而被认为是合法的。\n命名空间可以是随机字符。为了保证全局的命名空间的唯一性，SSH推荐对于你自己的签名使用email作为命名空间的一部分。比如，我会使用类似于`protocolname-v1@agwa.name`的名字作为命名空间。\n\n- `file_to_sign` 是要被签名的文件的路径。\n\n签名会写入一个叫做`file_to_sign.sig`的新文件中，格式如下：\n```bash\n-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg2rirQQddpzEzOZwbtM0LUMmlLG\nkrl2EkDq4CVn/Hw7sAAAAEZmlsZQAAAAAAAAAGc2hhNTEyAAAAUwAAAAtzc2gtZWQyNTUx\nOQAAAEDyjWPjmOdG8HJ8gh1CbM8WDDWoGfm+TTd8Qa8eua9Bt5Cc+43S24i/JqVWmk98qV\nYXoQmOYL4bY8t/q7cSNeMH\n-----END SSH SIGNATURE----- \n```\n如果你指明了文件名，那文件签名会从该标准输入并从该标准写出。\n\n## 签名验证\n签名验证稍微更复杂点。首先你需要创建一个被允许的签名者文件，该文件将邮件地址映射到公钥，类似于这样：\n```bash\nalice@example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINq4q0EHXacxMzmcG7TNC1DJpSxpK5dhJA6uAlZ/x8O7\nalice@example.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCfHGCK5jjI/Oib4vRBLB9rG30A8y/Br9U75rfAYsitwFPFfl/CaTAvfRlW1lIBqOCshLWxGsN+PFiJCiCWzpW4iILkD5X5KcBBYHTq1ojYXb70BrQXQ+QBDcGxqQjcOp/uTq1D9Z82mYq/usI5wdz6f1KNyqM0J6ZwRXMu6u7NZaAwmY7j1fV4DRiYdmIfUDIyEdqX4a1Gan+EMSanVUYDcNmeBURqmTkkOPYSg8g5xYgcXBMOZ+V0ZUjreV9paKraUD/mVDlZbb/VyWhJGT4FLMNXHU6UHC2FFgqANMUKIlL4vhqc23MoygKbfF3HgNB6BNfv3s+GYlaQ3+66jc5j\nbob@example.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBgQuuEvhUXerOTIZ2zoOx60M/HHJ/tcHnD84ZvTiX5b\n```\n一旦你拥有了你的被允许的签名文件，验证的步骤如下：\n```bash\nssh-keygen -Y verify -f allowed_signers -I alice@example.com -n file -s file_to_verify.sig < file_to_verify\n```\n你需要修改如下参数：\n- `allowed_signers` 是被允许的签名者文件的路径。\n- `alice@example.com` 是对文件加签名的用户邮件地址。该邮件地址会在允许的签名者文件里进行查找到对应的公钥。\n- `file` 是\"命名空间\"，该参数必须匹配前文描述的签名中的命名空间。\n- `file_to_verify.sig` 是签名文件的路径。\n- `file_to_verify` 是被验证的文件的路径。注意该文件是从标准读入的。在前面的命令中，`<`这个shell操作符用于重定向标准到该文件。\n\n如果签名是有效的，命令行会返回状态0并打印如下信息：\n```bash\nGood \"file\" signature for alice@example.com with ED25519 key SHA256:ZGa8RztddW4kE2XKPPsP9ZYC7JnMObs6yZzyxg8xZSk\n```\n否则，命令行会返回非0状态并打印错误信息。\n\n## SSH密钥的复用安全吗？\n\n简单来说：安全。\n\n对一个不同协议总是要小心的对密钥进行复用。如果不注意的话，有可能导致跨协议攻击的风险。比如，当一个Git签名信息的结构和SSH协议信息的结构相似，攻击者就可以通过SSH副本挪用签名，并伪造一个Git的人工提交。\n\n幸运的是，SSH协议信息的结构和ssh-keygen签名信息的结构并不相似，因此并没有这方面风险的担忧。\n\n为了证明这点，我们可以参考这篇[RFC 4252 section 7](https://datatracker.ietf.org/doc/html/rfc4252#section-7)，阐明了SSH密钥是如何在传统用途上通过SSH验证用户登录服务器。\nRFC指出输入的签名语法拥有如下结构：\n```bash\nstring    session identifier\nbyte      SSH_MSG_USERAUTH_REQUEST\nstring    user name\nstring    service name\nstring    \"publickey\"\nboolean   TRUE\nstring    public key algorithm name\nstring    public key to be used for authentication\n```\n第一个字段是会话标识，是个字符串。在SSH协议中，字符串的前缀由一个[32位字符](https://datatracker.ietf.org/doc/html/rfc4251#section-5)构成。会话标识是一个[hash](https://datatracker.ietf.org/doc/html/rfc4253#section-7.2)值。除非hash值很短，否则一般的上述签名的前三位字符都会是0。\n\n同时，[PROTOCOL.sshsig](https://github.com/openssh/openssh-portable/blob/d575cf44895104e0fcb0629920fb645207218129/PROTOCOL.sshsig)分发OpenSSH仓库，表明了如何通过`ssh-keygen-generated`签名使用SSH密钥。以下是输入的签名语法的结构：\n```bash\n#define MAGIC_PREAMBLE \"SSHSIG\"\n\nbyte[6]   MAGIC_PREAMBLE\nstring    namespace\nstring    reserved\nstring    hash_algorithm\nstring    H(message)\n```\n在这里，头三个字节是SSH，来自magic preamble（直译是魔法序言？）。SSH协议签名输入的头三个字节之后就开始和ssh-keygen签名输入不一样，SSH客户端和ssh-keygen不会生成同样的签名。因此，在这里不会有跨协议攻击的风险，我也有绝对的信心使用现存的SSH密钥，通过ssh-keygen来对信息加密。\n","source":"_posts/tech/用ssh加密文件.md","raw":"---\ntitle: 用ssh加密文件\ndate: 2021-12-06 15:40:05\ntags: \n- linux\n- translate\ncomments: true\ncategories: \n- 学习\n---\n**声明**\n\n翻译自[Andrew Ayer博客](https://www.agwa.name/blog/post/ssh_signatures)\n翻译水平不佳，自己学习使用\n---\n\n## 现在可以使用SSH密钥给任意数据加密\n\n你知道吗，你可以使用ssh-keygen命令加密和验证任意数据，比如文件和发行软件？尽管这个特性并不是特别新（在2019年随着OpenSSH 8.0发布），依然很少有人知道。\n这就有点尴尬，因为这个功能非常有用而且可以作为PGP的有效替换用以加密数据。如果你现在在用PGP加密数据，你可以考虑转到SSH签名上。\n\n以下是我喜欢用SSH签名的原因：\n- **不是PGP。** 多年来，安全专家已经[对PGP做出了警告](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html)，包括其最重要的组件GnuPG/GPG。\nPGP太复杂了，用户体验非常糟糕，而且充斥着门槛很高的粗糙老旧的密码学原理，\n- **SSH无处不在，而且用户早就有SSH密钥了。** 如果你用的是 Debian Bullseye 或者 Ubuntu 20.04以及更新的版本，你已经有了足够的SSH安装版本。如果你有用Github，\n或者任何其他的借助SSH命令来验证的服务，你也早就有了一个SSH密钥用于创建签名了。这就是为什么我对SSH签名更热衷，而不是其他PGP的替代品，比如[signify](https://github.com/aperezdc/signify) 或者 \n[minisign](https://jedisct1.github.io/minisign/)。后两者很优秀，但是需要你安装新的软件和创建一个新的密钥，这就会阻碍更大范围的兼容性。\n- **SSH密钥很容易分配。** SSH公钥只用一行代码就可以轻松到处复制。你不需要网络白名单或者费心去配置密钥的\"信任等级\"。Github作为一个密钥分配服务早就演示过，比起原先的\nPGP密钥服务器更加简易也更加安全。你可以通过访问网页https://github.com/USERNAME.keys去检索任意用户的SSH公钥。（比如，我的公钥在[https://github.com/AGWA.keys](https://github.com/AGWA.keys)）\n（这个例子可能不适用于所有的情况，毕竟Github在这里作为一个可信任的第三方，而且你也必须相信他们不会对大众的公钥作假。但是依赖于Github这样的专业安全团队作为可信赖的第三方，应该比几乎不可能用到的PGP的网络白名单更好。\n在实践中，如果你曾经想搞清楚如何审核透明度日志，那第三方的公钥的透明度需要考虑进去。）\n- **SSH有可选的轻量级证书。** SSH证书不是必需的（而且大部分人也用不到），但是证书可以让你的操作更轻松，SSH有一套比X.509简单很多的轻量级证书系统。这使得SSH签名和S/MIME一样是一个好的选项。\n\n## 你现在可以使用SSH给Git提交和标签加签名\n给Git的提交和标签加签名可以帮助你确认你的的仓库在被别人使用的时候，代码未曾被篡改。但是，你必须用PGP或者S/MIME来做到这件事，而我个人从2018年PGP密钥过期后就没在这件事上被困扰过。\n马上在Git 2.34这些都会改变了，这个版本支持了SSH签名。（TODO 咋翻译都不对。。）\n\n## 文件签名\n像这样直接对一个文件进行签名：\n```bash\nssh-keygen -Y sign -f ~/.ssh/id_ed25519 -n file file_to_sign\n```\n需要更改的参数如下：\n- `~/.ssh/id_ed25519`是你私钥的路径。例子里的是你的SSH Ed25519私钥的标准路径。如果你有一个RSA密钥，改为使用id_rsa。\n\n- `file` 参数是\"命名空间\"，用来描述签名的目的，对于一般文件的签名，SSH将其定义为`file`，邮件的签名定义为`email`，Git则使用`git`作为签名。\n如果你的签名用于其他目的，比如一个一般协议，你必须指明你自己的命名空间。这样，你可以避免来自一个单一协议信息的合法签名被移除后，或者附属在不同的协议信息，发起的跨协议攻击。\n如果对于协议签名不使用特定的命名空间，那第一个协议的签名就有可能被视作第二个签名的协议，从而被认为是合法的。\n命名空间可以是随机字符。为了保证全局的命名空间的唯一性，SSH推荐对于你自己的签名使用email作为命名空间的一部分。比如，我会使用类似于`protocolname-v1@agwa.name`的名字作为命名空间。\n\n- `file_to_sign` 是要被签名的文件的路径。\n\n签名会写入一个叫做`file_to_sign.sig`的新文件中，格式如下：\n```bash\n-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg2rirQQddpzEzOZwbtM0LUMmlLG\nkrl2EkDq4CVn/Hw7sAAAAEZmlsZQAAAAAAAAAGc2hhNTEyAAAAUwAAAAtzc2gtZWQyNTUx\nOQAAAEDyjWPjmOdG8HJ8gh1CbM8WDDWoGfm+TTd8Qa8eua9Bt5Cc+43S24i/JqVWmk98qV\nYXoQmOYL4bY8t/q7cSNeMH\n-----END SSH SIGNATURE----- \n```\n如果你指明了文件名，那文件签名会从该标准输入并从该标准写出。\n\n## 签名验证\n签名验证稍微更复杂点。首先你需要创建一个被允许的签名者文件，该文件将邮件地址映射到公钥，类似于这样：\n```bash\nalice@example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINq4q0EHXacxMzmcG7TNC1DJpSxpK5dhJA6uAlZ/x8O7\nalice@example.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCfHGCK5jjI/Oib4vRBLB9rG30A8y/Br9U75rfAYsitwFPFfl/CaTAvfRlW1lIBqOCshLWxGsN+PFiJCiCWzpW4iILkD5X5KcBBYHTq1ojYXb70BrQXQ+QBDcGxqQjcOp/uTq1D9Z82mYq/usI5wdz6f1KNyqM0J6ZwRXMu6u7NZaAwmY7j1fV4DRiYdmIfUDIyEdqX4a1Gan+EMSanVUYDcNmeBURqmTkkOPYSg8g5xYgcXBMOZ+V0ZUjreV9paKraUD/mVDlZbb/VyWhJGT4FLMNXHU6UHC2FFgqANMUKIlL4vhqc23MoygKbfF3HgNB6BNfv3s+GYlaQ3+66jc5j\nbob@example.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBgQuuEvhUXerOTIZ2zoOx60M/HHJ/tcHnD84ZvTiX5b\n```\n一旦你拥有了你的被允许的签名文件，验证的步骤如下：\n```bash\nssh-keygen -Y verify -f allowed_signers -I alice@example.com -n file -s file_to_verify.sig < file_to_verify\n```\n你需要修改如下参数：\n- `allowed_signers` 是被允许的签名者文件的路径。\n- `alice@example.com` 是对文件加签名的用户邮件地址。该邮件地址会在允许的签名者文件里进行查找到对应的公钥。\n- `file` 是\"命名空间\"，该参数必须匹配前文描述的签名中的命名空间。\n- `file_to_verify.sig` 是签名文件的路径。\n- `file_to_verify` 是被验证的文件的路径。注意该文件是从标准读入的。在前面的命令中，`<`这个shell操作符用于重定向标准到该文件。\n\n如果签名是有效的，命令行会返回状态0并打印如下信息：\n```bash\nGood \"file\" signature for alice@example.com with ED25519 key SHA256:ZGa8RztddW4kE2XKPPsP9ZYC7JnMObs6yZzyxg8xZSk\n```\n否则，命令行会返回非0状态并打印错误信息。\n\n## SSH密钥的复用安全吗？\n\n简单来说：安全。\n\n对一个不同协议总是要小心的对密钥进行复用。如果不注意的话，有可能导致跨协议攻击的风险。比如，当一个Git签名信息的结构和SSH协议信息的结构相似，攻击者就可以通过SSH副本挪用签名，并伪造一个Git的人工提交。\n\n幸运的是，SSH协议信息的结构和ssh-keygen签名信息的结构并不相似，因此并没有这方面风险的担忧。\n\n为了证明这点，我们可以参考这篇[RFC 4252 section 7](https://datatracker.ietf.org/doc/html/rfc4252#section-7)，阐明了SSH密钥是如何在传统用途上通过SSH验证用户登录服务器。\nRFC指出输入的签名语法拥有如下结构：\n```bash\nstring    session identifier\nbyte      SSH_MSG_USERAUTH_REQUEST\nstring    user name\nstring    service name\nstring    \"publickey\"\nboolean   TRUE\nstring    public key algorithm name\nstring    public key to be used for authentication\n```\n第一个字段是会话标识，是个字符串。在SSH协议中，字符串的前缀由一个[32位字符](https://datatracker.ietf.org/doc/html/rfc4251#section-5)构成。会话标识是一个[hash](https://datatracker.ietf.org/doc/html/rfc4253#section-7.2)值。除非hash值很短，否则一般的上述签名的前三位字符都会是0。\n\n同时，[PROTOCOL.sshsig](https://github.com/openssh/openssh-portable/blob/d575cf44895104e0fcb0629920fb645207218129/PROTOCOL.sshsig)分发OpenSSH仓库，表明了如何通过`ssh-keygen-generated`签名使用SSH密钥。以下是输入的签名语法的结构：\n```bash\n#define MAGIC_PREAMBLE \"SSHSIG\"\n\nbyte[6]   MAGIC_PREAMBLE\nstring    namespace\nstring    reserved\nstring    hash_algorithm\nstring    H(message)\n```\n在这里，头三个字节是SSH，来自magic preamble（直译是魔法序言？）。SSH协议签名输入的头三个字节之后就开始和ssh-keygen签名输入不一样，SSH客户端和ssh-keygen不会生成同样的签名。因此，在这里不会有跨协议攻击的风险，我也有绝对的信心使用现存的SSH密钥，通过ssh-keygen来对信息加密。\n","slug":"tech/用ssh加密文件","published":1,"updated":"2021-12-08T06:29:02.000Z","_id":"cl102yrji0017tccf9cjvejsf","layout":"post","photos":[],"link":"","content":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://www.agwa.name/blog/post/ssh_signatures\">Andrew Ayer博客</a><br>翻译水平不佳，自己学习使用</p>\n<hr>\n<h2 id=\"现在可以使用SSH密钥给任意数据加密\"><a href=\"#现在可以使用SSH密钥给任意数据加密\" class=\"headerlink\" title=\"现在可以使用SSH密钥给任意数据加密\"></a>现在可以使用SSH密钥给任意数据加密</h2><p>你知道吗，你可以使用ssh-keygen命令加密和验证任意数据，比如文件和发行软件？尽管这个特性并不是特别新（在2019年随着OpenSSH 8.0发布），依然很少有人知道。<br>这就有点尴尬，因为这个功能非常有用而且可以作为PGP的有效替换用以加密数据。如果你现在在用PGP加密数据，你可以考虑转到SSH签名上。</p>\n<p>以下是我喜欢用SSH签名的原因：</p>\n<ul>\n<li><strong>不是PGP。</strong> 多年来，安全专家已经<a href=\"https://latacora.micro.blog/2019/07/16/the-pgp-problem.html\">对PGP做出了警告</a>，包括其最重要的组件GnuPG/GPG。<br>PGP太复杂了，用户体验非常糟糕，而且充斥着门槛很高的粗糙老旧的密码学原理，</li>\n<li><strong>SSH无处不在，而且用户早就有SSH密钥了。</strong> 如果你用的是 Debian Bullseye 或者 Ubuntu 20.04以及更新的版本，你已经有了足够的SSH安装版本。如果你有用Github，<br>或者任何其他的借助SSH命令来验证的服务，你也早就有了一个SSH密钥用于创建签名了。这就是为什么我对SSH签名更热衷，而不是其他PGP的替代品，比如<a href=\"https://github.com/aperezdc/signify\">signify</a> 或者<br><a href=\"https://jedisct1.github.io/minisign/\">minisign</a>。后两者很优秀，但是需要你安装新的软件和创建一个新的密钥，这就会阻碍更大范围的兼容性。</li>\n<li><strong>SSH密钥很容易分配。</strong> SSH公钥只用一行代码就可以轻松到处复制。你不需要网络白名单或者费心去配置密钥的”信任等级”。Github作为一个密钥分配服务早就演示过，比起原先的<br>PGP密钥服务器更加简易也更加安全。你可以通过访问网页<a href=\"https://github.com/USERNAME.keys%E5%8E%BB%E6%A3%80%E7%B4%A2%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%9A%84SSH%E5%85%AC%E9%92%A5%E3%80%82%EF%BC%88%E6%AF%94%E5%A6%82%EF%BC%8C%E6%88%91%E7%9A%84%E5%85%AC%E9%92%A5%E5%9C%A8[https://github.com/AGWA.keys](https://github.com/AGWA.keys)%EF%BC%89\">https://github.com/USERNAME.keys去检索任意用户的SSH公钥。（比如，我的公钥在[https://github.com/AGWA.keys](https://github.com/AGWA.keys)）</a><br>（这个例子可能不适用于所有的情况，毕竟Github在这里作为一个可信任的第三方，而且你也必须相信他们不会对大众的公钥作假。但是依赖于Github这样的专业安全团队作为可信赖的第三方，应该比几乎不可能用到的PGP的网络白名单更好。<br>在实践中，如果你曾经想搞清楚如何审核透明度日志，那第三方的公钥的透明度需要考虑进去。）</li>\n<li><strong>SSH有可选的轻量级证书。</strong> SSH证书不是必需的（而且大部分人也用不到），但是证书可以让你的操作更轻松，SSH有一套比X.509简单很多的轻量级证书系统。这使得SSH签名和S/MIME一样是一个好的选项。</li>\n</ul>\n<h2 id=\"你现在可以使用SSH给Git提交和标签加签名\"><a href=\"#你现在可以使用SSH给Git提交和标签加签名\" class=\"headerlink\" title=\"你现在可以使用SSH给Git提交和标签加签名\"></a>你现在可以使用SSH给Git提交和标签加签名</h2><p>给Git的提交和标签加签名可以帮助你确认你的的仓库在被别人使用的时候，代码未曾被篡改。但是，你必须用PGP或者S/MIME来做到这件事，而我个人从2018年PGP密钥过期后就没在这件事上被困扰过。<br>马上在Git 2.34这些都会改变了，这个版本支持了SSH签名。（TODO 咋翻译都不对。。）</p>\n<h2 id=\"文件签名\"><a href=\"#文件签名\" class=\"headerlink\" title=\"文件签名\"></a>文件签名</h2><p>像这样直接对一个文件进行签名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -Y sign -f ~/.ssh/id_ed25519 -n file file_to_sign</span><br></pre></td></tr></table></figure>\n<p>需要更改的参数如下：</p>\n<ul>\n<li><p><code>~/.ssh/id_ed25519</code>是你私钥的路径。例子里的是你的SSH Ed25519私钥的标准路径。如果你有一个RSA密钥，改为使用id_rsa。</p>\n</li>\n<li><p><code>file</code> 参数是”命名空间”，用来描述签名的目的，对于一般文件的签名，SSH将其定义为<code>file</code>，邮件的签名定义为<code>email</code>，Git则使用<code>git</code>作为签名。<br>如果你的签名用于其他目的，比如一个一般协议，你必须指明你自己的命名空间。这样，你可以避免来自一个单一协议信息的合法签名被移除后，或者附属在不同的协议信息，发起的跨协议攻击。<br>如果对于协议签名不使用特定的命名空间，那第一个协议的签名就有可能被视作第二个签名的协议，从而被认为是合法的。<br>命名空间可以是随机字符。为了保证全局的命名空间的唯一性，SSH推荐对于你自己的签名使用email作为命名空间的一部分。比如，我会使用类似于<code>protocolname-v1@agwa.name</code>的名字作为命名空间。</p>\n</li>\n<li><p><code>file_to_sign</code> 是要被签名的文件的路径。</p>\n</li>\n</ul>\n<p>签名会写入一个叫做<code>file_to_sign.sig</code>的新文件中，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN SSH SIGNATURE-----</span><br><span class=\"line\">U1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg2rirQQddpzEzOZwbtM0LUMmlLG</span><br><span class=\"line\">krl2EkDq4CVn/Hw7sAAAAEZmlsZQAAAAAAAAAGc2hhNTEyAAAAUwAAAAtzc2gtZWQyNTUx</span><br><span class=\"line\">OQAAAEDyjWPjmOdG8HJ8gh1CbM8WDDWoGfm+TTd8Qa8eua9Bt5Cc+43S24i/JqVWmk98qV</span><br><span class=\"line\">YXoQmOYL4bY8t/q7cSNeMH</span><br><span class=\"line\">-----END SSH SIGNATURE----- </span><br></pre></td></tr></table></figure>\n<p>如果你指明了文件名，那文件签名会从该标准输入并从该标准写出。</p>\n<h2 id=\"签名验证\"><a href=\"#签名验证\" class=\"headerlink\" title=\"签名验证\"></a>签名验证</h2><p>签名验证稍微更复杂点。首先你需要创建一个被允许的签名者文件，该文件将邮件地址映射到公钥，类似于这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alice@example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINq4q0EHXacxMzmcG7TNC1DJpSxpK5dhJA6uAlZ/x8O7</span><br><span class=\"line\">alice@example.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCfHGCK5jjI/Oib4vRBLB9rG30A8y/Br9U75rfAYsitwFPFfl/CaTAvfRlW1lIBqOCshLWxGsN+PFiJCiCWzpW4iILkD5X5KcBBYHTq1ojYXb70BrQXQ+QBDcGxqQjcOp/uTq1D9Z82mYq/usI5wdz6f1KNyqM0J6ZwRXMu6u7NZaAwmY7j1fV4DRiYdmIfUDIyEdqX4a1Gan+EMSanVUYDcNmeBURqmTkkOPYSg8g5xYgcXBMOZ+V0ZUjreV9paKraUD/mVDlZbb/VyWhJGT4FLMNXHU6UHC2FFgqANMUKIlL4vhqc23MoygKbfF3HgNB6BNfv3s+GYlaQ3+66jc5j</span><br><span class=\"line\">bob@example.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBgQuuEvhUXerOTIZ2zoOx60M/HHJ/tcHnD84ZvTiX5b</span><br></pre></td></tr></table></figure>\n<p>一旦你拥有了你的被允许的签名文件，验证的步骤如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -Y verify -f allowed_signers -I alice@example.com -n file -s file_to_verify.sig &lt; file_to_verify</span><br></pre></td></tr></table></figure>\n<p>你需要修改如下参数：</p>\n<ul>\n<li><code>allowed_signers</code> 是被允许的签名者文件的路径。</li>\n<li><code>alice@example.com</code> 是对文件加签名的用户邮件地址。该邮件地址会在允许的签名者文件里进行查找到对应的公钥。</li>\n<li><code>file</code> 是”命名空间”，该参数必须匹配前文描述的签名中的命名空间。</li>\n<li><code>file_to_verify.sig</code> 是签名文件的路径。</li>\n<li><code>file_to_verify</code> 是被验证的文件的路径。注意该文件是从标准读入的。在前面的命令中，<code>&lt;</code>这个shell操作符用于重定向标准到该文件。</li>\n</ul>\n<p>如果签名是有效的，命令行会返回状态0并打印如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Good <span class=\"string\">&quot;file&quot;</span> signature <span class=\"keyword\">for</span> alice@example.com with ED25519 key SHA256:ZGa8RztddW4kE2XKPPsP9ZYC7JnMObs6yZzyxg8xZSk</span><br></pre></td></tr></table></figure>\n<p>否则，命令行会返回非0状态并打印错误信息。</p>\n<h2 id=\"SSH密钥的复用安全吗？\"><a href=\"#SSH密钥的复用安全吗？\" class=\"headerlink\" title=\"SSH密钥的复用安全吗？\"></a>SSH密钥的复用安全吗？</h2><p>简单来说：安全。</p>\n<p>对一个不同协议总是要小心的对密钥进行复用。如果不注意的话，有可能导致跨协议攻击的风险。比如，当一个Git签名信息的结构和SSH协议信息的结构相似，攻击者就可以通过SSH副本挪用签名，并伪造一个Git的人工提交。</p>\n<p>幸运的是，SSH协议信息的结构和ssh-keygen签名信息的结构并不相似，因此并没有这方面风险的担忧。</p>\n<p>为了证明这点，我们可以参考这篇<a href=\"https://datatracker.ietf.org/doc/html/rfc4252#section-7\">RFC 4252 section 7</a>，阐明了SSH密钥是如何在传统用途上通过SSH验证用户登录服务器。<br>RFC指出输入的签名语法拥有如下结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string    session identifier</span><br><span class=\"line\">byte      SSH_MSG_USERAUTH_REQUEST</span><br><span class=\"line\">string    user name</span><br><span class=\"line\">string    service name</span><br><span class=\"line\">string    <span class=\"string\">&quot;publickey&quot;</span></span><br><span class=\"line\">boolean   TRUE</span><br><span class=\"line\">string    public key algorithm name</span><br><span class=\"line\">string    public key to be used <span class=\"keyword\">for</span> authentication</span><br></pre></td></tr></table></figure>\n<p>第一个字段是会话标识，是个字符串。在SSH协议中，字符串的前缀由一个<a href=\"https://datatracker.ietf.org/doc/html/rfc4251#section-5\">32位字符</a>构成。会话标识是一个<a href=\"https://datatracker.ietf.org/doc/html/rfc4253#section-7.2\">hash</a>值。除非hash值很短，否则一般的上述签名的前三位字符都会是0。</p>\n<p>同时，<a href=\"https://github.com/openssh/openssh-portable/blob/d575cf44895104e0fcb0629920fb645207218129/PROTOCOL.sshsig\">PROTOCOL.sshsig</a>分发OpenSSH仓库，表明了如何通过<code>ssh-keygen-generated</code>签名使用SSH密钥。以下是输入的签名语法的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#define MAGIC_PREAMBLE &quot;SSHSIG&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">byte[6]   MAGIC_PREAMBLE</span><br><span class=\"line\">string    namespace</span><br><span class=\"line\">string    reserved</span><br><span class=\"line\">string    hash_algorithm</span><br><span class=\"line\">string    H(message)</span><br></pre></td></tr></table></figure>\n<p>在这里，头三个字节是SSH，来自magic preamble（直译是魔法序言？）。SSH协议签名输入的头三个字节之后就开始和ssh-keygen签名输入不一样，SSH客户端和ssh-keygen不会生成同样的签名。因此，在这里不会有跨协议攻击的风险，我也有绝对的信心使用现存的SSH密钥，通过ssh-keygen来对信息加密。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://www.agwa.name/blog/post/ssh_signatures\">Andrew Ayer博客</a><br>翻译水平不佳，自己学习使用</p>\n<hr>\n<h2 id=\"现在可以使用SSH密钥给任意数据加密\"><a href=\"#现在可以使用SSH密钥给任意数据加密\" class=\"headerlink\" title=\"现在可以使用SSH密钥给任意数据加密\"></a>现在可以使用SSH密钥给任意数据加密</h2><p>你知道吗，你可以使用ssh-keygen命令加密和验证任意数据，比如文件和发行软件？尽管这个特性并不是特别新（在2019年随着OpenSSH 8.0发布），依然很少有人知道。<br>这就有点尴尬，因为这个功能非常有用而且可以作为PGP的有效替换用以加密数据。如果你现在在用PGP加密数据，你可以考虑转到SSH签名上。</p>\n<p>以下是我喜欢用SSH签名的原因：</p>\n<ul>\n<li><strong>不是PGP。</strong> 多年来，安全专家已经<a href=\"https://latacora.micro.blog/2019/07/16/the-pgp-problem.html\">对PGP做出了警告</a>，包括其最重要的组件GnuPG/GPG。<br>PGP太复杂了，用户体验非常糟糕，而且充斥着门槛很高的粗糙老旧的密码学原理，</li>\n<li><strong>SSH无处不在，而且用户早就有SSH密钥了。</strong> 如果你用的是 Debian Bullseye 或者 Ubuntu 20.04以及更新的版本，你已经有了足够的SSH安装版本。如果你有用Github，<br>或者任何其他的借助SSH命令来验证的服务，你也早就有了一个SSH密钥用于创建签名了。这就是为什么我对SSH签名更热衷，而不是其他PGP的替代品，比如<a href=\"https://github.com/aperezdc/signify\">signify</a> 或者<br><a href=\"https://jedisct1.github.io/minisign/\">minisign</a>。后两者很优秀，但是需要你安装新的软件和创建一个新的密钥，这就会阻碍更大范围的兼容性。</li>\n<li><strong>SSH密钥很容易分配。</strong> SSH公钥只用一行代码就可以轻松到处复制。你不需要网络白名单或者费心去配置密钥的”信任等级”。Github作为一个密钥分配服务早就演示过，比起原先的<br>PGP密钥服务器更加简易也更加安全。你可以通过访问网页<a href=\"https://github.com/USERNAME.keys%E5%8E%BB%E6%A3%80%E7%B4%A2%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%9A%84SSH%E5%85%AC%E9%92%A5%E3%80%82%EF%BC%88%E6%AF%94%E5%A6%82%EF%BC%8C%E6%88%91%E7%9A%84%E5%85%AC%E9%92%A5%E5%9C%A8[https://github.com/AGWA.keys](https://github.com/AGWA.keys)%EF%BC%89\">https://github.com/USERNAME.keys去检索任意用户的SSH公钥。（比如，我的公钥在[https://github.com/AGWA.keys](https://github.com/AGWA.keys)）</a><br>（这个例子可能不适用于所有的情况，毕竟Github在这里作为一个可信任的第三方，而且你也必须相信他们不会对大众的公钥作假。但是依赖于Github这样的专业安全团队作为可信赖的第三方，应该比几乎不可能用到的PGP的网络白名单更好。<br>在实践中，如果你曾经想搞清楚如何审核透明度日志，那第三方的公钥的透明度需要考虑进去。）</li>\n<li><strong>SSH有可选的轻量级证书。</strong> SSH证书不是必需的（而且大部分人也用不到），但是证书可以让你的操作更轻松，SSH有一套比X.509简单很多的轻量级证书系统。这使得SSH签名和S/MIME一样是一个好的选项。</li>\n</ul>\n<h2 id=\"你现在可以使用SSH给Git提交和标签加签名\"><a href=\"#你现在可以使用SSH给Git提交和标签加签名\" class=\"headerlink\" title=\"你现在可以使用SSH给Git提交和标签加签名\"></a>你现在可以使用SSH给Git提交和标签加签名</h2><p>给Git的提交和标签加签名可以帮助你确认你的的仓库在被别人使用的时候，代码未曾被篡改。但是，你必须用PGP或者S/MIME来做到这件事，而我个人从2018年PGP密钥过期后就没在这件事上被困扰过。<br>马上在Git 2.34这些都会改变了，这个版本支持了SSH签名。（TODO 咋翻译都不对。。）</p>\n<h2 id=\"文件签名\"><a href=\"#文件签名\" class=\"headerlink\" title=\"文件签名\"></a>文件签名</h2><p>像这样直接对一个文件进行签名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -Y sign -f ~/.ssh/id_ed25519 -n file file_to_sign</span><br></pre></td></tr></table></figure>\n<p>需要更改的参数如下：</p>\n<ul>\n<li><p><code>~/.ssh/id_ed25519</code>是你私钥的路径。例子里的是你的SSH Ed25519私钥的标准路径。如果你有一个RSA密钥，改为使用id_rsa。</p>\n</li>\n<li><p><code>file</code> 参数是”命名空间”，用来描述签名的目的，对于一般文件的签名，SSH将其定义为<code>file</code>，邮件的签名定义为<code>email</code>，Git则使用<code>git</code>作为签名。<br>如果你的签名用于其他目的，比如一个一般协议，你必须指明你自己的命名空间。这样，你可以避免来自一个单一协议信息的合法签名被移除后，或者附属在不同的协议信息，发起的跨协议攻击。<br>如果对于协议签名不使用特定的命名空间，那第一个协议的签名就有可能被视作第二个签名的协议，从而被认为是合法的。<br>命名空间可以是随机字符。为了保证全局的命名空间的唯一性，SSH推荐对于你自己的签名使用email作为命名空间的一部分。比如，我会使用类似于<code>protocolname-v1@agwa.name</code>的名字作为命名空间。</p>\n</li>\n<li><p><code>file_to_sign</code> 是要被签名的文件的路径。</p>\n</li>\n</ul>\n<p>签名会写入一个叫做<code>file_to_sign.sig</code>的新文件中，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN SSH SIGNATURE-----</span><br><span class=\"line\">U1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg2rirQQddpzEzOZwbtM0LUMmlLG</span><br><span class=\"line\">krl2EkDq4CVn/Hw7sAAAAEZmlsZQAAAAAAAAAGc2hhNTEyAAAAUwAAAAtzc2gtZWQyNTUx</span><br><span class=\"line\">OQAAAEDyjWPjmOdG8HJ8gh1CbM8WDDWoGfm+TTd8Qa8eua9Bt5Cc+43S24i/JqVWmk98qV</span><br><span class=\"line\">YXoQmOYL4bY8t/q7cSNeMH</span><br><span class=\"line\">-----END SSH SIGNATURE----- </span><br></pre></td></tr></table></figure>\n<p>如果你指明了文件名，那文件签名会从该标准输入并从该标准写出。</p>\n<h2 id=\"签名验证\"><a href=\"#签名验证\" class=\"headerlink\" title=\"签名验证\"></a>签名验证</h2><p>签名验证稍微更复杂点。首先你需要创建一个被允许的签名者文件，该文件将邮件地址映射到公钥，类似于这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alice@example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINq4q0EHXacxMzmcG7TNC1DJpSxpK5dhJA6uAlZ/x8O7</span><br><span class=\"line\">alice@example.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCfHGCK5jjI/Oib4vRBLB9rG30A8y/Br9U75rfAYsitwFPFfl/CaTAvfRlW1lIBqOCshLWxGsN+PFiJCiCWzpW4iILkD5X5KcBBYHTq1ojYXb70BrQXQ+QBDcGxqQjcOp/uTq1D9Z82mYq/usI5wdz6f1KNyqM0J6ZwRXMu6u7NZaAwmY7j1fV4DRiYdmIfUDIyEdqX4a1Gan+EMSanVUYDcNmeBURqmTkkOPYSg8g5xYgcXBMOZ+V0ZUjreV9paKraUD/mVDlZbb/VyWhJGT4FLMNXHU6UHC2FFgqANMUKIlL4vhqc23MoygKbfF3HgNB6BNfv3s+GYlaQ3+66jc5j</span><br><span class=\"line\">bob@example.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBgQuuEvhUXerOTIZ2zoOx60M/HHJ/tcHnD84ZvTiX5b</span><br></pre></td></tr></table></figure>\n<p>一旦你拥有了你的被允许的签名文件，验证的步骤如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -Y verify -f allowed_signers -I alice@example.com -n file -s file_to_verify.sig &lt; file_to_verify</span><br></pre></td></tr></table></figure>\n<p>你需要修改如下参数：</p>\n<ul>\n<li><code>allowed_signers</code> 是被允许的签名者文件的路径。</li>\n<li><code>alice@example.com</code> 是对文件加签名的用户邮件地址。该邮件地址会在允许的签名者文件里进行查找到对应的公钥。</li>\n<li><code>file</code> 是”命名空间”，该参数必须匹配前文描述的签名中的命名空间。</li>\n<li><code>file_to_verify.sig</code> 是签名文件的路径。</li>\n<li><code>file_to_verify</code> 是被验证的文件的路径。注意该文件是从标准读入的。在前面的命令中，<code>&lt;</code>这个shell操作符用于重定向标准到该文件。</li>\n</ul>\n<p>如果签名是有效的，命令行会返回状态0并打印如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Good <span class=\"string\">&quot;file&quot;</span> signature <span class=\"keyword\">for</span> alice@example.com with ED25519 key SHA256:ZGa8RztddW4kE2XKPPsP9ZYC7JnMObs6yZzyxg8xZSk</span><br></pre></td></tr></table></figure>\n<p>否则，命令行会返回非0状态并打印错误信息。</p>\n<h2 id=\"SSH密钥的复用安全吗？\"><a href=\"#SSH密钥的复用安全吗？\" class=\"headerlink\" title=\"SSH密钥的复用安全吗？\"></a>SSH密钥的复用安全吗？</h2><p>简单来说：安全。</p>\n<p>对一个不同协议总是要小心的对密钥进行复用。如果不注意的话，有可能导致跨协议攻击的风险。比如，当一个Git签名信息的结构和SSH协议信息的结构相似，攻击者就可以通过SSH副本挪用签名，并伪造一个Git的人工提交。</p>\n<p>幸运的是，SSH协议信息的结构和ssh-keygen签名信息的结构并不相似，因此并没有这方面风险的担忧。</p>\n<p>为了证明这点，我们可以参考这篇<a href=\"https://datatracker.ietf.org/doc/html/rfc4252#section-7\">RFC 4252 section 7</a>，阐明了SSH密钥是如何在传统用途上通过SSH验证用户登录服务器。<br>RFC指出输入的签名语法拥有如下结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string    session identifier</span><br><span class=\"line\">byte      SSH_MSG_USERAUTH_REQUEST</span><br><span class=\"line\">string    user name</span><br><span class=\"line\">string    service name</span><br><span class=\"line\">string    <span class=\"string\">&quot;publickey&quot;</span></span><br><span class=\"line\">boolean   TRUE</span><br><span class=\"line\">string    public key algorithm name</span><br><span class=\"line\">string    public key to be used <span class=\"keyword\">for</span> authentication</span><br></pre></td></tr></table></figure>\n<p>第一个字段是会话标识，是个字符串。在SSH协议中，字符串的前缀由一个<a href=\"https://datatracker.ietf.org/doc/html/rfc4251#section-5\">32位字符</a>构成。会话标识是一个<a href=\"https://datatracker.ietf.org/doc/html/rfc4253#section-7.2\">hash</a>值。除非hash值很短，否则一般的上述签名的前三位字符都会是0。</p>\n<p>同时，<a href=\"https://github.com/openssh/openssh-portable/blob/d575cf44895104e0fcb0629920fb645207218129/PROTOCOL.sshsig\">PROTOCOL.sshsig</a>分发OpenSSH仓库，表明了如何通过<code>ssh-keygen-generated</code>签名使用SSH密钥。以下是输入的签名语法的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#define MAGIC_PREAMBLE &quot;SSHSIG&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">byte[6]   MAGIC_PREAMBLE</span><br><span class=\"line\">string    namespace</span><br><span class=\"line\">string    reserved</span><br><span class=\"line\">string    hash_algorithm</span><br><span class=\"line\">string    H(message)</span><br></pre></td></tr></table></figure>\n<p>在这里，头三个字节是SSH，来自magic preamble（直译是魔法序言？）。SSH协议签名输入的头三个字节之后就开始和ssh-keygen签名输入不一样，SSH客户端和ssh-keygen不会生成同样的签名。因此，在这里不会有跨协议攻击的风险，我也有绝对的信心使用现存的SSH密钥，通过ssh-keygen来对信息加密。</p>\n"},{"title":"解决Dubbo无法处理自定义异常的问题","date":"2019-11-04T08:05:58.000Z","comments":1,"_content":"\n### 问题描述\n\nDubbo有一个比较奇怪的问题，目前不知道Apache和Alibaba公司出于什么样的考虑，貌似一直都没有一个比较合适的解决方案，问题如下：\n\n- 项目搭建中你需要自定义一个本地的Exception，命名为比如BusinessException。比较一般的书写代码如下：\n\n  ```java\n  /**\n   * @Author linqiang\n   * @Date 2019/10/24 16:20\n   * @Version 1.0\n   * @Description 业务异常类\n   **/\n  public class BusinessException extends RuntimeException {\n      private Integer code;\n      private String msg;\n  \n      public BusinessException(Integer code, String msg) {\n          this.code = code;\n          this.msg = msg;\n      }\n  \n      public Integer getCode() {\n          return code;\n      }\n  \n      public String getMsg() {\n          return msg;\n      }\n  }\n  ```\n\n- 通常这个BusinessException是要能够跨模块使用的，一般放在commons或者core模块中，同时别的模块的pom.xml文件引入这些模块，使得整个项目都可以使用这个BusinessException。\n\n- 问题来了，如果在A模块调用了B模块，B模块抛出了一个BusinessException，这时A模块接收到的不是BusinessException，而是一个RuntimeException，而且关于BusinessException的细节已经完全丢失，只会剩下一个类名的描述。\n\n### 问题原因\n\n关于该问题出现的原因，参考[这篇文章](https://blog.csdn.net/qq_25673113/article/details/78574514)，归纳一下，就是在Dubbo的传输信息过程中，类ExceptionFilter.java会对Exception做一个过滤，其过滤器的关键代码如下：\n\n```java\n// directly throw if it's checked exception\nif (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n    return;\n}\n// directly throw if the exception appears in the signature\ntry {\n    Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n    Class<?>[] exceptionClassses = method.getExceptionTypes();\n    for (Class<?> exceptionClass : exceptionClassses) {\n        if (exception.getClass().equals(exceptionClass)) {\n            return;\n        }\n    }\n} catch (NoSuchMethodException e) {\n    return;\n}\n<!-- more -->\n// for the exception not found in method's signature, print ERROR message in server's log.\nlogger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getContext().getRemoteHost() + \". service: \" + invoker.getInterface().getName() + \", method: \" + invocation.getMethodName() + \", exception: \" + exception.getClass().getName() + \": \" + exception.getMessage(), exception);\n\n// directly throw if exception class and interface class are in the same jar file.\nString serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());\nString exceptionFile = ReflectUtils.getCodeBase(exception.getClass());\nif (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n    return;\n}\n// directly throw if it's JDK exception\nString className = exception.getClass().getName();\nif (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n    return;\n}\n\n// directly throw if it's dubbo exception\nif (exception instanceof RpcException) {\n    return;\n}\n\n// otherwise, wrap with RuntimeException and throw back to the client\nappResponse.setException(new RuntimeException(StringUtils.toString(exception)));\nreturn;\n```\n\n即Dubbo在遇到异常时会这样处理：\n\n- 非RuntimeException不处理，直接返回\n- 抛出的是方法上注明的异常，直接返回\n- 如果异常类和接口类在同一jar包，直接返回\n- java或者javax目录下的异常类，直接返回\n- Dubbo自带的RpcException，直接返回\n- 其他的异常，会被封装为RuntimeException返回\n\n### 解决方式\n\n根据以上的分析，那么很显然，自定义异常是被直接封装为RuntimeException返回了，而且只带了自定义异常的类名信息，丢失了别的细节。\n\n那么我们想要自定义异常进行正常返回，那只有满足这个FIlter所写的上述条件。我们可以分析一下：\n\n- 不继承RuntimeException，以检查时异常抛出。**不推荐，正常的业务异常应该是运行时异常。**\n\n- 在接口方法上要写上throws BusinessException，如下：\n\n  ```java\n  public interface DemoService {\n  \n      DemoUser getUserInfo(Long userID) throws BusinessException;\n  \n  }\n  ```\n\n  **不推荐，不符合接口设计原则，且这样是把运行时异常作为检查时异常处理。**\n\n- 把自定义异常类和接口放在同一个包目录下。**不推荐，毕竟这样相当于绑定了异常类的目录，耦合性变高。**\n\n- 改包名，以“java.”或者“javax.”来开头。**不推荐，违反了类命名原则。**\n\n- 继承Dubbo的RpcException。RpcException也是继承了RuntimeException，因此能够以RuntimeException的方式进行处理。**不推荐，相当于自定义异常属于Dubbo的RpcException，这在程序设计上不合理。**\n\n我们发现，想要满足Dubbo的过滤器直接返回异常的条件，我们就必须做出一些违反程序设计的操作，如果一定要从这些方法中选择一种的话，相对来说，**自定义异常类和接口放在同一目录下，以及继承RpcException**是对于程序侵入性更小的方式。\n\n### 其他解决方式\n\n参考 [这篇文章](https://blog.csdn.net/yangzaizi/article/details/80638306)，提供了两种解决方式：\n\n1.在配置文件中配置如下，效果是：关闭ExceptionFIlter，使所有异常绕过该过滤器直接返回。**不推荐，Dubbo既然设置了这个异常过滤类，一定是出于安全和功能上的考虑，直接禁用可能会引发别的问题。**\n\n```yml\ndubbo:\n  provider:\n    filter: -exception\n```\n\n2.修改Dubbo源文件ExceptionFilter，使其遇到BusinessException也能直接返回。**不推荐，相当于定制了本地的Dubbo包，是一个后续很容易被人忽略的大坑。**\n\n### 总结\n\nDubbo在处理自定义异常时，会直接返回RuntimeException，且抹去自定义异常的所有细节，导致无法处理。\n\n本文写下的时候，Dubbo版本为2.7.3，该问题还没有非常完美的解决方案，相对来说，把**自定义异常和接口类放在同一目录下**是侵入性最小的方案。","source":"_posts/tech/解决Dubbo无法处理自定义异常的问题.md","raw":"---\ntitle: 解决Dubbo无法处理自定义异常的问题\ndate: 2019-11-04 16:05:58\ntags: \n- solved\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n\n### 问题描述\n\nDubbo有一个比较奇怪的问题，目前不知道Apache和Alibaba公司出于什么样的考虑，貌似一直都没有一个比较合适的解决方案，问题如下：\n\n- 项目搭建中你需要自定义一个本地的Exception，命名为比如BusinessException。比较一般的书写代码如下：\n\n  ```java\n  /**\n   * @Author linqiang\n   * @Date 2019/10/24 16:20\n   * @Version 1.0\n   * @Description 业务异常类\n   **/\n  public class BusinessException extends RuntimeException {\n      private Integer code;\n      private String msg;\n  \n      public BusinessException(Integer code, String msg) {\n          this.code = code;\n          this.msg = msg;\n      }\n  \n      public Integer getCode() {\n          return code;\n      }\n  \n      public String getMsg() {\n          return msg;\n      }\n  }\n  ```\n\n- 通常这个BusinessException是要能够跨模块使用的，一般放在commons或者core模块中，同时别的模块的pom.xml文件引入这些模块，使得整个项目都可以使用这个BusinessException。\n\n- 问题来了，如果在A模块调用了B模块，B模块抛出了一个BusinessException，这时A模块接收到的不是BusinessException，而是一个RuntimeException，而且关于BusinessException的细节已经完全丢失，只会剩下一个类名的描述。\n\n### 问题原因\n\n关于该问题出现的原因，参考[这篇文章](https://blog.csdn.net/qq_25673113/article/details/78574514)，归纳一下，就是在Dubbo的传输信息过程中，类ExceptionFilter.java会对Exception做一个过滤，其过滤器的关键代码如下：\n\n```java\n// directly throw if it's checked exception\nif (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n    return;\n}\n// directly throw if the exception appears in the signature\ntry {\n    Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n    Class<?>[] exceptionClassses = method.getExceptionTypes();\n    for (Class<?> exceptionClass : exceptionClassses) {\n        if (exception.getClass().equals(exceptionClass)) {\n            return;\n        }\n    }\n} catch (NoSuchMethodException e) {\n    return;\n}\n<!-- more -->\n// for the exception not found in method's signature, print ERROR message in server's log.\nlogger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getContext().getRemoteHost() + \". service: \" + invoker.getInterface().getName() + \", method: \" + invocation.getMethodName() + \", exception: \" + exception.getClass().getName() + \": \" + exception.getMessage(), exception);\n\n// directly throw if exception class and interface class are in the same jar file.\nString serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());\nString exceptionFile = ReflectUtils.getCodeBase(exception.getClass());\nif (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n    return;\n}\n// directly throw if it's JDK exception\nString className = exception.getClass().getName();\nif (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n    return;\n}\n\n// directly throw if it's dubbo exception\nif (exception instanceof RpcException) {\n    return;\n}\n\n// otherwise, wrap with RuntimeException and throw back to the client\nappResponse.setException(new RuntimeException(StringUtils.toString(exception)));\nreturn;\n```\n\n即Dubbo在遇到异常时会这样处理：\n\n- 非RuntimeException不处理，直接返回\n- 抛出的是方法上注明的异常，直接返回\n- 如果异常类和接口类在同一jar包，直接返回\n- java或者javax目录下的异常类，直接返回\n- Dubbo自带的RpcException，直接返回\n- 其他的异常，会被封装为RuntimeException返回\n\n### 解决方式\n\n根据以上的分析，那么很显然，自定义异常是被直接封装为RuntimeException返回了，而且只带了自定义异常的类名信息，丢失了别的细节。\n\n那么我们想要自定义异常进行正常返回，那只有满足这个FIlter所写的上述条件。我们可以分析一下：\n\n- 不继承RuntimeException，以检查时异常抛出。**不推荐，正常的业务异常应该是运行时异常。**\n\n- 在接口方法上要写上throws BusinessException，如下：\n\n  ```java\n  public interface DemoService {\n  \n      DemoUser getUserInfo(Long userID) throws BusinessException;\n  \n  }\n  ```\n\n  **不推荐，不符合接口设计原则，且这样是把运行时异常作为检查时异常处理。**\n\n- 把自定义异常类和接口放在同一个包目录下。**不推荐，毕竟这样相当于绑定了异常类的目录，耦合性变高。**\n\n- 改包名，以“java.”或者“javax.”来开头。**不推荐，违反了类命名原则。**\n\n- 继承Dubbo的RpcException。RpcException也是继承了RuntimeException，因此能够以RuntimeException的方式进行处理。**不推荐，相当于自定义异常属于Dubbo的RpcException，这在程序设计上不合理。**\n\n我们发现，想要满足Dubbo的过滤器直接返回异常的条件，我们就必须做出一些违反程序设计的操作，如果一定要从这些方法中选择一种的话，相对来说，**自定义异常类和接口放在同一目录下，以及继承RpcException**是对于程序侵入性更小的方式。\n\n### 其他解决方式\n\n参考 [这篇文章](https://blog.csdn.net/yangzaizi/article/details/80638306)，提供了两种解决方式：\n\n1.在配置文件中配置如下，效果是：关闭ExceptionFIlter，使所有异常绕过该过滤器直接返回。**不推荐，Dubbo既然设置了这个异常过滤类，一定是出于安全和功能上的考虑，直接禁用可能会引发别的问题。**\n\n```yml\ndubbo:\n  provider:\n    filter: -exception\n```\n\n2.修改Dubbo源文件ExceptionFilter，使其遇到BusinessException也能直接返回。**不推荐，相当于定制了本地的Dubbo包，是一个后续很容易被人忽略的大坑。**\n\n### 总结\n\nDubbo在处理自定义异常时，会直接返回RuntimeException，且抹去自定义异常的所有细节，导致无法处理。\n\n本文写下的时候，Dubbo版本为2.7.3，该问题还没有非常完美的解决方案，相对来说，把**自定义异常和接口类放在同一目录下**是侵入性最小的方案。","slug":"tech/解决Dubbo无法处理自定义异常的问题","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yrtc001btccf78nwcxgx","layout":"post","photos":[],"link":"","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Dubbo有一个比较奇怪的问题，目前不知道Apache和Alibaba公司出于什么样的考虑，貌似一直都没有一个比较合适的解决方案，问题如下：</p>\n<ul>\n<li><p>项目搭建中你需要自定义一个本地的Exception，命名为比如BusinessException。比较一般的书写代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> linqiang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/10/24 16:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 业务异常类</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BusinessException</span><span class=\"params\">(Integer code, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>通常这个BusinessException是要能够跨模块使用的，一般放在commons或者core模块中，同时别的模块的pom.xml文件引入这些模块，使得整个项目都可以使用这个BusinessException。</p>\n</li>\n<li><p>问题来了，如果在A模块调用了B模块，B模块抛出了一个BusinessException，这时A模块接收到的不是BusinessException，而是一个RuntimeException，而且关于BusinessException的细节已经完全丢失，只会剩下一个类名的描述。</p>\n</li>\n</ul>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>关于该问题出现的原因，参考<a href=\"https://blog.csdn.net/qq_25673113/article/details/78574514\">这篇文章</a>，归纳一下，就是在Dubbo的传输信息过程中，类ExceptionFilter.java会对Exception做一个过滤，其过滤器的关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s checked exception</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(exception <span class=\"keyword\">instanceof</span> RuntimeException) &amp;&amp; (exception <span class=\"keyword\">instanceof</span> Exception)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// directly throw if the exception appears in the signature</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class=\"line\">    Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"><span class=\"comment\">// for the exception not found in method&#x27;s signature, print ERROR message in server&#x27;s log.</span></span><br><span class=\"line\">logger.error(<span class=\"string\">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class=\"string\">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class=\"string\">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class=\"string\">&quot;, exception: &quot;</span> + exception.getClass().getName() + <span class=\"string\">&quot;: &quot;</span> + exception.getMessage(), exception);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directly throw if exception class and interface class are in the same jar file.</span></span><br><span class=\"line\">String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class=\"line\">String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (serviceFile == <span class=\"keyword\">null</span> || exceptionFile == <span class=\"keyword\">null</span> || serviceFile.equals(exceptionFile)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s JDK exception</span></span><br><span class=\"line\">String className = exception.getClass().getName();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">&quot;java.&quot;</span>) || className.startsWith(<span class=\"string\">&quot;javax.&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s dubbo exception</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> RpcException) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// otherwise, wrap with RuntimeException and throw back to the client</span></span><br><span class=\"line\">appResponse.setException(<span class=\"keyword\">new</span> RuntimeException(StringUtils.toString(exception)));</span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\n\n<p>即Dubbo在遇到异常时会这样处理：</p>\n<ul>\n<li>非RuntimeException不处理，直接返回</li>\n<li>抛出的是方法上注明的异常，直接返回</li>\n<li>如果异常类和接口类在同一jar包，直接返回</li>\n<li>java或者javax目录下的异常类，直接返回</li>\n<li>Dubbo自带的RpcException，直接返回</li>\n<li>其他的异常，会被封装为RuntimeException返回</li>\n</ul>\n<h3 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h3><p>根据以上的分析，那么很显然，自定义异常是被直接封装为RuntimeException返回了，而且只带了自定义异常的类名信息，丢失了别的细节。</p>\n<p>那么我们想要自定义异常进行正常返回，那只有满足这个FIlter所写的上述条件。我们可以分析一下：</p>\n<ul>\n<li><p>不继承RuntimeException，以检查时异常抛出。<strong>不推荐，正常的业务异常应该是运行时异常。</strong></p>\n</li>\n<li><p>在接口方法上要写上throws BusinessException，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DemoUser <span class=\"title\">getUserInfo</span><span class=\"params\">(Long userID)</span> <span class=\"keyword\">throws</span> BusinessException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐，不符合接口设计原则，且这样是把运行时异常作为检查时异常处理。</strong></p>\n</li>\n<li><p>把自定义异常类和接口放在同一个包目录下。<strong>不推荐，毕竟这样相当于绑定了异常类的目录，耦合性变高。</strong></p>\n</li>\n<li><p>改包名，以“java.”或者“javax.”来开头。<strong>不推荐，违反了类命名原则。</strong></p>\n</li>\n<li><p>继承Dubbo的RpcException。RpcException也是继承了RuntimeException，因此能够以RuntimeException的方式进行处理。<strong>不推荐，相当于自定义异常属于Dubbo的RpcException，这在程序设计上不合理。</strong></p>\n</li>\n</ul>\n<p>我们发现，想要满足Dubbo的过滤器直接返回异常的条件，我们就必须做出一些违反程序设计的操作，如果一定要从这些方法中选择一种的话，相对来说，<strong>自定义异常类和接口放在同一目录下，以及继承RpcException</strong>是对于程序侵入性更小的方式。</p>\n<h3 id=\"其他解决方式\"><a href=\"#其他解决方式\" class=\"headerlink\" title=\"其他解决方式\"></a>其他解决方式</h3><p>参考 <a href=\"https://blog.csdn.net/yangzaizi/article/details/80638306\">这篇文章</a>，提供了两种解决方式：</p>\n<p>1.在配置文件中配置如下，效果是：关闭ExceptionFIlter，使所有异常绕过该过滤器直接返回。<strong>不推荐，Dubbo既然设置了这个异常过滤类，一定是出于安全和功能上的考虑，直接禁用可能会引发别的问题。</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">provider:</span></span><br><span class=\"line\">    <span class=\"attr\">filter:</span> <span class=\"string\">-exception</span></span><br></pre></td></tr></table></figure>\n\n<p>2.修改Dubbo源文件ExceptionFilter，使其遇到BusinessException也能直接返回。<strong>不推荐，相当于定制了本地的Dubbo包，是一个后续很容易被人忽略的大坑。</strong></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Dubbo在处理自定义异常时，会直接返回RuntimeException，且抹去自定义异常的所有细节，导致无法处理。</p>\n<p>本文写下的时候，Dubbo版本为2.7.3，该问题还没有非常完美的解决方案，相对来说，把<strong>自定义异常和接口类放在同一目录下</strong>是侵入性最小的方案。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>Dubbo有一个比较奇怪的问题，目前不知道Apache和Alibaba公司出于什么样的考虑，貌似一直都没有一个比较合适的解决方案，问题如下：</p>\n<ul>\n<li><p>项目搭建中你需要自定义一个本地的Exception，命名为比如BusinessException。比较一般的书写代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> linqiang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/10/24 16:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 业务异常类</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BusinessException</span><span class=\"params\">(Integer code, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>通常这个BusinessException是要能够跨模块使用的，一般放在commons或者core模块中，同时别的模块的pom.xml文件引入这些模块，使得整个项目都可以使用这个BusinessException。</p>\n</li>\n<li><p>问题来了，如果在A模块调用了B模块，B模块抛出了一个BusinessException，这时A模块接收到的不是BusinessException，而是一个RuntimeException，而且关于BusinessException的细节已经完全丢失，只会剩下一个类名的描述。</p>\n</li>\n</ul>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>关于该问题出现的原因，参考<a href=\"https://blog.csdn.net/qq_25673113/article/details/78574514\">这篇文章</a>，归纳一下，就是在Dubbo的传输信息过程中，类ExceptionFilter.java会对Exception做一个过滤，其过滤器的关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s checked exception</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(exception <span class=\"keyword\">instanceof</span> RuntimeException) &amp;&amp; (exception <span class=\"keyword\">instanceof</span> Exception)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// directly throw if the exception appears in the signature</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class=\"line\">    Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"><span class=\"comment\">// for the exception not found in method&#x27;s signature, print ERROR message in server&#x27;s log.</span></span><br><span class=\"line\">logger.error(<span class=\"string\">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class=\"string\">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class=\"string\">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class=\"string\">&quot;, exception: &quot;</span> + exception.getClass().getName() + <span class=\"string\">&quot;: &quot;</span> + exception.getMessage(), exception);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directly throw if exception class and interface class are in the same jar file.</span></span><br><span class=\"line\">String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class=\"line\">String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (serviceFile == <span class=\"keyword\">null</span> || exceptionFile == <span class=\"keyword\">null</span> || serviceFile.equals(exceptionFile)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s JDK exception</span></span><br><span class=\"line\">String className = exception.getClass().getName();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">&quot;java.&quot;</span>) || className.startsWith(<span class=\"string\">&quot;javax.&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directly throw if it&#x27;s dubbo exception</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> RpcException) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// otherwise, wrap with RuntimeException and throw back to the client</span></span><br><span class=\"line\">appResponse.setException(<span class=\"keyword\">new</span> RuntimeException(StringUtils.toString(exception)));</span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\n\n<p>即Dubbo在遇到异常时会这样处理：</p>\n<ul>\n<li>非RuntimeException不处理，直接返回</li>\n<li>抛出的是方法上注明的异常，直接返回</li>\n<li>如果异常类和接口类在同一jar包，直接返回</li>\n<li>java或者javax目录下的异常类，直接返回</li>\n<li>Dubbo自带的RpcException，直接返回</li>\n<li>其他的异常，会被封装为RuntimeException返回</li>\n</ul>\n<h3 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h3><p>根据以上的分析，那么很显然，自定义异常是被直接封装为RuntimeException返回了，而且只带了自定义异常的类名信息，丢失了别的细节。</p>\n<p>那么我们想要自定义异常进行正常返回，那只有满足这个FIlter所写的上述条件。我们可以分析一下：</p>\n<ul>\n<li><p>不继承RuntimeException，以检查时异常抛出。<strong>不推荐，正常的业务异常应该是运行时异常。</strong></p>\n</li>\n<li><p>在接口方法上要写上throws BusinessException，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DemoUser <span class=\"title\">getUserInfo</span><span class=\"params\">(Long userID)</span> <span class=\"keyword\">throws</span> BusinessException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐，不符合接口设计原则，且这样是把运行时异常作为检查时异常处理。</strong></p>\n</li>\n<li><p>把自定义异常类和接口放在同一个包目录下。<strong>不推荐，毕竟这样相当于绑定了异常类的目录，耦合性变高。</strong></p>\n</li>\n<li><p>改包名，以“java.”或者“javax.”来开头。<strong>不推荐，违反了类命名原则。</strong></p>\n</li>\n<li><p>继承Dubbo的RpcException。RpcException也是继承了RuntimeException，因此能够以RuntimeException的方式进行处理。<strong>不推荐，相当于自定义异常属于Dubbo的RpcException，这在程序设计上不合理。</strong></p>\n</li>\n</ul>\n<p>我们发现，想要满足Dubbo的过滤器直接返回异常的条件，我们就必须做出一些违反程序设计的操作，如果一定要从这些方法中选择一种的话，相对来说，<strong>自定义异常类和接口放在同一目录下，以及继承RpcException</strong>是对于程序侵入性更小的方式。</p>\n<h3 id=\"其他解决方式\"><a href=\"#其他解决方式\" class=\"headerlink\" title=\"其他解决方式\"></a>其他解决方式</h3><p>参考 <a href=\"https://blog.csdn.net/yangzaizi/article/details/80638306\">这篇文章</a>，提供了两种解决方式：</p>\n<p>1.在配置文件中配置如下，效果是：关闭ExceptionFIlter，使所有异常绕过该过滤器直接返回。<strong>不推荐，Dubbo既然设置了这个异常过滤类，一定是出于安全和功能上的考虑，直接禁用可能会引发别的问题。</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">provider:</span></span><br><span class=\"line\">    <span class=\"attr\">filter:</span> <span class=\"string\">-exception</span></span><br></pre></td></tr></table></figure>\n\n<p>2.修改Dubbo源文件ExceptionFilter，使其遇到BusinessException也能直接返回。<strong>不推荐，相当于定制了本地的Dubbo包，是一个后续很容易被人忽略的大坑。</strong></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Dubbo在处理自定义异常时，会直接返回RuntimeException，且抹去自定义异常的所有细节，导致无法处理。</p>\n<p>本文写下的时候，Dubbo版本为2.7.3，该问题还没有非常完美的解决方案，相对来说，把<strong>自定义异常和接口类放在同一目录下</strong>是侵入性最小的方案。</p>\n"},{"title":"记一次用代码分辨坑爹保险产品的经历","date":"2021-11-19T07:16:52.000Z","comments":1,"_content":"## 问题起源\n这两天刚好一年交一次的保险开始催我交年费，最近由于基金太绿，手头实在有点紧，因此这个年费一直拖着还没交，于是我动了是不是要退保的想法。\n\n而销售则继续去年的话术，说我这个交满20年就可以不交了，现在交到12年退保太可惜了之类的。\n\n今年我没有轻易把这话听进去，于是我又去搜了下这个保险产品的条例，这个产品的介绍如下图。\n![](1.png)\n\n按照我当前的情况，排除意外身故的情况，简单概括下就是：\n- 我每年交7600，交20年\n- 到66岁每两年领一次总保额(总保额是50000)的8%，我这份产品从19岁开始买，到66岁总共可以领23次\n- 66岁一次性给100%全保额\n- 66岁开始每年领一次总保额的8%，我假设我能活到88岁，那总共领22次\n<!-- more -->\n\n## 简单计算\n剔除别的因素，最简单的加减算法就是\n- 交的保费是20*7600 = 152000\n- 到66岁每两年领一次8%，领23次，那就是23*(50000*0.08)=92000\n- 66岁一次性领100%总保额，就是50000\n- 66-88岁每年领一次8%，领22次，22*(50000*0.08)=88000\n简单说来总保费是 **152000**，**最后收益是230000**\n\n其实就算是这么简单的计算，也会发现这是一份很坑的产品，230000的最终收益前提是要活到88岁。而我在39岁就会交完152000的总保费，相当于从39岁\n到88岁之间的49年时间，这份产品只帮我赚到了8万的收益，如果换算成一个理财产品的话，那这份产品的年收益是可怜的0.9%……\n\n我感觉已经不用分析了，这破产品分析到这已经是垃圾中的战斗机了啊。\n\n但是不行，我还要继续分析，因为如果考虑到通货膨胀率之类的东西，我得出的结论是，买这个产品，甚至收益完全是负的。。。\n\n## 代码分析\n之前的分析还是有点粗浅的，如果仔细分析的话其实还需要考虑至少下面几点\n- 产品分红会每年加到总保额里，每年收益应当是(50000+分红)*0.08\n- 钱是会通货膨胀的，今年给你的收益4000，到明年就不值4000了\n- 同样的因为通货膨胀，你今年交的保费7600，到明年可能就不值7600了\n\n我直接上代码解决吧\n```js\nfunction countInsuranceIncome() {\n    let eachYearOut = 7600;//每年缴纳费用\n    let eachYearRate = 0.08;//年金率\n    let inflationRate = 0.05;//每年通胀率\n    let eachYearIncreaseRate = 0.01;//每年获得分红率\n    let allMoney = 50000;//总保额\n    let allOut = 0;//总支出\n    let allIn = 0;//总收入\n    for(let i = 1; i <= 20; i++) {\n        if (i > 1) {\n            // 从第二年开始算通胀\n            eachYearOut = eachYearOut * (1-inflationRate);\n        }\n        allOut = allOut + eachYearOut;\n    }\n    // 到66岁每两年领一次8%\n    // 总共领23次\n    for (let i = 1; i <= 23; i++) {\n        let rate = 1;\n        if (i > 1) {\n            // 从第二年开始算通胀\n            rate = 1 + eachYearIncreaseRate - inflationRate;\n        }\n        // 总保额每年变化，由于是两年一次，所以乘两次\n        allMoney = allMoney * rate * rate;\n        console.log(\"第\" + i + \"次计算得总保额为\" + allMoney.toFixed(2));\n        allIn = allMoney * eachYearRate + allIn;\n        console.log(\"第\" + i + \"次年金为\" + (allMoney * eachYearRate).toFixed(2));\n    }\n    // 66岁一次性给100%\n    allIn = allIn + allMoney;\n    //66岁开始假设活到88岁，每年领一次8%\n    //总共领22次\n    for (let i = 1; i <= 22; i++) {\n        allIn = allMoney * (1 + eachYearIncreaseRate - inflationRate) * eachYearRate + allIn;\n    }\n    console.log('总共支出' + allOut.toFixed(2) + '，总共收入' + allIn.toFixed(2));\n}\n```\n代码逻辑基本上就是把我列的条件都写进去了，不多解释，总之最后的计算结果非常让我震惊。\n假设从今年开始买这个产品，基于当前物价水平\n- 基于5%的通胀率，1%的分红率\n- 付出**97510.14**元\n- 收益**65532.89**元 \n- 收益 **-31977.25**元\n\n也就是说考虑到通货膨胀，拉长到将近70年的周期，这份产品最终是让你倒亏3万多。\n而通胀率我设置的其实不算高，5%算是偏低水平，1%的每年分红率我甚至还比现实更高。而且现实中也基本不太可能每年保持1%的分红率，如果调整成6%的通胀率，和0.9%的分红率，\n- 基于6%的通胀率，0.9%的分红率\n- 付出**89919.88**元\n- 收益**49962.45**元\n- 收益 **-39957.43**元\n\n不得不说，算还是保险公司会算，你乍一看，只要交20年，然后长达70年给你持续分红和年金，似乎怎么想都是划算的，而且分红方式还按照不固定的分红增长，给人以更大的迷惑性。\n让你如果不依靠专业的工具，自己根本算不清楚，只能任保险公司鱼肉。\n\n最后，如果想要这份产品能够盈利，那最低条件是通胀率要小于等于3%，且年均分红率要稳定在1%，这样70年后能够血赚2000。。。\n\n\n","source":"_posts/tech/记一次用代码分辨坑爹保险产品的经历.md","raw":"---\ntitle: 记一次用代码分辨坑爹保险产品的经历\ndate: 2021-11-19 15:16:52\ntags:\n- solved\ncomments: true\ncategories:\n- 学习\n---\n## 问题起源\n这两天刚好一年交一次的保险开始催我交年费，最近由于基金太绿，手头实在有点紧，因此这个年费一直拖着还没交，于是我动了是不是要退保的想法。\n\n而销售则继续去年的话术，说我这个交满20年就可以不交了，现在交到12年退保太可惜了之类的。\n\n今年我没有轻易把这话听进去，于是我又去搜了下这个保险产品的条例，这个产品的介绍如下图。\n![](1.png)\n\n按照我当前的情况，排除意外身故的情况，简单概括下就是：\n- 我每年交7600，交20年\n- 到66岁每两年领一次总保额(总保额是50000)的8%，我这份产品从19岁开始买，到66岁总共可以领23次\n- 66岁一次性给100%全保额\n- 66岁开始每年领一次总保额的8%，我假设我能活到88岁，那总共领22次\n<!-- more -->\n\n## 简单计算\n剔除别的因素，最简单的加减算法就是\n- 交的保费是20*7600 = 152000\n- 到66岁每两年领一次8%，领23次，那就是23*(50000*0.08)=92000\n- 66岁一次性领100%总保额，就是50000\n- 66-88岁每年领一次8%，领22次，22*(50000*0.08)=88000\n简单说来总保费是 **152000**，**最后收益是230000**\n\n其实就算是这么简单的计算，也会发现这是一份很坑的产品，230000的最终收益前提是要活到88岁。而我在39岁就会交完152000的总保费，相当于从39岁\n到88岁之间的49年时间，这份产品只帮我赚到了8万的收益，如果换算成一个理财产品的话，那这份产品的年收益是可怜的0.9%……\n\n我感觉已经不用分析了，这破产品分析到这已经是垃圾中的战斗机了啊。\n\n但是不行，我还要继续分析，因为如果考虑到通货膨胀率之类的东西，我得出的结论是，买这个产品，甚至收益完全是负的。。。\n\n## 代码分析\n之前的分析还是有点粗浅的，如果仔细分析的话其实还需要考虑至少下面几点\n- 产品分红会每年加到总保额里，每年收益应当是(50000+分红)*0.08\n- 钱是会通货膨胀的，今年给你的收益4000，到明年就不值4000了\n- 同样的因为通货膨胀，你今年交的保费7600，到明年可能就不值7600了\n\n我直接上代码解决吧\n```js\nfunction countInsuranceIncome() {\n    let eachYearOut = 7600;//每年缴纳费用\n    let eachYearRate = 0.08;//年金率\n    let inflationRate = 0.05;//每年通胀率\n    let eachYearIncreaseRate = 0.01;//每年获得分红率\n    let allMoney = 50000;//总保额\n    let allOut = 0;//总支出\n    let allIn = 0;//总收入\n    for(let i = 1; i <= 20; i++) {\n        if (i > 1) {\n            // 从第二年开始算通胀\n            eachYearOut = eachYearOut * (1-inflationRate);\n        }\n        allOut = allOut + eachYearOut;\n    }\n    // 到66岁每两年领一次8%\n    // 总共领23次\n    for (let i = 1; i <= 23; i++) {\n        let rate = 1;\n        if (i > 1) {\n            // 从第二年开始算通胀\n            rate = 1 + eachYearIncreaseRate - inflationRate;\n        }\n        // 总保额每年变化，由于是两年一次，所以乘两次\n        allMoney = allMoney * rate * rate;\n        console.log(\"第\" + i + \"次计算得总保额为\" + allMoney.toFixed(2));\n        allIn = allMoney * eachYearRate + allIn;\n        console.log(\"第\" + i + \"次年金为\" + (allMoney * eachYearRate).toFixed(2));\n    }\n    // 66岁一次性给100%\n    allIn = allIn + allMoney;\n    //66岁开始假设活到88岁，每年领一次8%\n    //总共领22次\n    for (let i = 1; i <= 22; i++) {\n        allIn = allMoney * (1 + eachYearIncreaseRate - inflationRate) * eachYearRate + allIn;\n    }\n    console.log('总共支出' + allOut.toFixed(2) + '，总共收入' + allIn.toFixed(2));\n}\n```\n代码逻辑基本上就是把我列的条件都写进去了，不多解释，总之最后的计算结果非常让我震惊。\n假设从今年开始买这个产品，基于当前物价水平\n- 基于5%的通胀率，1%的分红率\n- 付出**97510.14**元\n- 收益**65532.89**元 \n- 收益 **-31977.25**元\n\n也就是说考虑到通货膨胀，拉长到将近70年的周期，这份产品最终是让你倒亏3万多。\n而通胀率我设置的其实不算高，5%算是偏低水平，1%的每年分红率我甚至还比现实更高。而且现实中也基本不太可能每年保持1%的分红率，如果调整成6%的通胀率，和0.9%的分红率，\n- 基于6%的通胀率，0.9%的分红率\n- 付出**89919.88**元\n- 收益**49962.45**元\n- 收益 **-39957.43**元\n\n不得不说，算还是保险公司会算，你乍一看，只要交20年，然后长达70年给你持续分红和年金，似乎怎么想都是划算的，而且分红方式还按照不固定的分红增长，给人以更大的迷惑性。\n让你如果不依靠专业的工具，自己根本算不清楚，只能任保险公司鱼肉。\n\n最后，如果想要这份产品能够盈利，那最低条件是通胀率要小于等于3%，且年均分红率要稳定在1%，这样70年后能够血赚2000。。。\n\n\n","slug":"tech/记一次用代码分辨坑爹保险产品的经历","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yruq001ftccf1wgi0r8c","layout":"post","photos":[],"link":"","content":"<h2 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h2><p>这两天刚好一年交一次的保险开始催我交年费，最近由于基金太绿，手头实在有点紧，因此这个年费一直拖着还没交，于是我动了是不是要退保的想法。</p>\n<p>而销售则继续去年的话术，说我这个交满20年就可以不交了，现在交到12年退保太可惜了之类的。</p>\n<p>今年我没有轻易把这话听进去，于是我又去搜了下这个保险产品的条例，这个产品的介绍如下图。<br><img src=\"/2021/11/19/tech/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%86%E8%BE%A8%E5%9D%91%E7%88%B9%E4%BF%9D%E9%99%A9%E4%BA%A7%E5%93%81%E7%9A%84%E7%BB%8F%E5%8E%86/1.png\"></p>\n<p>按照我当前的情况，排除意外身故的情况，简单概括下就是：</p>\n<ul>\n<li>我每年交7600，交20年</li>\n<li>到66岁每两年领一次总保额(总保额是50000)的8%，我这份产品从19岁开始买，到66岁总共可以领23次</li>\n<li>66岁一次性给100%全保额</li>\n<li>66岁开始每年领一次总保额的8%，我假设我能活到88岁，那总共领22次<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"简单计算\"><a href=\"#简单计算\" class=\"headerlink\" title=\"简单计算\"></a>简单计算</h2><p>剔除别的因素，最简单的加减算法就是</p>\n<ul>\n<li>交的保费是20*7600 = 152000</li>\n<li>到66岁每两年领一次8%，领23次，那就是23*(50000*0.08)=92000</li>\n<li>66岁一次性领100%总保额，就是50000</li>\n<li>66-88岁每年领一次8%，领22次，22*(50000*0.08)=88000<br>简单说来总保费是 <strong>152000</strong>，<strong>最后收益是230000</strong></li>\n</ul>\n<p>其实就算是这么简单的计算，也会发现这是一份很坑的产品，230000的最终收益前提是要活到88岁。而我在39岁就会交完152000的总保费，相当于从39岁<br>到88岁之间的49年时间，这份产品只帮我赚到了8万的收益，如果换算成一个理财产品的话，那这份产品的年收益是可怜的0.9%……</p>\n<p>我感觉已经不用分析了，这破产品分析到这已经是垃圾中的战斗机了啊。</p>\n<p>但是不行，我还要继续分析，因为如果考虑到通货膨胀率之类的东西，我得出的结论是，买这个产品，甚至收益完全是负的。。。</p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><p>之前的分析还是有点粗浅的，如果仔细分析的话其实还需要考虑至少下面几点</p>\n<ul>\n<li>产品分红会每年加到总保额里，每年收益应当是(50000+分红)*0.08</li>\n<li>钱是会通货膨胀的，今年给你的收益4000，到明年就不值4000了</li>\n<li>同样的因为通货膨胀，你今年交的保费7600，到明年可能就不值7600了</li>\n</ul>\n<p>我直接上代码解决吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countInsuranceIncome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearOut = <span class=\"number\">7600</span>;<span class=\"comment\">//每年缴纳费用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearRate = <span class=\"number\">0.08</span>;<span class=\"comment\">//年金率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inflationRate = <span class=\"number\">0.05</span>;<span class=\"comment\">//每年通胀率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearIncreaseRate = <span class=\"number\">0.01</span>;<span class=\"comment\">//每年获得分红率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allMoney = <span class=\"number\">50000</span>;<span class=\"comment\">//总保额</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allOut = <span class=\"number\">0</span>;<span class=\"comment\">//总支出</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allIn = <span class=\"number\">0</span>;<span class=\"comment\">//总收入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从第二年开始算通胀</span></span><br><span class=\"line\">            eachYearOut = eachYearOut * (<span class=\"number\">1</span>-inflationRate);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allOut = allOut + eachYearOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 到66岁每两年领一次8%</span></span><br><span class=\"line\">    <span class=\"comment\">// 总共领23次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">23</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rate = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从第二年开始算通胀</span></span><br><span class=\"line\">            rate = <span class=\"number\">1</span> + eachYearIncreaseRate - inflationRate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 总保额每年变化，由于是两年一次，所以乘两次</span></span><br><span class=\"line\">        allMoney = allMoney * rate * rate;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + i + <span class=\"string\">&quot;次计算得总保额为&quot;</span> + allMoney.toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">        allIn = allMoney * eachYearRate + allIn;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + i + <span class=\"string\">&quot;次年金为&quot;</span> + (allMoney * eachYearRate).toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 66岁一次性给100%</span></span><br><span class=\"line\">    allIn = allIn + allMoney;</span><br><span class=\"line\">    <span class=\"comment\">//66岁开始假设活到88岁，每年领一次8%</span></span><br><span class=\"line\">    <span class=\"comment\">//总共领22次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">22</span>; i++) &#123;</span><br><span class=\"line\">        allIn = allMoney * (<span class=\"number\">1</span> + eachYearIncreaseRate - inflationRate) * eachYearRate + allIn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;总共支出&#x27;</span> + allOut.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&#x27;，总共收入&#x27;</span> + allIn.toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码逻辑基本上就是把我列的条件都写进去了，不多解释，总之最后的计算结果非常让我震惊。<br>假设从今年开始买这个产品，基于当前物价水平</p>\n<ul>\n<li>基于5%的通胀率，1%的分红率</li>\n<li>付出<strong>97510.14</strong>元</li>\n<li>收益<strong>65532.89</strong>元 </li>\n<li>收益 <strong>-31977.25</strong>元</li>\n</ul>\n<p>也就是说考虑到通货膨胀，拉长到将近70年的周期，这份产品最终是让你倒亏3万多。<br>而通胀率我设置的其实不算高，5%算是偏低水平，1%的每年分红率我甚至还比现实更高。而且现实中也基本不太可能每年保持1%的分红率，如果调整成6%的通胀率，和0.9%的分红率，</p>\n<ul>\n<li>基于6%的通胀率，0.9%的分红率</li>\n<li>付出<strong>89919.88</strong>元</li>\n<li>收益<strong>49962.45</strong>元</li>\n<li>收益 <strong>-39957.43</strong>元</li>\n</ul>\n<p>不得不说，算还是保险公司会算，你乍一看，只要交20年，然后长达70年给你持续分红和年金，似乎怎么想都是划算的，而且分红方式还按照不固定的分红增长，给人以更大的迷惑性。<br>让你如果不依靠专业的工具，自己根本算不清楚，只能任保险公司鱼肉。</p>\n<p>最后，如果想要这份产品能够盈利，那最低条件是通胀率要小于等于3%，且年均分红率要稳定在1%，这样70年后能够血赚2000。。。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h2><p>这两天刚好一年交一次的保险开始催我交年费，最近由于基金太绿，手头实在有点紧，因此这个年费一直拖着还没交，于是我动了是不是要退保的想法。</p>\n<p>而销售则继续去年的话术，说我这个交满20年就可以不交了，现在交到12年退保太可惜了之类的。</p>\n<p>今年我没有轻易把这话听进去，于是我又去搜了下这个保险产品的条例，这个产品的介绍如下图。<br><img src=\"/2021/11/19/tech/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%86%E8%BE%A8%E5%9D%91%E7%88%B9%E4%BF%9D%E9%99%A9%E4%BA%A7%E5%93%81%E7%9A%84%E7%BB%8F%E5%8E%86/1.png\"></p>\n<p>按照我当前的情况，排除意外身故的情况，简单概括下就是：</p>\n<ul>\n<li>我每年交7600，交20年</li>\n<li>到66岁每两年领一次总保额(总保额是50000)的8%，我这份产品从19岁开始买，到66岁总共可以领23次</li>\n<li>66岁一次性给100%全保额</li>\n<li>66岁开始每年领一次总保额的8%，我假设我能活到88岁，那总共领22次","more":"</li>\n</ul>\n<h2 id=\"简单计算\"><a href=\"#简单计算\" class=\"headerlink\" title=\"简单计算\"></a>简单计算</h2><p>剔除别的因素，最简单的加减算法就是</p>\n<ul>\n<li>交的保费是20*7600 = 152000</li>\n<li>到66岁每两年领一次8%，领23次，那就是23*(50000*0.08)=92000</li>\n<li>66岁一次性领100%总保额，就是50000</li>\n<li>66-88岁每年领一次8%，领22次，22*(50000*0.08)=88000<br>简单说来总保费是 <strong>152000</strong>，<strong>最后收益是230000</strong></li>\n</ul>\n<p>其实就算是这么简单的计算，也会发现这是一份很坑的产品，230000的最终收益前提是要活到88岁。而我在39岁就会交完152000的总保费，相当于从39岁<br>到88岁之间的49年时间，这份产品只帮我赚到了8万的收益，如果换算成一个理财产品的话，那这份产品的年收益是可怜的0.9%……</p>\n<p>我感觉已经不用分析了，这破产品分析到这已经是垃圾中的战斗机了啊。</p>\n<p>但是不行，我还要继续分析，因为如果考虑到通货膨胀率之类的东西，我得出的结论是，买这个产品，甚至收益完全是负的。。。</p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><p>之前的分析还是有点粗浅的，如果仔细分析的话其实还需要考虑至少下面几点</p>\n<ul>\n<li>产品分红会每年加到总保额里，每年收益应当是(50000+分红)*0.08</li>\n<li>钱是会通货膨胀的，今年给你的收益4000，到明年就不值4000了</li>\n<li>同样的因为通货膨胀，你今年交的保费7600，到明年可能就不值7600了</li>\n</ul>\n<p>我直接上代码解决吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countInsuranceIncome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearOut = <span class=\"number\">7600</span>;<span class=\"comment\">//每年缴纳费用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearRate = <span class=\"number\">0.08</span>;<span class=\"comment\">//年金率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inflationRate = <span class=\"number\">0.05</span>;<span class=\"comment\">//每年通胀率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> eachYearIncreaseRate = <span class=\"number\">0.01</span>;<span class=\"comment\">//每年获得分红率</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allMoney = <span class=\"number\">50000</span>;<span class=\"comment\">//总保额</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allOut = <span class=\"number\">0</span>;<span class=\"comment\">//总支出</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> allIn = <span class=\"number\">0</span>;<span class=\"comment\">//总收入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从第二年开始算通胀</span></span><br><span class=\"line\">            eachYearOut = eachYearOut * (<span class=\"number\">1</span>-inflationRate);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allOut = allOut + eachYearOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 到66岁每两年领一次8%</span></span><br><span class=\"line\">    <span class=\"comment\">// 总共领23次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">23</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rate = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从第二年开始算通胀</span></span><br><span class=\"line\">            rate = <span class=\"number\">1</span> + eachYearIncreaseRate - inflationRate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 总保额每年变化，由于是两年一次，所以乘两次</span></span><br><span class=\"line\">        allMoney = allMoney * rate * rate;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + i + <span class=\"string\">&quot;次计算得总保额为&quot;</span> + allMoney.toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">        allIn = allMoney * eachYearRate + allIn;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + i + <span class=\"string\">&quot;次年金为&quot;</span> + (allMoney * eachYearRate).toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 66岁一次性给100%</span></span><br><span class=\"line\">    allIn = allIn + allMoney;</span><br><span class=\"line\">    <span class=\"comment\">//66岁开始假设活到88岁，每年领一次8%</span></span><br><span class=\"line\">    <span class=\"comment\">//总共领22次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">22</span>; i++) &#123;</span><br><span class=\"line\">        allIn = allMoney * (<span class=\"number\">1</span> + eachYearIncreaseRate - inflationRate) * eachYearRate + allIn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;总共支出&#x27;</span> + allOut.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&#x27;，总共收入&#x27;</span> + allIn.toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码逻辑基本上就是把我列的条件都写进去了，不多解释，总之最后的计算结果非常让我震惊。<br>假设从今年开始买这个产品，基于当前物价水平</p>\n<ul>\n<li>基于5%的通胀率，1%的分红率</li>\n<li>付出<strong>97510.14</strong>元</li>\n<li>收益<strong>65532.89</strong>元 </li>\n<li>收益 <strong>-31977.25</strong>元</li>\n</ul>\n<p>也就是说考虑到通货膨胀，拉长到将近70年的周期，这份产品最终是让你倒亏3万多。<br>而通胀率我设置的其实不算高，5%算是偏低水平，1%的每年分红率我甚至还比现实更高。而且现实中也基本不太可能每年保持1%的分红率，如果调整成6%的通胀率，和0.9%的分红率，</p>\n<ul>\n<li>基于6%的通胀率，0.9%的分红率</li>\n<li>付出<strong>89919.88</strong>元</li>\n<li>收益<strong>49962.45</strong>元</li>\n<li>收益 <strong>-39957.43</strong>元</li>\n</ul>\n<p>不得不说，算还是保险公司会算，你乍一看，只要交20年，然后长达70年给你持续分红和年金，似乎怎么想都是划算的，而且分红方式还按照不固定的分红增长，给人以更大的迷惑性。<br>让你如果不依靠专业的工具，自己根本算不清楚，只能任保险公司鱼肉。</p>\n<p>最后，如果想要这份产品能够盈利，那最低条件是通胀率要小于等于3%，且年均分红率要稳定在1%，这样70年后能够血赚2000。。。</p>"},{"title":"logback日志配置模板","date":"2019-11-05T08:47:55.000Z","_content":"\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n    <!-- 常量定义start -->\n    <!-- 默认日志输出格式-->\n    <property name=\"HOST_NAME\" value=\"Project_Name\"/>\n    <property name=\"DEFAULT_PATTERN\"\n              value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} ** ${HOST_NAME} ** [%thread] ** %level ** [%logger] ** - %file:%line ** [%method] - ** %msg%n\"/>\n    <property name=\"MAX_HISTORY\" value=\"30\"/>\n    <property name=\"ASYNC_QUEUE_SIZE\" value=\"1024\"/>\n    <property name=\"DEFAULT_CHARSET\" value=\"UTF-8\"/>\n    <!-- 常量定义end -->\n\n    <!-- 默认日志的console appender，本地使用的日志 -->\n    <appender class=\"ch.qos.logback.core.ConsoleAppender\" name=\"STDOUT\">\n        <encoder>\n            <pattern>${DEFAULT_PATTERN}</pattern>\n            <charset>${DEFAULT_CHARSET}</charset>\n        </encoder>\n    </appender>\n    <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_DEFAULT\">\n        <append>true</append>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>E:/logs/${HOST_NAME}/${HOST_NAME}-%d{yyyyMMdd}.log</fileNamePattern>\n            <maxHistory>${MAX_HISTORY}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>${DEFAULT_PATTERN}</pattern>\n            <charset>${DEFAULT_CHARSET}</charset>\n        </encoder>\n    </appender>\n    <springProfile name=\"!local\">\n        <!-- 服务器上使用的appender start -->\n        <!-- 默认的file appender，按天切分日志 -->\n        <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_DEFAULT\">\n            <append>true</append>\n            <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n                <fileNamePattern>/home/logs/${HOSTNAME}/${HOSTNAME}-%d{yyyyMMdd}.log</fileNamePattern>\n                <maxHistory>${MAX_HISTORY}</maxHistory>\n            </rollingPolicy>\n            <encoder>\n                <pattern>${DEFAULT_PATTERN}</pattern>\n                <charset>${DEFAULT_CHARSET}</charset>\n            </encoder>\n        </appender>\n\n        <!-- 错误日志，按天切分 -->\n        <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_ERROR\">\n            <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n                <level>ERROR</level>\n                <onMatch>ACCEPT</onMatch>\n                <onMismatch>DENY</onMismatch>\n            </filter>\n            <append>true</append>\n            <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n                <fileNamePattern>/home/logs/${HOSTNAME}/${HOSTNAME}_error-%d{yyyyMMdd}.log</fileNamePattern>\n                <maxHistory>${MAX_HISTORY}</maxHistory>\n            </rollingPolicy>\n            <encoder>\n                <pattern>${DEFAULT_PATTERN}</pattern>\n                <charset>${DEFAULT_CHARSET}</charset>\n            </encoder>\n        </appender>\n\n        <appender class=\"ch.qos.logback.classic.AsyncAppender\" name=\"ASYNC_ROLLING_FILE_DEFAULT\">\n            <!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n            <discardingThreshold>-1</discardingThreshold>\n            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n            <queueSize>2048</queueSize>\n            <includeCallerData>true</includeCallerData>\n            <!-- 添加附加的appender,最多只能添加一个 -->\n            <appender-ref ref=\"ROLLING_FILE_DEFAULT\"/>\n        </appender>\n\n        <appender class=\"ch.qos.logback.classic.AsyncAppender\" name=\"ASYNC_ROLLING_FILE_ERROR\">\n            <!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n            <discardingThreshold>-1</discardingThreshold>\n            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n            <queueSize>2048</queueSize>\n            <includeCallerData>true</includeCallerData>\n            <!-- 添加附加的appender,最多只能添加一个 -->\n            <appender-ref ref=\"ROLLING_FILE_ERROR\"/>\n        </appender>\n\n    </springProfile>\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\"/>\n        <appender-ref ref=\"ROLLING_FILE_DEFAULT\"/>\n    </root>\n\n</configuration>\n\n```\n\n","source":"_posts/tech/logback日志配置模板.md","raw":"---\ntitle: logback日志配置模板\ndate: 2019-11-05 16:47:55\ncategories: \n- 学习\n- 搭建相关\n---\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n    <!-- 常量定义start -->\n    <!-- 默认日志输出格式-->\n    <property name=\"HOST_NAME\" value=\"Project_Name\"/>\n    <property name=\"DEFAULT_PATTERN\"\n              value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} ** ${HOST_NAME} ** [%thread] ** %level ** [%logger] ** - %file:%line ** [%method] - ** %msg%n\"/>\n    <property name=\"MAX_HISTORY\" value=\"30\"/>\n    <property name=\"ASYNC_QUEUE_SIZE\" value=\"1024\"/>\n    <property name=\"DEFAULT_CHARSET\" value=\"UTF-8\"/>\n    <!-- 常量定义end -->\n\n    <!-- 默认日志的console appender，本地使用的日志 -->\n    <appender class=\"ch.qos.logback.core.ConsoleAppender\" name=\"STDOUT\">\n        <encoder>\n            <pattern>${DEFAULT_PATTERN}</pattern>\n            <charset>${DEFAULT_CHARSET}</charset>\n        </encoder>\n    </appender>\n    <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_DEFAULT\">\n        <append>true</append>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>E:/logs/${HOST_NAME}/${HOST_NAME}-%d{yyyyMMdd}.log</fileNamePattern>\n            <maxHistory>${MAX_HISTORY}</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>${DEFAULT_PATTERN}</pattern>\n            <charset>${DEFAULT_CHARSET}</charset>\n        </encoder>\n    </appender>\n    <springProfile name=\"!local\">\n        <!-- 服务器上使用的appender start -->\n        <!-- 默认的file appender，按天切分日志 -->\n        <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_DEFAULT\">\n            <append>true</append>\n            <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n                <fileNamePattern>/home/logs/${HOSTNAME}/${HOSTNAME}-%d{yyyyMMdd}.log</fileNamePattern>\n                <maxHistory>${MAX_HISTORY}</maxHistory>\n            </rollingPolicy>\n            <encoder>\n                <pattern>${DEFAULT_PATTERN}</pattern>\n                <charset>${DEFAULT_CHARSET}</charset>\n            </encoder>\n        </appender>\n\n        <!-- 错误日志，按天切分 -->\n        <appender class=\"ch.qos.logback.core.rolling.RollingFileAppender\" name=\"ROLLING_FILE_ERROR\">\n            <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n                <level>ERROR</level>\n                <onMatch>ACCEPT</onMatch>\n                <onMismatch>DENY</onMismatch>\n            </filter>\n            <append>true</append>\n            <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n                <fileNamePattern>/home/logs/${HOSTNAME}/${HOSTNAME}_error-%d{yyyyMMdd}.log</fileNamePattern>\n                <maxHistory>${MAX_HISTORY}</maxHistory>\n            </rollingPolicy>\n            <encoder>\n                <pattern>${DEFAULT_PATTERN}</pattern>\n                <charset>${DEFAULT_CHARSET}</charset>\n            </encoder>\n        </appender>\n\n        <appender class=\"ch.qos.logback.classic.AsyncAppender\" name=\"ASYNC_ROLLING_FILE_DEFAULT\">\n            <!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n            <discardingThreshold>-1</discardingThreshold>\n            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n            <queueSize>2048</queueSize>\n            <includeCallerData>true</includeCallerData>\n            <!-- 添加附加的appender,最多只能添加一个 -->\n            <appender-ref ref=\"ROLLING_FILE_DEFAULT\"/>\n        </appender>\n\n        <appender class=\"ch.qos.logback.classic.AsyncAppender\" name=\"ASYNC_ROLLING_FILE_ERROR\">\n            <!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n            <discardingThreshold>-1</discardingThreshold>\n            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n            <queueSize>2048</queueSize>\n            <includeCallerData>true</includeCallerData>\n            <!-- 添加附加的appender,最多只能添加一个 -->\n            <appender-ref ref=\"ROLLING_FILE_ERROR\"/>\n        </appender>\n\n    </springProfile>\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\"/>\n        <appender-ref ref=\"ROLLING_FILE_DEFAULT\"/>\n    </root>\n\n</configuration>\n\n```\n\n","slug":"tech/logback日志配置模板","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102ys6h001itccf61phbyhc","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 常量定义start --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认日志输出格式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;HOST_NAME&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Project_Name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;DEFAULT_PATTERN&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ** $&#123;HOST_NAME&#125; ** [%thread] ** %level ** [%logger] ** - %file:%line ** [%method] - ** %msg%n&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MAX_HISTORY&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;30&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_QUEUE_SIZE&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;DEFAULT_CHARSET&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 常量定义end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认日志的console appender，本地使用的日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;STDOUT&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>E:/logs/$&#123;HOST_NAME&#125;/$&#123;HOST_NAME&#125;-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;!local&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 服务器上使用的appender start --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 默认的file appender，按天切分日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>/home/logs/$&#123;HOSTNAME&#125;/$&#123;HOSTNAME&#125;-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 错误日志，按天切分 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_ERROR&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>/home/logs/$&#123;HOSTNAME&#125;/$&#123;HOSTNAME&#125;_error-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>2048<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_ROLLING_FILE_ERROR&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>2048<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_ERROR&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 常量定义start --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认日志输出格式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;HOST_NAME&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Project_Name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;DEFAULT_PATTERN&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ** $&#123;HOST_NAME&#125; ** [%thread] ** %level ** [%logger] ** - %file:%line ** [%method] - ** %msg%n&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MAX_HISTORY&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;30&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_QUEUE_SIZE&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;DEFAULT_CHARSET&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 常量定义end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认日志的console appender，本地使用的日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;STDOUT&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>E:/logs/$&#123;HOST_NAME&#125;/$&#123;HOST_NAME&#125;-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;!local&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 服务器上使用的appender start --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 默认的file appender，按天切分日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>/home/logs/$&#123;HOSTNAME&#125;/$&#123;HOSTNAME&#125;-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 错误日志，按天切分 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ROLLING_FILE_ERROR&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>/home/logs/$&#123;HOSTNAME&#125;/$&#123;HOSTNAME&#125;_error-%d&#123;yyyyMMdd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;DEFAULT_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>$&#123;DEFAULT_CHARSET&#125;<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_ROLLING_FILE_DEFAULT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>2048<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASYNC_ROLLING_FILE_ERROR&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>2048<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includeCallerData</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">includeCallerData</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_ERROR&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ROLLING_FILE_DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"linux版本过低情况下使用高版本nodejs","date":"2021-12-17T03:13:26.000Z","comments":1,"_content":"\n**我这里针对的低版本linux指的是centos6。**\n\n## 问题起源\n\n最近需要写一个页面，我前段时间一直在用nodejs开发，所以我就选择了react来写页面。在本机开发调试完成之后，部署到linux上出现问题，在运行npm install命令的时候出现如下报错：\n```shell\nnpm WARN notsup Unsupported engine for react-scripts@5.0.0: wanted: {\"node\":\">=14.0.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: react-scripts@5.0.0\nnpm WARN notsup Unsupported engine for css-loader@6.5.1: wanted: {\"node\":\">= 12.13.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: css-loader@6.5.1\nnpm WARN notsup Unsupported engine for css-minimizer-webpack-plugin@3.3.1: wanted: {\"node\":\">= 12.13.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: css-minimizer-webpack-plugin@3.3.1\nnpm WARN notsup Unsupported engine for eslint@8.5.0: wanted: {\"node\":\"^12.22.0 || ^14.17.0 || >=16.0.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: eslint@8.5.0\n.....\n```\n显然，根据提示是因为node版本太低导致，那首先想到的必然就是升级node版本。\n\n## 尝试升级node版本失败，gcc版本过低\n\n升级node版本有几种办法：\n\n- 通过下载[官网](https://nodejs.org/en/download/releases/)的二进制包，然后解压缩到目录，再通过ln指令进行node版本的关联。\n- 第二种方法比较简单，安装node的一个版本管理工具，叫[n](https://github.com/tj/n)，然后运行如下指令就可以完成安装：\n```shell\nnpm install -g n\nn node版本号\n```\n<!-- more -->\n然而在我运行了n 14 之后，却出现了报错如下：\n```shell\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by /usr/local/bin/node)\n```\n这个报错我去网上搜了下，原因基本就是因为gcc的版本过低导致。在解决这个问题的时候，我出现了非常多的路线错误，导致这个问题本来挺容易解决的，却绕了很多的弯。\n\n## 尝试升级gcc版本失败，yum安装源版本过低\n首先我直接尝试了运行yum安装命令：\n```shell\nyum -y install gcc\n```\n结果报错，提示404。经查发现原来centos已经停止支持centos6版本的linux了，甚至还卸磨杀驴，将之前的yum源也都关闭，不仅如此，国内的所有centos6的镜像yum源也都关闭了。最终我在阿里的镜像源里看到一句话，如果非要用centos6的yum源，访问[https://vault.centos.org/](https://vault.centos.org/)。看来centos还是归档了一份镜像源，还算有点良心，但是这个网站也写了下面一段话。\n> This is _NOT_ an updated tree for installing CentOS Linux : It is a snapshot of the older trees that have been removed from the main CentOS servers as new point releases are released.\n  This is provided for reference and to provide access to older archived versions, and we do not put security updates into the trees on this server.\n  Please see this [link](http://www.centos.org/download) for active versions of CentOS Linux \n  \n总之就是告诉你这个镜像也尽量别用，只是为了老版本linux做的一个备份而已。反正centos意思也很明显了，centos6你就别用了，能升级就升级。\n那有什么办法呢，先用这个镜像源看看吧。尝试替换yum源：\n```shell\n## 最好是先备份一份，我只是为了复盘问题处理过程，所以省略这一步\nvi /etc/yum.repos.d/CentOS-Base.repo\n```\n可以直接用如下内容替换进去：\n```properties\n#注意，这是centos6的yum源，更高版本的不要用这个源\n[base]\nname=CentOS-6.10 - Base - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/os/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#released updates\n[updates]\nname=CentOS-6.10 - Updates - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/updates/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#additional packages that may be useful\n[extras]\nname=CentOS-6.10 - Extras - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/extras/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-6.10 - Plus - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#contrib - packages by Centos Users\n[contrib]\nname=CentOS-6.10 - Contrib - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/contrib/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n```\n这样一通操作之后，通过yum安装gcc倒是走通了，可是。。。安装的版本还是不符合要求，这个yum源下的gcc最高版本还是太低。那咋办？我想到了两个方式，一是手动安装，二是。。。升级linux版本。\n\n## 尝试手动安装高版本gcc失败\n过程不再赘述了，基本原因是linux内核版本太低，使得make命令执行失败。\n\n## 升级lunux版本失败\n升级linux我确实也去查了下方法，升级失败的原因也挺操蛋的，就是centos全面关闭centos6的支持，甚至连centos6升级到centos7的通道都关了，导致网上查的那些方法都不能用，centos真是全面诠释了什么叫全面关闭对老系统的支持。\n\n## 回归最早的报错，解决`'GLIBCXX_3.4.20' not found`的问题\n上面解决问题的过程持续了几乎一整天，我在linux版本升级也失败之后，我突然意识到，我只是想要部署个web页面而已啊，为啥会搞的这么麻烦？于是我回归到最早的那个报错，`'GLIBCXX_3.4.20' not found`，在百度上连续吃瘪之后，我用了谷歌来查这个问题，没想到的是，谷歌出来的一片文章五分钟就解决另外我的问题。\n这篇文章链接：[version 'GLIBCXX_3.4.20' not found 解决方法](https://www.jianshu.com/p/050b2b777b9d)。\n为了防止原文404，我也备份一下这个解决办法：\n```shell\n1. 查看系统版本\nstrings /usr/lib64/libstdc++.so.6 | grep GLIBCXX\nGLIBCXX_3.4\nGLIBCXX_3.4.1\nGLIBCXX_3.4.2\nGLIBCXX_3.4.3\nGLIBCXX_3.4.4\nGLIBCXX_3.4.5\nGLIBCXX_3.4.6\nGLIBCXX_3.4.7\nGLIBCXX_3.4.8\nGLIBCXX_3.4.9\nGLIBCXX_3.4.10\nGLIBCXX_3.4.11\nGLIBCXX_3.4.12\nGLIBCXX_3.4.13\nGLIBCXX_3.4.14\nGLIBCXX_3.4.15\nGLIBCXX_3.4.16\nGLIBCXX_3.4.17\nGLIBCXX_3.4.18\nGLIBCXX_3.4.19\nGLIBCXX_DEBUG_MESSAGE_LENGTH\n\n发现少了GLIBCXX_3.4.20，解决方法是升级libstdc++.\n\n2. \nsudo yum provides libstdc++.so.6\nLoaded plugins: fastestmirror, langpacks\nDetermining fastest mirrors\nlibstdc++-4.8.5-39.el7.i686 : GNU Standard C++ Library\nRepo        : base\nMatched from:\nProvides    : libstdc++.so.6\n\n3. \ncd /usr/local/lib64\n# 下载最新版本的libstdc.so_.6.0.26\nsudo wget http://www.vuln.cn/wp-content/uploads/2019/08/libstdc.so_.6.0.26.zip\nunzip libstdc.so_.6.0.26.zip\n# 将下载的最新版本拷贝到 /usr/lib64\ncp libstdc++.so.6.0.26 /usr/lib64\ncd  /usr/lib64\n# 查看 /usr/lib64下libstdc++.so.6链接的版本\nls -l | grep libstdc++\nlibstdc++.so.6 ->libstdc++.so.6.0.19\n# 删除/usr/lib64原来的软连接libstdc++.so.6，删除之前先备份一份\nsudo rm libstdc++.so.6\n# 链接新的版本\nsudo ln -s libstdc++.so.6.0.26 libstdc++.so.6\n# 查看新版本，成功\nstrings /usr/lib64/libstdc++.so.6 | grep GLIBCXX\n...\nGLIBCXX_3.4.18\nGLIBCXX_3.4.19\nGLIBCXX_3.4.20\nGLIBCXX_3.4.21\nGLIBCXX_3.4.22\nGLIBCXX_3.4.23\nGLIBCXX_3.4.24\nGLIBCXX_3.4.25\nGLIBCXX_3.4.26\nGLIBCXX_DEBUG_MESSAGE_LENGTH\n...\n```\n其实这个方法也算是手动安装，但是问题的关键是他的方式是只升级了libstdc，而我之前纠结的一直是gcc版本。\n\n## 总结\n问题最后圆满解决了，这个过程中也算是学到了不少东西，所以想记录一下。","source":"_posts/tech/linux版本过低情况下使用高版本nodejs.md","raw":"---\ntitle: linux版本过低情况下使用高版本nodejs\ndate: 2021-12-17 11:13:26\ntags:\n- linux\ncomments: true\ncategories: \n- 学习\n- 运维\n---\n\n**我这里针对的低版本linux指的是centos6。**\n\n## 问题起源\n\n最近需要写一个页面，我前段时间一直在用nodejs开发，所以我就选择了react来写页面。在本机开发调试完成之后，部署到linux上出现问题，在运行npm install命令的时候出现如下报错：\n```shell\nnpm WARN notsup Unsupported engine for react-scripts@5.0.0: wanted: {\"node\":\">=14.0.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: react-scripts@5.0.0\nnpm WARN notsup Unsupported engine for css-loader@6.5.1: wanted: {\"node\":\">= 12.13.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: css-loader@6.5.1\nnpm WARN notsup Unsupported engine for css-minimizer-webpack-plugin@3.3.1: wanted: {\"node\":\">= 12.13.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: css-minimizer-webpack-plugin@3.3.1\nnpm WARN notsup Unsupported engine for eslint@8.5.0: wanted: {\"node\":\"^12.22.0 || ^14.17.0 || >=16.0.0\"} (current: {\"node\":\"10.24.1\",\"npm\":\"6.14.12\"})\nnpm WARN notsup Not compatible with your version of node/npm: eslint@8.5.0\n.....\n```\n显然，根据提示是因为node版本太低导致，那首先想到的必然就是升级node版本。\n\n## 尝试升级node版本失败，gcc版本过低\n\n升级node版本有几种办法：\n\n- 通过下载[官网](https://nodejs.org/en/download/releases/)的二进制包，然后解压缩到目录，再通过ln指令进行node版本的关联。\n- 第二种方法比较简单，安装node的一个版本管理工具，叫[n](https://github.com/tj/n)，然后运行如下指令就可以完成安装：\n```shell\nnpm install -g n\nn node版本号\n```\n<!-- more -->\n然而在我运行了n 14 之后，却出现了报错如下：\n```shell\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5' not found (required by /usr/local/bin/node)\n/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by /usr/local/bin/node)\n```\n这个报错我去网上搜了下，原因基本就是因为gcc的版本过低导致。在解决这个问题的时候，我出现了非常多的路线错误，导致这个问题本来挺容易解决的，却绕了很多的弯。\n\n## 尝试升级gcc版本失败，yum安装源版本过低\n首先我直接尝试了运行yum安装命令：\n```shell\nyum -y install gcc\n```\n结果报错，提示404。经查发现原来centos已经停止支持centos6版本的linux了，甚至还卸磨杀驴，将之前的yum源也都关闭，不仅如此，国内的所有centos6的镜像yum源也都关闭了。最终我在阿里的镜像源里看到一句话，如果非要用centos6的yum源，访问[https://vault.centos.org/](https://vault.centos.org/)。看来centos还是归档了一份镜像源，还算有点良心，但是这个网站也写了下面一段话。\n> This is _NOT_ an updated tree for installing CentOS Linux : It is a snapshot of the older trees that have been removed from the main CentOS servers as new point releases are released.\n  This is provided for reference and to provide access to older archived versions, and we do not put security updates into the trees on this server.\n  Please see this [link](http://www.centos.org/download) for active versions of CentOS Linux \n  \n总之就是告诉你这个镜像也尽量别用，只是为了老版本linux做的一个备份而已。反正centos意思也很明显了，centos6你就别用了，能升级就升级。\n那有什么办法呢，先用这个镜像源看看吧。尝试替换yum源：\n```shell\n## 最好是先备份一份，我只是为了复盘问题处理过程，所以省略这一步\nvi /etc/yum.repos.d/CentOS-Base.repo\n```\n可以直接用如下内容替换进去：\n```properties\n#注意，这是centos6的yum源，更高版本的不要用这个源\n[base]\nname=CentOS-6.10 - Base - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/os/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#released updates\n[updates]\nname=CentOS-6.10 - Updates - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/updates/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#additional packages that may be useful\n[extras]\nname=CentOS-6.10 - Extras - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/extras/$basearch/\ngpgcheck=1\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-6.10 - Plus - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n\n#contrib - packages by Centos Users\n[contrib]\nname=CentOS-6.10 - Contrib - vault.centos.org\nfailovermethod=priority\nbaseurl=https://vault.centos.org/6.10/contrib/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://vault.centos.org/RPM-GPG-KEY-CentOS-6\n```\n这样一通操作之后，通过yum安装gcc倒是走通了，可是。。。安装的版本还是不符合要求，这个yum源下的gcc最高版本还是太低。那咋办？我想到了两个方式，一是手动安装，二是。。。升级linux版本。\n\n## 尝试手动安装高版本gcc失败\n过程不再赘述了，基本原因是linux内核版本太低，使得make命令执行失败。\n\n## 升级lunux版本失败\n升级linux我确实也去查了下方法，升级失败的原因也挺操蛋的，就是centos全面关闭centos6的支持，甚至连centos6升级到centos7的通道都关了，导致网上查的那些方法都不能用，centos真是全面诠释了什么叫全面关闭对老系统的支持。\n\n## 回归最早的报错，解决`'GLIBCXX_3.4.20' not found`的问题\n上面解决问题的过程持续了几乎一整天，我在linux版本升级也失败之后，我突然意识到，我只是想要部署个web页面而已啊，为啥会搞的这么麻烦？于是我回归到最早的那个报错，`'GLIBCXX_3.4.20' not found`，在百度上连续吃瘪之后，我用了谷歌来查这个问题，没想到的是，谷歌出来的一片文章五分钟就解决另外我的问题。\n这篇文章链接：[version 'GLIBCXX_3.4.20' not found 解决方法](https://www.jianshu.com/p/050b2b777b9d)。\n为了防止原文404，我也备份一下这个解决办法：\n```shell\n1. 查看系统版本\nstrings /usr/lib64/libstdc++.so.6 | grep GLIBCXX\nGLIBCXX_3.4\nGLIBCXX_3.4.1\nGLIBCXX_3.4.2\nGLIBCXX_3.4.3\nGLIBCXX_3.4.4\nGLIBCXX_3.4.5\nGLIBCXX_3.4.6\nGLIBCXX_3.4.7\nGLIBCXX_3.4.8\nGLIBCXX_3.4.9\nGLIBCXX_3.4.10\nGLIBCXX_3.4.11\nGLIBCXX_3.4.12\nGLIBCXX_3.4.13\nGLIBCXX_3.4.14\nGLIBCXX_3.4.15\nGLIBCXX_3.4.16\nGLIBCXX_3.4.17\nGLIBCXX_3.4.18\nGLIBCXX_3.4.19\nGLIBCXX_DEBUG_MESSAGE_LENGTH\n\n发现少了GLIBCXX_3.4.20，解决方法是升级libstdc++.\n\n2. \nsudo yum provides libstdc++.so.6\nLoaded plugins: fastestmirror, langpacks\nDetermining fastest mirrors\nlibstdc++-4.8.5-39.el7.i686 : GNU Standard C++ Library\nRepo        : base\nMatched from:\nProvides    : libstdc++.so.6\n\n3. \ncd /usr/local/lib64\n# 下载最新版本的libstdc.so_.6.0.26\nsudo wget http://www.vuln.cn/wp-content/uploads/2019/08/libstdc.so_.6.0.26.zip\nunzip libstdc.so_.6.0.26.zip\n# 将下载的最新版本拷贝到 /usr/lib64\ncp libstdc++.so.6.0.26 /usr/lib64\ncd  /usr/lib64\n# 查看 /usr/lib64下libstdc++.so.6链接的版本\nls -l | grep libstdc++\nlibstdc++.so.6 ->libstdc++.so.6.0.19\n# 删除/usr/lib64原来的软连接libstdc++.so.6，删除之前先备份一份\nsudo rm libstdc++.so.6\n# 链接新的版本\nsudo ln -s libstdc++.so.6.0.26 libstdc++.so.6\n# 查看新版本，成功\nstrings /usr/lib64/libstdc++.so.6 | grep GLIBCXX\n...\nGLIBCXX_3.4.18\nGLIBCXX_3.4.19\nGLIBCXX_3.4.20\nGLIBCXX_3.4.21\nGLIBCXX_3.4.22\nGLIBCXX_3.4.23\nGLIBCXX_3.4.24\nGLIBCXX_3.4.25\nGLIBCXX_3.4.26\nGLIBCXX_DEBUG_MESSAGE_LENGTH\n...\n```\n其实这个方法也算是手动安装，但是问题的关键是他的方式是只升级了libstdc，而我之前纠结的一直是gcc版本。\n\n## 总结\n问题最后圆满解决了，这个过程中也算是学到了不少东西，所以想记录一下。","slug":"tech/linux版本过低情况下使用高版本nodejs","published":1,"updated":"2021-12-22T05:36:18.000Z","_id":"cl102ysex001ltccfh7mxco3k","layout":"post","photos":[],"link":"","content":"<p><strong>我这里针对的低版本linux指的是centos6。</strong></p>\n<h2 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h2><p>最近需要写一个页面，我前段时间一直在用nodejs开发，所以我就选择了react来写页面。在本机开发调试完成之后，部署到linux上出现问题，在运行npm install命令的时候出现如下报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm WARN notsup Unsupported engine for react-scripts@5.0.0: wanted: &#123;&quot;node&quot;:&quot;&gt;=14.0.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: react-scripts@5.0.0</span><br><span class=\"line\">npm WARN notsup Unsupported engine for css-loader@6.5.1: wanted: &#123;&quot;node&quot;:&quot;&gt;= 12.13.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: css-loader@6.5.1</span><br><span class=\"line\">npm WARN notsup Unsupported engine for css-minimizer-webpack-plugin@3.3.1: wanted: &#123;&quot;node&quot;:&quot;&gt;= 12.13.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: css-minimizer-webpack-plugin@3.3.1</span><br><span class=\"line\">npm WARN notsup Unsupported engine for eslint@8.5.0: wanted: &#123;&quot;node&quot;:&quot;^12.22.0 || ^14.17.0 || &gt;=16.0.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: eslint@8.5.0</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p>显然，根据提示是因为node版本太低导致，那首先想到的必然就是升级node版本。</p>\n<h2 id=\"尝试升级node版本失败，gcc版本过低\"><a href=\"#尝试升级node版本失败，gcc版本过低\" class=\"headerlink\" title=\"尝试升级node版本失败，gcc版本过低\"></a>尝试升级node版本失败，gcc版本过低</h2><p>升级node版本有几种办法：</p>\n<ul>\n<li>通过下载<a href=\"https://nodejs.org/en/download/releases/\">官网</a>的二进制包，然后解压缩到目录，再通过ln指令进行node版本的关联。</li>\n<li>第二种方法比较简单，安装node的一个版本管理工具，叫<a href=\"https://github.com/tj/n\">n</a>，然后运行如下指令就可以完成安装：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g n</span><br><span class=\"line\">n node版本号</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n然而在我运行了n 14 之后，却出现了报错如下：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15&#x27; not found (required by node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15&#x27; not found (required by /usr/local/bin/node)</span><br></pre></td></tr></table></figure>\n这个报错我去网上搜了下，原因基本就是因为gcc的版本过低导致。在解决这个问题的时候，我出现了非常多的路线错误，导致这个问题本来挺容易解决的，却绕了很多的弯。</li>\n</ul>\n<h2 id=\"尝试升级gcc版本失败，yum安装源版本过低\"><a href=\"#尝试升级gcc版本失败，yum安装源版本过低\" class=\"headerlink\" title=\"尝试升级gcc版本失败，yum安装源版本过低\"></a>尝试升级gcc版本失败，yum安装源版本过低</h2><p>首先我直接尝试了运行yum安装命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc</span><br></pre></td></tr></table></figure>\n<p>结果报错，提示404。经查发现原来centos已经停止支持centos6版本的linux了，甚至还卸磨杀驴，将之前的yum源也都关闭，不仅如此，国内的所有centos6的镜像yum源也都关闭了。最终我在阿里的镜像源里看到一句话，如果非要用centos6的yum源，访问<a href=\"https://vault.centos.org/\">https://vault.centos.org/</a>。看来centos还是归档了一份镜像源，还算有点良心，但是这个网站也写了下面一段话。</p>\n<blockquote>\n<p>This is <em>NOT</em> an updated tree for installing CentOS Linux : It is a snapshot of the older trees that have been removed from the main CentOS servers as new point releases are released.<br>  This is provided for reference and to provide access to older archived versions, and we do not put security updates into the trees on this server.<br>  Please see this <a href=\"http://www.centos.org/download\">link</a> for active versions of CentOS Linux </p>\n</blockquote>\n<p>总之就是告诉你这个镜像也尽量别用，只是为了老版本linux做的一个备份而已。反正centos意思也很明显了，centos6你就别用了，能升级就升级。<br>那有什么办法呢，先用这个镜像源看看吧。尝试替换yum源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最好是先备份一份，我只是为了复盘问题处理过程，所以省略这一步</span></span></span><br><span class=\"line\">vi /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n<p>可以直接用如下内容替换进去：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意，这是centos6的yum源，更高版本的不要用这个源</span></span><br><span class=\"line\"><span class=\"attr\">[base]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Base - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/os/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\"><span class=\"attr\">[updates]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Updates - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/updates/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#additional packages that may be useful</span></span><br><span class=\"line\"><span class=\"attr\">[extras]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Extras - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/extras/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#additional packages that extend functionality of existing packages</span></span><br><span class=\"line\"><span class=\"attr\">[centosplus]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Plus - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/centosplus/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#contrib - packages by Centos Users</span></span><br><span class=\"line\"><span class=\"attr\">[contrib]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Contrib - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/contrib/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br></pre></td></tr></table></figure>\n<p>这样一通操作之后，通过yum安装gcc倒是走通了，可是。。。安装的版本还是不符合要求，这个yum源下的gcc最高版本还是太低。那咋办？我想到了两个方式，一是手动安装，二是。。。升级linux版本。</p>\n<h2 id=\"尝试手动安装高版本gcc失败\"><a href=\"#尝试手动安装高版本gcc失败\" class=\"headerlink\" title=\"尝试手动安装高版本gcc失败\"></a>尝试手动安装高版本gcc失败</h2><p>过程不再赘述了，基本原因是linux内核版本太低，使得make命令执行失败。</p>\n<h2 id=\"升级lunux版本失败\"><a href=\"#升级lunux版本失败\" class=\"headerlink\" title=\"升级lunux版本失败\"></a>升级lunux版本失败</h2><p>升级linux我确实也去查了下方法，升级失败的原因也挺操蛋的，就是centos全面关闭centos6的支持，甚至连centos6升级到centos7的通道都关了，导致网上查的那些方法都不能用，centos真是全面诠释了什么叫全面关闭对老系统的支持。</p>\n<h2 id=\"回归最早的报错，解决-39-GLIBCXX-3-4-20-39-not-found的问题\"><a href=\"#回归最早的报错，解决-39-GLIBCXX-3-4-20-39-not-found的问题\" class=\"headerlink\" title=\"回归最早的报错，解决&#39;GLIBCXX_3.4.20&#39; not found的问题\"></a>回归最早的报错，解决<code>&#39;GLIBCXX_3.4.20&#39; not found</code>的问题</h2><p>上面解决问题的过程持续了几乎一整天，我在linux版本升级也失败之后，我突然意识到，我只是想要部署个web页面而已啊，为啥会搞的这么麻烦？于是我回归到最早的那个报错，<code>&#39;GLIBCXX_3.4.20&#39; not found</code>，在百度上连续吃瘪之后，我用了谷歌来查这个问题，没想到的是，谷歌出来的一片文章五分钟就解决另外我的问题。<br>这篇文章链接：<a href=\"https://www.jianshu.com/p/050b2b777b9d\">version ‘GLIBCXX_3.4.20’ not found 解决方法</a>。<br>为了防止原文404，我也备份一下这个解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统版本</span><br><span class=\"line\">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br><span class=\"line\">GLIBCXX_3.4</span><br><span class=\"line\">GLIBCXX_3.4.1</span><br><span class=\"line\">GLIBCXX_3.4.2</span><br><span class=\"line\">GLIBCXX_3.4.3</span><br><span class=\"line\">GLIBCXX_3.4.4</span><br><span class=\"line\">GLIBCXX_3.4.5</span><br><span class=\"line\">GLIBCXX_3.4.6</span><br><span class=\"line\">GLIBCXX_3.4.7</span><br><span class=\"line\">GLIBCXX_3.4.8</span><br><span class=\"line\">GLIBCXX_3.4.9</span><br><span class=\"line\">GLIBCXX_3.4.10</span><br><span class=\"line\">GLIBCXX_3.4.11</span><br><span class=\"line\">GLIBCXX_3.4.12</span><br><span class=\"line\">GLIBCXX_3.4.13</span><br><span class=\"line\">GLIBCXX_3.4.14</span><br><span class=\"line\">GLIBCXX_3.4.15</span><br><span class=\"line\">GLIBCXX_3.4.16</span><br><span class=\"line\">GLIBCXX_3.4.17</span><br><span class=\"line\">GLIBCXX_3.4.18</span><br><span class=\"line\">GLIBCXX_3.4.19</span><br><span class=\"line\">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br><span class=\"line\"></span><br><span class=\"line\">发现少了GLIBCXX_3.4.20，解决方法是升级libstdc++.</span><br><span class=\"line\"></span><br><span class=\"line\">2. </span><br><span class=\"line\">sudo yum provides libstdc++.so.6</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Determining fastest mirrors</span><br><span class=\"line\">libstdc++-4.8.5-39.el7.i686 : GNU Standard C++ Library</span><br><span class=\"line\">Repo        : base</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : libstdc++.so.6</span><br><span class=\"line\"></span><br><span class=\"line\">3. </span><br><span class=\"line\">cd /usr/local/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载最新版本的libstdc.so_.6.0.26</span></span><br><span class=\"line\">sudo wget http://www.vuln.cn/wp-content/uploads/2019/08/libstdc.so_.6.0.26.zip</span><br><span class=\"line\">unzip libstdc.so_.6.0.26.zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将下载的最新版本拷贝到 /usr/lib64</span></span><br><span class=\"line\">cp libstdc++.so.6.0.26 /usr/lib64</span><br><span class=\"line\">cd  /usr/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 /usr/lib64下libstdc++.so.6链接的版本</span></span><br><span class=\"line\">ls -l | grep libstdc++</span><br><span class=\"line\">libstdc++.so.6 -&gt;libstdc++.so.6.0.19</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除/usr/lib64原来的软连接libstdc++.so.6，删除之前先备份一份</span></span><br><span class=\"line\">sudo rm libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 链接新的版本</span></span><br><span class=\"line\">sudo ln -s libstdc++.so.6.0.26 libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看新版本，成功</span></span><br><span class=\"line\">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br><span class=\"line\">...</span><br><span class=\"line\">GLIBCXX_3.4.18</span><br><span class=\"line\">GLIBCXX_3.4.19</span><br><span class=\"line\">GLIBCXX_3.4.20</span><br><span class=\"line\">GLIBCXX_3.4.21</span><br><span class=\"line\">GLIBCXX_3.4.22</span><br><span class=\"line\">GLIBCXX_3.4.23</span><br><span class=\"line\">GLIBCXX_3.4.24</span><br><span class=\"line\">GLIBCXX_3.4.25</span><br><span class=\"line\">GLIBCXX_3.4.26</span><br><span class=\"line\">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>其实这个方法也算是手动安装，但是问题的关键是他的方式是只升级了libstdc，而我之前纠结的一直是gcc版本。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>问题最后圆满解决了，这个过程中也算是学到了不少东西，所以想记录一下。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><strong>我这里针对的低版本linux指的是centos6。</strong></p>\n<h2 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h2><p>最近需要写一个页面，我前段时间一直在用nodejs开发，所以我就选择了react来写页面。在本机开发调试完成之后，部署到linux上出现问题，在运行npm install命令的时候出现如下报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm WARN notsup Unsupported engine for react-scripts@5.0.0: wanted: &#123;&quot;node&quot;:&quot;&gt;=14.0.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: react-scripts@5.0.0</span><br><span class=\"line\">npm WARN notsup Unsupported engine for css-loader@6.5.1: wanted: &#123;&quot;node&quot;:&quot;&gt;= 12.13.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: css-loader@6.5.1</span><br><span class=\"line\">npm WARN notsup Unsupported engine for css-minimizer-webpack-plugin@3.3.1: wanted: &#123;&quot;node&quot;:&quot;&gt;= 12.13.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: css-minimizer-webpack-plugin@3.3.1</span><br><span class=\"line\">npm WARN notsup Unsupported engine for eslint@8.5.0: wanted: &#123;&quot;node&quot;:&quot;^12.22.0 || ^14.17.0 || &gt;=16.0.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;10.24.1&quot;,&quot;npm&quot;:&quot;6.14.12&quot;&#125;)</span><br><span class=\"line\">npm WARN notsup Not compatible with your version of node/npm: eslint@8.5.0</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p>显然，根据提示是因为node版本太低导致，那首先想到的必然就是升级node版本。</p>\n<h2 id=\"尝试升级node版本失败，gcc版本过低\"><a href=\"#尝试升级node版本失败，gcc版本过低\" class=\"headerlink\" title=\"尝试升级node版本失败，gcc版本过低\"></a>尝试升级node版本失败，gcc版本过低</h2><p>升级node版本有几种办法：</p>\n<ul>\n<li>通过下载<a href=\"https://nodejs.org/en/download/releases/\">官网</a>的二进制包，然后解压缩到目录，再通过ln指令进行node版本的关联。</li>\n<li>第二种方法比较简单，安装node的一个版本管理工具，叫<a href=\"https://github.com/tj/n\">n</a>，然后运行如下指令就可以完成安装：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g n</span><br><span class=\"line\">n node版本号</span><br></pre></td></tr></table></figure>","more":"然而在我运行了n 14 之后，却出现了报错如下：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5&#x27; not found (required by node)</span><br><span class=\"line\">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15&#x27; not found (required by node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5&#x27; not found (required by /usr/local/bin/node)</span><br><span class=\"line\">/usr/local/bin/node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15&#x27; not found (required by /usr/local/bin/node)</span><br></pre></td></tr></table></figure>\n这个报错我去网上搜了下，原因基本就是因为gcc的版本过低导致。在解决这个问题的时候，我出现了非常多的路线错误，导致这个问题本来挺容易解决的，却绕了很多的弯。</li>\n</ul>\n<h2 id=\"尝试升级gcc版本失败，yum安装源版本过低\"><a href=\"#尝试升级gcc版本失败，yum安装源版本过低\" class=\"headerlink\" title=\"尝试升级gcc版本失败，yum安装源版本过低\"></a>尝试升级gcc版本失败，yum安装源版本过低</h2><p>首先我直接尝试了运行yum安装命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc</span><br></pre></td></tr></table></figure>\n<p>结果报错，提示404。经查发现原来centos已经停止支持centos6版本的linux了，甚至还卸磨杀驴，将之前的yum源也都关闭，不仅如此，国内的所有centos6的镜像yum源也都关闭了。最终我在阿里的镜像源里看到一句话，如果非要用centos6的yum源，访问<a href=\"https://vault.centos.org/\">https://vault.centos.org/</a>。看来centos还是归档了一份镜像源，还算有点良心，但是这个网站也写了下面一段话。</p>\n<blockquote>\n<p>This is <em>NOT</em> an updated tree for installing CentOS Linux : It is a snapshot of the older trees that have been removed from the main CentOS servers as new point releases are released.<br>  This is provided for reference and to provide access to older archived versions, and we do not put security updates into the trees on this server.<br>  Please see this <a href=\"http://www.centos.org/download\">link</a> for active versions of CentOS Linux </p>\n</blockquote>\n<p>总之就是告诉你这个镜像也尽量别用，只是为了老版本linux做的一个备份而已。反正centos意思也很明显了，centos6你就别用了，能升级就升级。<br>那有什么办法呢，先用这个镜像源看看吧。尝试替换yum源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最好是先备份一份，我只是为了复盘问题处理过程，所以省略这一步</span></span></span><br><span class=\"line\">vi /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n<p>可以直接用如下内容替换进去：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意，这是centos6的yum源，更高版本的不要用这个源</span></span><br><span class=\"line\"><span class=\"attr\">[base]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Base - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/os/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\"><span class=\"attr\">[updates]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Updates - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/updates/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#additional packages that may be useful</span></span><br><span class=\"line\"><span class=\"attr\">[extras]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Extras - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/extras/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#additional packages that extend functionality of existing packages</span></span><br><span class=\"line\"><span class=\"attr\">[centosplus]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Plus - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/centosplus/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#contrib - packages by Centos Users</span></span><br><span class=\"line\"><span class=\"attr\">[contrib]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">CentOS-6.10 - Contrib - vault.centos.org</span></span><br><span class=\"line\"><span class=\"attr\">failovermethod</span>=<span class=\"string\">priority</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://vault.centos.org/6.10/contrib/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://vault.centos.org/RPM-GPG-KEY-CentOS-6</span></span><br></pre></td></tr></table></figure>\n<p>这样一通操作之后，通过yum安装gcc倒是走通了，可是。。。安装的版本还是不符合要求，这个yum源下的gcc最高版本还是太低。那咋办？我想到了两个方式，一是手动安装，二是。。。升级linux版本。</p>\n<h2 id=\"尝试手动安装高版本gcc失败\"><a href=\"#尝试手动安装高版本gcc失败\" class=\"headerlink\" title=\"尝试手动安装高版本gcc失败\"></a>尝试手动安装高版本gcc失败</h2><p>过程不再赘述了，基本原因是linux内核版本太低，使得make命令执行失败。</p>\n<h2 id=\"升级lunux版本失败\"><a href=\"#升级lunux版本失败\" class=\"headerlink\" title=\"升级lunux版本失败\"></a>升级lunux版本失败</h2><p>升级linux我确实也去查了下方法，升级失败的原因也挺操蛋的，就是centos全面关闭centos6的支持，甚至连centos6升级到centos7的通道都关了，导致网上查的那些方法都不能用，centos真是全面诠释了什么叫全面关闭对老系统的支持。</p>\n<h2 id=\"回归最早的报错，解决-39-GLIBCXX-3-4-20-39-not-found的问题\"><a href=\"#回归最早的报错，解决-39-GLIBCXX-3-4-20-39-not-found的问题\" class=\"headerlink\" title=\"回归最早的报错，解决&#39;GLIBCXX_3.4.20&#39; not found的问题\"></a>回归最早的报错，解决<code>&#39;GLIBCXX_3.4.20&#39; not found</code>的问题</h2><p>上面解决问题的过程持续了几乎一整天，我在linux版本升级也失败之后，我突然意识到，我只是想要部署个web页面而已啊，为啥会搞的这么麻烦？于是我回归到最早的那个报错，<code>&#39;GLIBCXX_3.4.20&#39; not found</code>，在百度上连续吃瘪之后，我用了谷歌来查这个问题，没想到的是，谷歌出来的一片文章五分钟就解决另外我的问题。<br>这篇文章链接：<a href=\"https://www.jianshu.com/p/050b2b777b9d\">version ‘GLIBCXX_3.4.20’ not found 解决方法</a>。<br>为了防止原文404，我也备份一下这个解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统版本</span><br><span class=\"line\">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br><span class=\"line\">GLIBCXX_3.4</span><br><span class=\"line\">GLIBCXX_3.4.1</span><br><span class=\"line\">GLIBCXX_3.4.2</span><br><span class=\"line\">GLIBCXX_3.4.3</span><br><span class=\"line\">GLIBCXX_3.4.4</span><br><span class=\"line\">GLIBCXX_3.4.5</span><br><span class=\"line\">GLIBCXX_3.4.6</span><br><span class=\"line\">GLIBCXX_3.4.7</span><br><span class=\"line\">GLIBCXX_3.4.8</span><br><span class=\"line\">GLIBCXX_3.4.9</span><br><span class=\"line\">GLIBCXX_3.4.10</span><br><span class=\"line\">GLIBCXX_3.4.11</span><br><span class=\"line\">GLIBCXX_3.4.12</span><br><span class=\"line\">GLIBCXX_3.4.13</span><br><span class=\"line\">GLIBCXX_3.4.14</span><br><span class=\"line\">GLIBCXX_3.4.15</span><br><span class=\"line\">GLIBCXX_3.4.16</span><br><span class=\"line\">GLIBCXX_3.4.17</span><br><span class=\"line\">GLIBCXX_3.4.18</span><br><span class=\"line\">GLIBCXX_3.4.19</span><br><span class=\"line\">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br><span class=\"line\"></span><br><span class=\"line\">发现少了GLIBCXX_3.4.20，解决方法是升级libstdc++.</span><br><span class=\"line\"></span><br><span class=\"line\">2. </span><br><span class=\"line\">sudo yum provides libstdc++.so.6</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Determining fastest mirrors</span><br><span class=\"line\">libstdc++-4.8.5-39.el7.i686 : GNU Standard C++ Library</span><br><span class=\"line\">Repo        : base</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : libstdc++.so.6</span><br><span class=\"line\"></span><br><span class=\"line\">3. </span><br><span class=\"line\">cd /usr/local/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载最新版本的libstdc.so_.6.0.26</span></span><br><span class=\"line\">sudo wget http://www.vuln.cn/wp-content/uploads/2019/08/libstdc.so_.6.0.26.zip</span><br><span class=\"line\">unzip libstdc.so_.6.0.26.zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将下载的最新版本拷贝到 /usr/lib64</span></span><br><span class=\"line\">cp libstdc++.so.6.0.26 /usr/lib64</span><br><span class=\"line\">cd  /usr/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 /usr/lib64下libstdc++.so.6链接的版本</span></span><br><span class=\"line\">ls -l | grep libstdc++</span><br><span class=\"line\">libstdc++.so.6 -&gt;libstdc++.so.6.0.19</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除/usr/lib64原来的软连接libstdc++.so.6，删除之前先备份一份</span></span><br><span class=\"line\">sudo rm libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 链接新的版本</span></span><br><span class=\"line\">sudo ln -s libstdc++.so.6.0.26 libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看新版本，成功</span></span><br><span class=\"line\">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br><span class=\"line\">...</span><br><span class=\"line\">GLIBCXX_3.4.18</span><br><span class=\"line\">GLIBCXX_3.4.19</span><br><span class=\"line\">GLIBCXX_3.4.20</span><br><span class=\"line\">GLIBCXX_3.4.21</span><br><span class=\"line\">GLIBCXX_3.4.22</span><br><span class=\"line\">GLIBCXX_3.4.23</span><br><span class=\"line\">GLIBCXX_3.4.24</span><br><span class=\"line\">GLIBCXX_3.4.25</span><br><span class=\"line\">GLIBCXX_3.4.26</span><br><span class=\"line\">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>其实这个方法也算是手动安装，但是问题的关键是他的方式是只升级了libstdc，而我之前纠结的一直是gcc版本。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>问题最后圆满解决了，这个过程中也算是学到了不少东西，所以想记录一下。</p>"},{"title":"linux日常维护命令","date":"2019-10-16T06:32:27.000Z","comments":1,"_content":"\n## find  \n### 删除测试库创建日期在10天以前的日志  \n```shell\nfind /home -ctime +10 -type f -name \"*log.log.20*\" | xargs rm -rf\n```\n\n## 查看磁盘空间和大文件  \n\n### 查看磁盘剩余空间  \n\n```shell\ndf -h\n```\n\n### 查看目录下大文件  \n\n``` shell\ndu -h --max-depth=1\n```\n\n## 查看进程中的java程序  \n\n```shell\nps aux | grep java\n# 杀死某个进程\nkill -9 pid\n```\n\n## 修改hostname\n\n```shell\nvi /etc/sysconfig/network\n```\n\n## 传输文件\n\n```shell\nscp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@192.168.15.161:/home/bos-provider/bos-provider-1.0-SNAPSHOT/bin\n\n```\n<!-- more -->\n## MQ查询命令\n\n#### 查询某条消息的生产者和消费者，以及消息的track路径\n\n1.进入/usr/java/rocketmq/bin\n2.根据key查找\n\n```shell\nsh mqadmin queryMsgBykey -n 127.0.0.1:9876 -k b6df2c64-4654-409d-b457-ec1db294a606 -t ORDER\n```\n\n3.根据key可以找到ID\n   根据ID查找消费者和生产者\n\n```shell\nsh mqadmin queryMsgById -n 127.0.0.1:9876 -i C0A8074100002A9F00000001A2BC9012\n```\n\n#### 查看topiclist\n```shell\nsh mqadmin topicList –n 127.0.0.1:9876\n```\n\n","source":"_posts/tech/linux日常维护命令.md","raw":"---\ntitle: linux日常维护命令\ndate: 2019-10-16 14:32:27\ntags: \n- linux\ncomments: true\ncategories: \n- 学习\n- 运维\n---\n\n## find  \n### 删除测试库创建日期在10天以前的日志  \n```shell\nfind /home -ctime +10 -type f -name \"*log.log.20*\" | xargs rm -rf\n```\n\n## 查看磁盘空间和大文件  \n\n### 查看磁盘剩余空间  \n\n```shell\ndf -h\n```\n\n### 查看目录下大文件  \n\n``` shell\ndu -h --max-depth=1\n```\n\n## 查看进程中的java程序  \n\n```shell\nps aux | grep java\n# 杀死某个进程\nkill -9 pid\n```\n\n## 修改hostname\n\n```shell\nvi /etc/sysconfig/network\n```\n\n## 传输文件\n\n```shell\nscp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@192.168.15.161:/home/bos-provider/bos-provider-1.0-SNAPSHOT/bin\n\n```\n<!-- more -->\n## MQ查询命令\n\n#### 查询某条消息的生产者和消费者，以及消息的track路径\n\n1.进入/usr/java/rocketmq/bin\n2.根据key查找\n\n```shell\nsh mqadmin queryMsgBykey -n 127.0.0.1:9876 -k b6df2c64-4654-409d-b457-ec1db294a606 -t ORDER\n```\n\n3.根据key可以找到ID\n   根据ID查找消费者和生产者\n\n```shell\nsh mqadmin queryMsgById -n 127.0.0.1:9876 -i C0A8074100002A9F00000001A2BC9012\n```\n\n#### 查看topiclist\n```shell\nsh mqadmin topicList –n 127.0.0.1:9876\n```\n\n","slug":"tech/linux日常维护命令","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102ysg8001ptccfhf75ca8q","layout":"post","photos":[],"link":"","content":"<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><h3 id=\"删除测试库创建日期在10天以前的日志\"><a href=\"#删除测试库创建日期在10天以前的日志\" class=\"headerlink\" title=\"删除测试库创建日期在10天以前的日志\"></a>删除测试库创建日期在10天以前的日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -ctime +10 -type f -name &quot;*log.log.20*&quot; | xargs rm -rf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看磁盘空间和大文件\"><a href=\"#查看磁盘空间和大文件\" class=\"headerlink\" title=\"查看磁盘空间和大文件\"></a>查看磁盘空间和大文件</h2><h3 id=\"查看磁盘剩余空间\"><a href=\"#查看磁盘剩余空间\" class=\"headerlink\" title=\"查看磁盘剩余空间\"></a>查看磁盘剩余空间</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看目录下大文件\"><a href=\"#查看目录下大文件\" class=\"headerlink\" title=\"查看目录下大文件\"></a>查看目录下大文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -h --max-depth=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看进程中的java程序\"><a href=\"#查看进程中的java程序\" class=\"headerlink\" title=\"查看进程中的java程序\"></a>查看进程中的java程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep java</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 杀死某个进程</span></span><br><span class=\"line\">kill -9 pid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改hostname\"><a href=\"#修改hostname\" class=\"headerlink\" title=\"修改hostname\"></a>修改hostname</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"传输文件\"><a href=\"#传输文件\" class=\"headerlink\" title=\"传输文件\"></a>传输文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@192.168.15.161:/home/bos-provider/bos-provider-1.0-SNAPSHOT/bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"MQ查询命令\"><a href=\"#MQ查询命令\" class=\"headerlink\" title=\"MQ查询命令\"></a>MQ查询命令</h2><h4 id=\"查询某条消息的生产者和消费者，以及消息的track路径\"><a href=\"#查询某条消息的生产者和消费者，以及消息的track路径\" class=\"headerlink\" title=\"查询某条消息的生产者和消费者，以及消息的track路径\"></a>查询某条消息的生产者和消费者，以及消息的track路径</h4><p>1.进入/usr/java/rocketmq/bin<br>2.根据key查找</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin queryMsgBykey -n 127.0.0.1:9876 -k b6df2c64-4654-409d-b457-ec1db294a606 -t ORDER</span><br></pre></td></tr></table></figure>\n\n<p>3.根据key可以找到ID<br>   根据ID查找消费者和生产者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin queryMsgById -n 127.0.0.1:9876 -i C0A8074100002A9F00000001A2BC9012</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看topiclist\"><a href=\"#查看topiclist\" class=\"headerlink\" title=\"查看topiclist\"></a>查看topiclist</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin topicList –n 127.0.0.1:9876</span><br></pre></td></tr></table></figure>\n\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><h3 id=\"删除测试库创建日期在10天以前的日志\"><a href=\"#删除测试库创建日期在10天以前的日志\" class=\"headerlink\" title=\"删除测试库创建日期在10天以前的日志\"></a>删除测试库创建日期在10天以前的日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -ctime +10 -type f -name &quot;*log.log.20*&quot; | xargs rm -rf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看磁盘空间和大文件\"><a href=\"#查看磁盘空间和大文件\" class=\"headerlink\" title=\"查看磁盘空间和大文件\"></a>查看磁盘空间和大文件</h2><h3 id=\"查看磁盘剩余空间\"><a href=\"#查看磁盘剩余空间\" class=\"headerlink\" title=\"查看磁盘剩余空间\"></a>查看磁盘剩余空间</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看目录下大文件\"><a href=\"#查看目录下大文件\" class=\"headerlink\" title=\"查看目录下大文件\"></a>查看目录下大文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -h --max-depth=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看进程中的java程序\"><a href=\"#查看进程中的java程序\" class=\"headerlink\" title=\"查看进程中的java程序\"></a>查看进程中的java程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep java</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 杀死某个进程</span></span><br><span class=\"line\">kill -9 pid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改hostname\"><a href=\"#修改hostname\" class=\"headerlink\" title=\"修改hostname\"></a>修改hostname</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"传输文件\"><a href=\"#传输文件\" class=\"headerlink\" title=\"传输文件\"></a>传输文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@192.168.15.161:/home/bos-provider/bos-provider-1.0-SNAPSHOT/bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"MQ查询命令\"><a href=\"#MQ查询命令\" class=\"headerlink\" title=\"MQ查询命令\"></a>MQ查询命令</h2><h4 id=\"查询某条消息的生产者和消费者，以及消息的track路径\"><a href=\"#查询某条消息的生产者和消费者，以及消息的track路径\" class=\"headerlink\" title=\"查询某条消息的生产者和消费者，以及消息的track路径\"></a>查询某条消息的生产者和消费者，以及消息的track路径</h4><p>1.进入/usr/java/rocketmq/bin<br>2.根据key查找</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin queryMsgBykey -n 127.0.0.1:9876 -k b6df2c64-4654-409d-b457-ec1db294a606 -t ORDER</span><br></pre></td></tr></table></figure>\n\n<p>3.根据key可以找到ID<br>   根据ID查找消费者和生产者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin queryMsgById -n 127.0.0.1:9876 -i C0A8074100002A9F00000001A2BC9012</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看topiclist\"><a href=\"#查看topiclist\" class=\"headerlink\" title=\"查看topiclist\"></a>查看topiclist</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin topicList –n 127.0.0.1:9876</span><br></pre></td></tr></table></figure>"},{"title":"jenkins简单搭建","date":"2020-05-14T05:37:55.000Z","_content":"## 下载和安装jenkins\n相对简单的办法，依次执行以下语句(前提，需要先安装rpm) \n```shell\n#获取jenkins的rpm安装文件\nwget https://pkg.jenkins.io/redhat-stable/jenkins-2.222.3-1.1.noarch.rpm\n#使用rpm安装\nrpm -ivh jenkins-2.222.3-1.1.noarch.rpm \n```\n\n## 启动jenkins \njenkins启动需要先安装java，java的安装不再赘述，java安装完成后，修改jenkins配置文件，指向java的安装目录 \n```shell\nvi /etc/init.d/jenkins\n```\n在\"candidates=\"这一行加入java安装目录，如果默认配置里面已经指向了你的java安装目录，则不需要再次配置。\n```shell\ncandidates=\"\n/etc/alternatives/java\n/usr/lib/jvm/java-1.8.0/bin/java\n/usr/lib/jvm/jre-1.8.0/bin/java\n/usr/lib/jvm/java-1.7.0/bin/java\n/usr/lib/jvm/jre-1.7.0/bin/java\n/usr/lib/jvm/java-11.0/bin/java\n/usr/lib/jvm/jre-11.0/bin/java\n/usr/lib/jvm/java-11-openjdk-amd64\n/usr/bin/java\n/usr/java/jdk1.8.0_121/jre/bin/java\n\"\n``` \n<!-- more -->\n修改jenkins端口 \n```shell\nvi /etc/sysconfig/jenkins\n# JENKINS_PORT=\"8999\"\n``` \n\n配置完成后，执行：\n```shell\nservice jenkins start\n```\n执行\n```shell\nservice jenkins status\n``` \n出现以下截图说明成功启动\n![](1.png)  \n\n## 配置jenkins\n访问 http://localhost:8999/ 即可看到jenkins的启动页面，稍等一会儿，看到如下页面：\n![](2.png)  \n接下来按照页面指引一步步安装即可。\n- 需要注意的点：插件按照推荐插件安装后，可能会有个别插件无法完成安装，这时不要选择重试，直接跳过，在Manage Jenkins - Mange Plugins - 高级，修改URL为 http://mirror.esuni.jp/jenkins/updates/update-center.json ，然后再更新插件即可。  \n\n","source":"_posts/tech/jenkins简单搭建.md","raw":"---\ntitle: jenkins简单搭建\ndate: 2020-05-14 13:37:55\ntags:\n- jenkins\ncategories:\n- 学习\n- 搭建相关\n---\n## 下载和安装jenkins\n相对简单的办法，依次执行以下语句(前提，需要先安装rpm) \n```shell\n#获取jenkins的rpm安装文件\nwget https://pkg.jenkins.io/redhat-stable/jenkins-2.222.3-1.1.noarch.rpm\n#使用rpm安装\nrpm -ivh jenkins-2.222.3-1.1.noarch.rpm \n```\n\n## 启动jenkins \njenkins启动需要先安装java，java的安装不再赘述，java安装完成后，修改jenkins配置文件，指向java的安装目录 \n```shell\nvi /etc/init.d/jenkins\n```\n在\"candidates=\"这一行加入java安装目录，如果默认配置里面已经指向了你的java安装目录，则不需要再次配置。\n```shell\ncandidates=\"\n/etc/alternatives/java\n/usr/lib/jvm/java-1.8.0/bin/java\n/usr/lib/jvm/jre-1.8.0/bin/java\n/usr/lib/jvm/java-1.7.0/bin/java\n/usr/lib/jvm/jre-1.7.0/bin/java\n/usr/lib/jvm/java-11.0/bin/java\n/usr/lib/jvm/jre-11.0/bin/java\n/usr/lib/jvm/java-11-openjdk-amd64\n/usr/bin/java\n/usr/java/jdk1.8.0_121/jre/bin/java\n\"\n``` \n<!-- more -->\n修改jenkins端口 \n```shell\nvi /etc/sysconfig/jenkins\n# JENKINS_PORT=\"8999\"\n``` \n\n配置完成后，执行：\n```shell\nservice jenkins start\n```\n执行\n```shell\nservice jenkins status\n``` \n出现以下截图说明成功启动\n![](1.png)  \n\n## 配置jenkins\n访问 http://localhost:8999/ 即可看到jenkins的启动页面，稍等一会儿，看到如下页面：\n![](2.png)  \n接下来按照页面指引一步步安装即可。\n- 需要注意的点：插件按照推荐插件安装后，可能会有个别插件无法完成安装，这时不要选择重试，直接跳过，在Manage Jenkins - Mange Plugins - 高级，修改URL为 http://mirror.esuni.jp/jenkins/updates/update-center.json ，然后再更新插件即可。  \n\n","slug":"tech/jenkins简单搭建","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102ysl3001ttccf6iak8iec","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"下载和安装jenkins\"><a href=\"#下载和安装jenkins\" class=\"headerlink\" title=\"下载和安装jenkins\"></a>下载和安装jenkins</h2><p>相对简单的办法，依次执行以下语句(前提，需要先安装rpm) </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取jenkins的rpm安装文件</span></span><br><span class=\"line\">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.222.3-1.1.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用rpm安装</span></span><br><span class=\"line\">rpm -ivh jenkins-2.222.3-1.1.noarch.rpm </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动jenkins\"><a href=\"#启动jenkins\" class=\"headerlink\" title=\"启动jenkins\"></a>启动jenkins</h2><p>jenkins启动需要先安装java，java的安装不再赘述，java安装完成后，修改jenkins配置文件，指向java的安装目录 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/init.d/jenkins</span><br></pre></td></tr></table></figure>\n<p>在”candidates=”这一行加入java安装目录，如果默认配置里面已经指向了你的java安装目录，则不需要再次配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candidates=&quot;</span><br><span class=\"line\">/etc/alternatives/java</span><br><span class=\"line\">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-1.7.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-1.7.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-11.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-11.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\">/usr/java/jdk1.8.0_121/jre/bin/java</span><br><span class=\"line\">&quot;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>修改jenkins端口 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/jenkins</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JENKINS_PORT=<span class=\"string\">&quot;8999&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins status</span><br></pre></td></tr></table></figure>\n<p>出现以下截图说明成功启动<br><img src=\"/2020/05/14/tech/jenkins%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/1.png\">  </p>\n<h2 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h2><p>访问 <a href=\"http://localhost:8999/\">http://localhost:8999/</a> 即可看到jenkins的启动页面，稍等一会儿，看到如下页面：<br><img src=\"/2020/05/14/tech/jenkins%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/2.png\"><br>接下来按照页面指引一步步安装即可。</p>\n<ul>\n<li>需要注意的点：插件按照推荐插件安装后，可能会有个别插件无法完成安装，这时不要选择重试，直接跳过，在Manage Jenkins - Mange Plugins - 高级，修改URL为 <a href=\"http://mirror.esuni.jp/jenkins/updates/update-center.json\">http://mirror.esuni.jp/jenkins/updates/update-center.json</a> ，然后再更新插件即可。  </li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"下载和安装jenkins\"><a href=\"#下载和安装jenkins\" class=\"headerlink\" title=\"下载和安装jenkins\"></a>下载和安装jenkins</h2><p>相对简单的办法，依次执行以下语句(前提，需要先安装rpm) </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取jenkins的rpm安装文件</span></span><br><span class=\"line\">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.222.3-1.1.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用rpm安装</span></span><br><span class=\"line\">rpm -ivh jenkins-2.222.3-1.1.noarch.rpm </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动jenkins\"><a href=\"#启动jenkins\" class=\"headerlink\" title=\"启动jenkins\"></a>启动jenkins</h2><p>jenkins启动需要先安装java，java的安装不再赘述，java安装完成后，修改jenkins配置文件，指向java的安装目录 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/init.d/jenkins</span><br></pre></td></tr></table></figure>\n<p>在”candidates=”这一行加入java安装目录，如果默认配置里面已经指向了你的java安装目录，则不需要再次配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candidates=&quot;</span><br><span class=\"line\">/etc/alternatives/java</span><br><span class=\"line\">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-1.7.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-1.7.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-11.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/jre-11.0/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\">/usr/java/jdk1.8.0_121/jre/bin/java</span><br><span class=\"line\">&quot;</span><br></pre></td></tr></table></figure>","more":"<p>修改jenkins端口 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/jenkins</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JENKINS_PORT=<span class=\"string\">&quot;8999&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins status</span><br></pre></td></tr></table></figure>\n<p>出现以下截图说明成功启动<br><img src=\"/2020/05/14/tech/jenkins%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/1.png\">  </p>\n<h2 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h2><p>访问 <a href=\"http://localhost:8999/\">http://localhost:8999/</a> 即可看到jenkins的启动页面，稍等一会儿，看到如下页面：<br><img src=\"/2020/05/14/tech/jenkins%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/2.png\"><br>接下来按照页面指引一步步安装即可。</p>\n<ul>\n<li>需要注意的点：插件按照推荐插件安装后，可能会有个别插件无法完成安装，这时不要选择重试，直接跳过，在Manage Jenkins - Mange Plugins - 高级，修改URL为 <a href=\"http://mirror.esuni.jp/jenkins/updates/update-center.json\">http://mirror.esuni.jp/jenkins/updates/update-center.json</a> ，然后再更新插件即可。  </li>\n</ul>"},{"title":"hexo使用技巧","date":"2019-10-08T08:07:43.000Z","comments":1,"_content":"## 更换主题  \n1.进入https://hexo.io/themes/ 可以选择多种主题  \n![](1.png) \n点击图片进去可以看到这种主题的预览效果  \n点击文字进去将进入这个主题的github站点, 里面会详细说明该主题的安装和配置方式  \n\n2.目前最流行的hexo主题应该是NexT, 我这次选的是3-hexo作为例子来讲解一下, 这个也是一个优秀的国产hexo主题  \n其最终效果如图  \n![](2.png)   \n\n3.关于3-hexo的安装和设置方法, 都可以直接参照[该主题的github主页](https://github.com/yelog/hexo-theme-3-hexo)  \n简单介绍一下:  \n  - 获取3-hexo: git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo  \n  - 将3-hexo的主题文件夹复制到hexo的themes目录下  \n  - 修改3-hexo目录下的_config.yml文件, 修改方式在_config.yml中已经有详细的注释, 按照注释修改即可  \n  - hexo主目录下打开git窗口, 依次输入如下命令  \n    hexo clean (清除静态页面缓存文件, 防止出现缓存影响页面样式的情况)  \n    hexo g (生成静态页面)  \n    hexo s (启动本地hexo服务器, 可以打开localhost:4000查看页面效果)  \n    hexo d (发布到github)  \n<!-- more -->\n\n## 设置分类和标签  \n1.每一个由hexo生成的md文件, 其内容开头都是由两个\"---\"组成的, hexo把这部分称为[Front-Matter](https://hexo.io/zh-cn/docs/front-matter), 如图:  \n![](3.png)  \n \n2.在Front-Matter的区域内可以设置关于文章的诸多信息, 包括标题, 创建时间, 标签, 目录, 是否开启评论等  \n\n3.标签的参数名称为tags, 目录的参数名称为categories, 设置单个标签和目录的格式如下:  \n```\ntags: hexo\ncategories: hexo\n```\n设置多个标签和多级目录的格式如下:  \n```\ntags: \n- hexo\n- blog\ncategories: \n- 学习\n- 搭建相关\n```\n**注意:目录的先后顺序决定了其父子级关系, 如上面的例子中, \"学习\"目录是\"搭建相关\"目录的父目录. 在3-hexo主题中的效果如下:**  \n![](4.png)\n\n### 以下是我的hexo更新之后需要额外操作的步骤\n4.使用命令创建tags和categories目录\n ```\n hexo new page tags\n hexo new page categories\n ```\n这样会在source目录下生成tags和categories目录，并在该目录下生成index.md文件\n5.在tags目录下index.md文件内增加一行 **type: tags**，如下\n```\ntitle: tags\ndate: 2021-11-23 08:46:12\ntype: tags\n```\n在categories.md文件内增加一行 **type: categories**，如下\n```\ntitle: categories\ndate: 2021-11-23 08:46:12\ntype: categories\n```\n6.重新执行hexo g即生成目录和标签\n\n## MarkDown开发工具  \n我本人不太喜欢为markdown开发再安装一个软件, 所以以下都是针对程序员电脑上通常已有的软件上安装插件, 当然如果没有这些软件, 那推荐直接安装[typora](https://typora.io/)  \n\n1.Notepad++插件MarkdownViewer++  \n如果已经安装了Notepad++, 可以直接下载[MarkdownViewer++](https://github.com/nea/MarkdownViewerPlusPlus/releases)插件  \n下载完成后, 直接将dll文件放入Notepad++主目录下的plugin文件夹下, 然后重新启动Notepad++即可, 在Notepad++的工具栏会出现一个\"m\"图标:  \n![](5.png)  \n点击即可实时查看页面效果  \n优点: 插件轻量级, 1MB不到, 占用系统的内存消耗极小  \n缺点: 功能非常有限, 只能实时查看效果, 不能对markdown语法高亮  \n\n2.Idea插件MarkDown Navigator\n其实Idea自带了一个MarkDown的插件, 但是这个插件不太好用, 所以这里不再介绍了  \n打开Idea, 打开File-Settings-Plugins-Browse Repositories, 查找MarkDown Navigator, 点击Install, 重新启动Idea即可  \n效果如图:  \n![](6.png)  \n优点: 支持MarkDown语法高亮, 支持语法快捷键, 且在Idea内开发, 对于程序员来说比较习惯  \n缺点: 毕竟需要Idea来开发, 对于仅仅只要写博客的人来说, 显得有点笨重  \n\n3.MarkDown在线编辑器  \n在线编辑的好处不言自明, 不用安装任何软件和插件, 只要有浏览器就行\n推荐https://www.mdeditor.com/ \n\n## 为博客设置密码  \n1.安装插件: 在hexo主目录下执行npm install --save hexo-blog-encrypt  \n2.在需要设置密码的博客的Front-Matter里面加一个参数  \npassword:*****  \n\n## 如何上传图片  \n1.在github存储图片并在博客内关联图片链接  \n这种方式比较推荐, 因为别的博客网站通常都会有防止外部访问的措施在, 存储\n在github上的图片不会有外部无法访问的情况. 对于各个版本的hexo都能适用.\n  - 打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true\n  - 使用hexo n \"博客标题\" 新建博客时将会同时新建一个同名的资源文件夹, 如图  \n  ![](7.png)  \n  - 将博客内用到的图片放置到资源文件夹内, 可以按顺序号命名, 如图  \n  ![](8.png)\n  - 在博客内链接该图片, 格式为 \n  ```hexo\n  ![](https://raw.githubusercontent.com/#username/#username.github.io/master/#YYYY/#MM/#DD/#title/#photoname)  \n  #username : github用户名\n  #YYYY/#MM/#DD : 如果没有修改_config.yml里的默认文件夹创建方式的话, 就是填入年月日即可, 如2019/10/14  \n  #title : 文章标题  \n  #photoname : 图片名称  \n  ```\n  比如我这篇博客的图片链接地址如下图  \n  ![](9.png)  \n  - 链接完图片后目前在博客的预览界面还无法看到图片, 需要先执行  \n  hexo clean (非必要步骤, 如果博客页面格式显示不正确, 需要执行)  \n  hexo g (创建博客静态网页文件)  \n  hexo d (这一步用于发布博客, 也同时发布图片)  \n  hexo d的命令将会把图片发布到github服务器上, 也就可以在上述格式的图片地址里看到该图片  \n  \n2.直接链接本地地址, 这种方式也很方便, 网上也有挺多人使用这种方式, 主要优点\n是不用多操作一步链接网络地址, 我贴一下该方式:\n  1. 打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true\n  2. 安装图片插件 npm install hexo-asset-image --save \n     或者安装  npm install hexo-renderer-marked -s\n  3. 在博客内直接引用本地地址即可, 如  \n  ``` hexo\n  ![](/1.png)\n  ```\n## 设置首页文章摘要\n有三种方法，推荐使用第一种，更加灵活的根据文章进行不同长度的摘要截断，而且对于不同的插件也有最好的适应性\n1.在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式\n2.在文章的 front-matter 中添加 description，并提供文章摘录 \n3.自动形成摘要，在 主题配置文件 中添加\n```properties\nauto_excerpt:\n  enable: true\n  length: 150\n```\n默认截取的长度为 150 字符，可以根据需要自行设定","source":"_posts/tech/hexo使用技巧.md","raw":"---\ntitle: hexo使用技巧\ndate: 2019-10-08 16:07:43\ntags: \n- hexo\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n## 更换主题  \n1.进入https://hexo.io/themes/ 可以选择多种主题  \n![](1.png) \n点击图片进去可以看到这种主题的预览效果  \n点击文字进去将进入这个主题的github站点, 里面会详细说明该主题的安装和配置方式  \n\n2.目前最流行的hexo主题应该是NexT, 我这次选的是3-hexo作为例子来讲解一下, 这个也是一个优秀的国产hexo主题  \n其最终效果如图  \n![](2.png)   \n\n3.关于3-hexo的安装和设置方法, 都可以直接参照[该主题的github主页](https://github.com/yelog/hexo-theme-3-hexo)  \n简单介绍一下:  \n  - 获取3-hexo: git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo  \n  - 将3-hexo的主题文件夹复制到hexo的themes目录下  \n  - 修改3-hexo目录下的_config.yml文件, 修改方式在_config.yml中已经有详细的注释, 按照注释修改即可  \n  - hexo主目录下打开git窗口, 依次输入如下命令  \n    hexo clean (清除静态页面缓存文件, 防止出现缓存影响页面样式的情况)  \n    hexo g (生成静态页面)  \n    hexo s (启动本地hexo服务器, 可以打开localhost:4000查看页面效果)  \n    hexo d (发布到github)  \n<!-- more -->\n\n## 设置分类和标签  \n1.每一个由hexo生成的md文件, 其内容开头都是由两个\"---\"组成的, hexo把这部分称为[Front-Matter](https://hexo.io/zh-cn/docs/front-matter), 如图:  \n![](3.png)  \n \n2.在Front-Matter的区域内可以设置关于文章的诸多信息, 包括标题, 创建时间, 标签, 目录, 是否开启评论等  \n\n3.标签的参数名称为tags, 目录的参数名称为categories, 设置单个标签和目录的格式如下:  \n```\ntags: hexo\ncategories: hexo\n```\n设置多个标签和多级目录的格式如下:  \n```\ntags: \n- hexo\n- blog\ncategories: \n- 学习\n- 搭建相关\n```\n**注意:目录的先后顺序决定了其父子级关系, 如上面的例子中, \"学习\"目录是\"搭建相关\"目录的父目录. 在3-hexo主题中的效果如下:**  \n![](4.png)\n\n### 以下是我的hexo更新之后需要额外操作的步骤\n4.使用命令创建tags和categories目录\n ```\n hexo new page tags\n hexo new page categories\n ```\n这样会在source目录下生成tags和categories目录，并在该目录下生成index.md文件\n5.在tags目录下index.md文件内增加一行 **type: tags**，如下\n```\ntitle: tags\ndate: 2021-11-23 08:46:12\ntype: tags\n```\n在categories.md文件内增加一行 **type: categories**，如下\n```\ntitle: categories\ndate: 2021-11-23 08:46:12\ntype: categories\n```\n6.重新执行hexo g即生成目录和标签\n\n## MarkDown开发工具  \n我本人不太喜欢为markdown开发再安装一个软件, 所以以下都是针对程序员电脑上通常已有的软件上安装插件, 当然如果没有这些软件, 那推荐直接安装[typora](https://typora.io/)  \n\n1.Notepad++插件MarkdownViewer++  \n如果已经安装了Notepad++, 可以直接下载[MarkdownViewer++](https://github.com/nea/MarkdownViewerPlusPlus/releases)插件  \n下载完成后, 直接将dll文件放入Notepad++主目录下的plugin文件夹下, 然后重新启动Notepad++即可, 在Notepad++的工具栏会出现一个\"m\"图标:  \n![](5.png)  \n点击即可实时查看页面效果  \n优点: 插件轻量级, 1MB不到, 占用系统的内存消耗极小  \n缺点: 功能非常有限, 只能实时查看效果, 不能对markdown语法高亮  \n\n2.Idea插件MarkDown Navigator\n其实Idea自带了一个MarkDown的插件, 但是这个插件不太好用, 所以这里不再介绍了  \n打开Idea, 打开File-Settings-Plugins-Browse Repositories, 查找MarkDown Navigator, 点击Install, 重新启动Idea即可  \n效果如图:  \n![](6.png)  \n优点: 支持MarkDown语法高亮, 支持语法快捷键, 且在Idea内开发, 对于程序员来说比较习惯  \n缺点: 毕竟需要Idea来开发, 对于仅仅只要写博客的人来说, 显得有点笨重  \n\n3.MarkDown在线编辑器  \n在线编辑的好处不言自明, 不用安装任何软件和插件, 只要有浏览器就行\n推荐https://www.mdeditor.com/ \n\n## 为博客设置密码  \n1.安装插件: 在hexo主目录下执行npm install --save hexo-blog-encrypt  \n2.在需要设置密码的博客的Front-Matter里面加一个参数  \npassword:*****  \n\n## 如何上传图片  \n1.在github存储图片并在博客内关联图片链接  \n这种方式比较推荐, 因为别的博客网站通常都会有防止外部访问的措施在, 存储\n在github上的图片不会有外部无法访问的情况. 对于各个版本的hexo都能适用.\n  - 打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true\n  - 使用hexo n \"博客标题\" 新建博客时将会同时新建一个同名的资源文件夹, 如图  \n  ![](7.png)  \n  - 将博客内用到的图片放置到资源文件夹内, 可以按顺序号命名, 如图  \n  ![](8.png)\n  - 在博客内链接该图片, 格式为 \n  ```hexo\n  ![](https://raw.githubusercontent.com/#username/#username.github.io/master/#YYYY/#MM/#DD/#title/#photoname)  \n  #username : github用户名\n  #YYYY/#MM/#DD : 如果没有修改_config.yml里的默认文件夹创建方式的话, 就是填入年月日即可, 如2019/10/14  \n  #title : 文章标题  \n  #photoname : 图片名称  \n  ```\n  比如我这篇博客的图片链接地址如下图  \n  ![](9.png)  \n  - 链接完图片后目前在博客的预览界面还无法看到图片, 需要先执行  \n  hexo clean (非必要步骤, 如果博客页面格式显示不正确, 需要执行)  \n  hexo g (创建博客静态网页文件)  \n  hexo d (这一步用于发布博客, 也同时发布图片)  \n  hexo d的命令将会把图片发布到github服务器上, 也就可以在上述格式的图片地址里看到该图片  \n  \n2.直接链接本地地址, 这种方式也很方便, 网上也有挺多人使用这种方式, 主要优点\n是不用多操作一步链接网络地址, 我贴一下该方式:\n  1. 打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true\n  2. 安装图片插件 npm install hexo-asset-image --save \n     或者安装  npm install hexo-renderer-marked -s\n  3. 在博客内直接引用本地地址即可, 如  \n  ``` hexo\n  ![](/1.png)\n  ```\n## 设置首页文章摘要\n有三种方法，推荐使用第一种，更加灵活的根据文章进行不同长度的摘要截断，而且对于不同的插件也有最好的适应性\n1.在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式\n2.在文章的 front-matter 中添加 description，并提供文章摘录 \n3.自动形成摘要，在 主题配置文件 中添加\n```properties\nauto_excerpt:\n  enable: true\n  length: 150\n```\n默认截取的长度为 150 字符，可以根据需要自行设定","slug":"tech/hexo使用技巧","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102ysr6001xtccf2nqlhofr","layout":"post","photos":[],"link":"","content":"<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p>1.进入<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> 可以选择多种主题<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1.png\"><br>点击图片进去可以看到这种主题的预览效果<br>点击文字进去将进入这个主题的github站点, 里面会详细说明该主题的安装和配置方式  </p>\n<p>2.目前最流行的hexo主题应该是NexT, 我这次选的是3-hexo作为例子来讲解一下, 这个也是一个优秀的国产hexo主题<br>其最终效果如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2.png\">   </p>\n<p>3.关于3-hexo的安装和设置方法, 都可以直接参照<a href=\"https://github.com/yelog/hexo-theme-3-hexo\">该主题的github主页</a><br>简单介绍一下:  </p>\n<ul>\n<li>获取3-hexo: git clone <a href=\"https://github.com/yelog/hexo-theme-3-hexo.git\">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes/3-hexo  </li>\n<li>将3-hexo的主题文件夹复制到hexo的themes目录下  </li>\n<li>修改3-hexo目录下的_config.yml文件, 修改方式在_config.yml中已经有详细的注释, 按照注释修改即可  </li>\n<li>hexo主目录下打开git窗口, 依次输入如下命令<br>hexo clean (清除静态页面缓存文件, 防止出现缓存影响页面样式的情况)<br>hexo g (生成静态页面)<br>hexo s (启动本地hexo服务器, 可以打开localhost:4000查看页面效果)<br>hexo d (发布到github)  <span id=\"more\"></span></li>\n</ul>\n<h2 id=\"设置分类和标签\"><a href=\"#设置分类和标签\" class=\"headerlink\" title=\"设置分类和标签\"></a>设置分类和标签</h2><p>1.每一个由hexo生成的md文件, 其内容开头都是由两个”—“组成的, hexo把这部分称为<a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-Matter</a>, 如图:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/3.png\">  </p>\n<p>2.在Front-Matter的区域内可以设置关于文章的诸多信息, 包括标题, 创建时间, 标签, 目录, 是否开启评论等  </p>\n<p>3.标签的参数名称为tags, 目录的参数名称为categories, 设置单个标签和目录的格式如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n<p>设置多个标签和多级目录的格式如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: </span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- blog</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- 学习</span><br><span class=\"line\">- 搭建相关</span><br></pre></td></tr></table></figure>\n<p><strong>注意:目录的先后顺序决定了其父子级关系, 如上面的例子中, “学习”目录是”搭建相关”目录的父目录. 在3-hexo主题中的效果如下:</strong><br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/4.png\"></p>\n<h3 id=\"以下是我的hexo更新之后需要额外操作的步骤\"><a href=\"#以下是我的hexo更新之后需要额外操作的步骤\" class=\"headerlink\" title=\"以下是我的hexo更新之后需要额外操作的步骤\"></a>以下是我的hexo更新之后需要额外操作的步骤</h3><p>4.使用命令创建tags和categories目录<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure><br>这样会在source目录下生成tags和categories目录，并在该目录下生成index.md文件<br>5.在tags目录下index.md文件内增加一行 <strong>type: tags</strong>，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-11-23 08:46:12</span><br><span class=\"line\">type: tags</span><br></pre></td></tr></table></figure>\n<p>在categories.md文件内增加一行 <strong>type: categories</strong>，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-11-23 08:46:12</span><br><span class=\"line\">type: categories</span><br></pre></td></tr></table></figure>\n<p>6.重新执行hexo g即生成目录和标签</p>\n<h2 id=\"MarkDown开发工具\"><a href=\"#MarkDown开发工具\" class=\"headerlink\" title=\"MarkDown开发工具\"></a>MarkDown开发工具</h2><p>我本人不太喜欢为markdown开发再安装一个软件, 所以以下都是针对程序员电脑上通常已有的软件上安装插件, 当然如果没有这些软件, 那推荐直接安装<a href=\"https://typora.io/\">typora</a>  </p>\n<p>1.Notepad++插件MarkdownViewer++<br>如果已经安装了Notepad++, 可以直接下载<a href=\"https://github.com/nea/MarkdownViewerPlusPlus/releases\">MarkdownViewer++</a>插件<br>下载完成后, 直接将dll文件放入Notepad++主目录下的plugin文件夹下, 然后重新启动Notepad++即可, 在Notepad++的工具栏会出现一个”m”图标:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/5.png\"><br>点击即可实时查看页面效果<br>优点: 插件轻量级, 1MB不到, 占用系统的内存消耗极小<br>缺点: 功能非常有限, 只能实时查看效果, 不能对markdown语法高亮  </p>\n<p>2.Idea插件MarkDown Navigator<br>其实Idea自带了一个MarkDown的插件, 但是这个插件不太好用, 所以这里不再介绍了<br>打开Idea, 打开File-Settings-Plugins-Browse Repositories, 查找MarkDown Navigator, 点击Install, 重新启动Idea即可<br>效果如图:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/6.png\"><br>优点: 支持MarkDown语法高亮, 支持语法快捷键, 且在Idea内开发, 对于程序员来说比较习惯<br>缺点: 毕竟需要Idea来开发, 对于仅仅只要写博客的人来说, 显得有点笨重  </p>\n<p>3.MarkDown在线编辑器<br>在线编辑的好处不言自明, 不用安装任何软件和插件, 只要有浏览器就行<br>推荐<a href=\"https://www.mdeditor.com/\">https://www.mdeditor.com/</a> </p>\n<h2 id=\"为博客设置密码\"><a href=\"#为博客设置密码\" class=\"headerlink\" title=\"为博客设置密码\"></a>为博客设置密码</h2><p>1.安装插件: 在hexo主目录下执行npm install –save hexo-blog-encrypt<br>2.在需要设置密码的博客的Front-Matter里面加一个参数<br>password:*****  </p>\n<h2 id=\"如何上传图片\"><a href=\"#如何上传图片\" class=\"headerlink\" title=\"如何上传图片\"></a>如何上传图片</h2><p>1.在github存储图片并在博客内关联图片链接<br>这种方式比较推荐, 因为别的博客网站通常都会有防止外部访问的措施在, 存储<br>在github上的图片不会有外部无法访问的情况. 对于各个版本的hexo都能适用.</p>\n<ul>\n<li>打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true</li>\n<li>使用hexo n “博客标题” 新建博客时将会同时新建一个同名的资源文件夹, 如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/7.png\">  </li>\n<li>将博客内用到的图片放置到资源文件夹内, 可以按顺序号命名, 如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/8.png\"></li>\n<li>在博客内链接该图片, 格式为 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](https://raw.githubusercontent.com/#username/#username.github.io/master/#YYYY/#MM/#DD/#title/#photoname)  </span><br><span class=\"line\">#username : github用户名</span><br><span class=\"line\">#YYYY/#MM/#DD : 如果没有修改_config.yml里的默认文件夹创建方式的话, 就是填入年月日即可, 如2019/10/14  </span><br><span class=\"line\">#title : 文章标题  </span><br><span class=\"line\">#photoname : 图片名称  </span><br></pre></td></tr></table></figure>\n比如我这篇博客的图片链接地址如下图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/9.png\">  </li>\n<li>链接完图片后目前在博客的预览界面还无法看到图片, 需要先执行<br>hexo clean (非必要步骤, 如果博客页面格式显示不正确, 需要执行)<br>hexo g (创建博客静态网页文件)<br>hexo d (这一步用于发布博客, 也同时发布图片)<br>hexo d的命令将会把图片发布到github服务器上, 也就可以在上述格式的图片地址里看到该图片  </li>\n</ul>\n<p>2.直接链接本地地址, 这种方式也很方便, 网上也有挺多人使用这种方式, 主要优点<br>是不用多操作一步链接网络地址, 我贴一下该方式:</p>\n<ol>\n<li>打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true</li>\n<li>安装图片插件 npm install hexo-asset-image –save<br>或者安装  npm install hexo-renderer-marked -s</li>\n<li>在博客内直接引用本地地址即可, 如  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](/1.png)</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置首页文章摘要\"><a href=\"#设置首页文章摘要\" class=\"headerlink\" title=\"设置首页文章摘要\"></a>设置首页文章摘要</h2>有三种方法，推荐使用第一种，更加灵活的根据文章进行不同长度的摘要截断，而且对于不同的插件也有最好的适应性</li>\n<li>在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式</li>\n<li>在文章的 front-matter 中添加 description，并提供文章摘录 </li>\n<li>自动形成摘要，在 主题配置文件 中添加<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">auto_excerpt</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"string\">true</span></span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"string\">150</span></span><br></pre></td></tr></table></figure>\n默认截取的长度为 150 字符，可以根据需要自行设定</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p>1.进入<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> 可以选择多种主题<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1.png\"><br>点击图片进去可以看到这种主题的预览效果<br>点击文字进去将进入这个主题的github站点, 里面会详细说明该主题的安装和配置方式  </p>\n<p>2.目前最流行的hexo主题应该是NexT, 我这次选的是3-hexo作为例子来讲解一下, 这个也是一个优秀的国产hexo主题<br>其最终效果如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2.png\">   </p>\n<p>3.关于3-hexo的安装和设置方法, 都可以直接参照<a href=\"https://github.com/yelog/hexo-theme-3-hexo\">该主题的github主页</a><br>简单介绍一下:  </p>\n<ul>\n<li>获取3-hexo: git clone <a href=\"https://github.com/yelog/hexo-theme-3-hexo.git\">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes/3-hexo  </li>\n<li>将3-hexo的主题文件夹复制到hexo的themes目录下  </li>\n<li>修改3-hexo目录下的_config.yml文件, 修改方式在_config.yml中已经有详细的注释, 按照注释修改即可  </li>\n<li>hexo主目录下打开git窗口, 依次输入如下命令<br>hexo clean (清除静态页面缓存文件, 防止出现缓存影响页面样式的情况)<br>hexo g (生成静态页面)<br>hexo s (启动本地hexo服务器, 可以打开localhost:4000查看页面效果)<br>hexo d (发布到github)","more":"</li>\n</ul>\n<h2 id=\"设置分类和标签\"><a href=\"#设置分类和标签\" class=\"headerlink\" title=\"设置分类和标签\"></a>设置分类和标签</h2><p>1.每一个由hexo生成的md文件, 其内容开头都是由两个”—“组成的, hexo把这部分称为<a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-Matter</a>, 如图:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/3.png\">  </p>\n<p>2.在Front-Matter的区域内可以设置关于文章的诸多信息, 包括标题, 创建时间, 标签, 目录, 是否开启评论等  </p>\n<p>3.标签的参数名称为tags, 目录的参数名称为categories, 设置单个标签和目录的格式如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n<p>设置多个标签和多级目录的格式如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: </span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- blog</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- 学习</span><br><span class=\"line\">- 搭建相关</span><br></pre></td></tr></table></figure>\n<p><strong>注意:目录的先后顺序决定了其父子级关系, 如上面的例子中, “学习”目录是”搭建相关”目录的父目录. 在3-hexo主题中的效果如下:</strong><br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/4.png\"></p>\n<h3 id=\"以下是我的hexo更新之后需要额外操作的步骤\"><a href=\"#以下是我的hexo更新之后需要额外操作的步骤\" class=\"headerlink\" title=\"以下是我的hexo更新之后需要额外操作的步骤\"></a>以下是我的hexo更新之后需要额外操作的步骤</h3><p>4.使用命令创建tags和categories目录<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure><br>这样会在source目录下生成tags和categories目录，并在该目录下生成index.md文件<br>5.在tags目录下index.md文件内增加一行 <strong>type: tags</strong>，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-11-23 08:46:12</span><br><span class=\"line\">type: tags</span><br></pre></td></tr></table></figure>\n<p>在categories.md文件内增加一行 <strong>type: categories</strong>，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-11-23 08:46:12</span><br><span class=\"line\">type: categories</span><br></pre></td></tr></table></figure>\n<p>6.重新执行hexo g即生成目录和标签</p>\n<h2 id=\"MarkDown开发工具\"><a href=\"#MarkDown开发工具\" class=\"headerlink\" title=\"MarkDown开发工具\"></a>MarkDown开发工具</h2><p>我本人不太喜欢为markdown开发再安装一个软件, 所以以下都是针对程序员电脑上通常已有的软件上安装插件, 当然如果没有这些软件, 那推荐直接安装<a href=\"https://typora.io/\">typora</a>  </p>\n<p>1.Notepad++插件MarkdownViewer++<br>如果已经安装了Notepad++, 可以直接下载<a href=\"https://github.com/nea/MarkdownViewerPlusPlus/releases\">MarkdownViewer++</a>插件<br>下载完成后, 直接将dll文件放入Notepad++主目录下的plugin文件夹下, 然后重新启动Notepad++即可, 在Notepad++的工具栏会出现一个”m”图标:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/5.png\"><br>点击即可实时查看页面效果<br>优点: 插件轻量级, 1MB不到, 占用系统的内存消耗极小<br>缺点: 功能非常有限, 只能实时查看效果, 不能对markdown语法高亮  </p>\n<p>2.Idea插件MarkDown Navigator<br>其实Idea自带了一个MarkDown的插件, 但是这个插件不太好用, 所以这里不再介绍了<br>打开Idea, 打开File-Settings-Plugins-Browse Repositories, 查找MarkDown Navigator, 点击Install, 重新启动Idea即可<br>效果如图:<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/6.png\"><br>优点: 支持MarkDown语法高亮, 支持语法快捷键, 且在Idea内开发, 对于程序员来说比较习惯<br>缺点: 毕竟需要Idea来开发, 对于仅仅只要写博客的人来说, 显得有点笨重  </p>\n<p>3.MarkDown在线编辑器<br>在线编辑的好处不言自明, 不用安装任何软件和插件, 只要有浏览器就行<br>推荐<a href=\"https://www.mdeditor.com/\">https://www.mdeditor.com/</a> </p>\n<h2 id=\"为博客设置密码\"><a href=\"#为博客设置密码\" class=\"headerlink\" title=\"为博客设置密码\"></a>为博客设置密码</h2><p>1.安装插件: 在hexo主目录下执行npm install –save hexo-blog-encrypt<br>2.在需要设置密码的博客的Front-Matter里面加一个参数<br>password:*****  </p>\n<h2 id=\"如何上传图片\"><a href=\"#如何上传图片\" class=\"headerlink\" title=\"如何上传图片\"></a>如何上传图片</h2><p>1.在github存储图片并在博客内关联图片链接<br>这种方式比较推荐, 因为别的博客网站通常都会有防止外部访问的措施在, 存储<br>在github上的图片不会有外部无法访问的情况. 对于各个版本的hexo都能适用.</p>\n<ul>\n<li>打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true</li>\n<li>使用hexo n “博客标题” 新建博客时将会同时新建一个同名的资源文件夹, 如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/7.png\">  </li>\n<li>将博客内用到的图片放置到资源文件夹内, 可以按顺序号命名, 如图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/8.png\"></li>\n<li>在博客内链接该图片, 格式为 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](https://raw.githubusercontent.com/#username/#username.github.io/master/#YYYY/#MM/#DD/#title/#photoname)  </span><br><span class=\"line\">#username : github用户名</span><br><span class=\"line\">#YYYY/#MM/#DD : 如果没有修改_config.yml里的默认文件夹创建方式的话, 就是填入年月日即可, 如2019/10/14  </span><br><span class=\"line\">#title : 文章标题  </span><br><span class=\"line\">#photoname : 图片名称  </span><br></pre></td></tr></table></figure>\n比如我这篇博客的图片链接地址如下图<br><img src=\"/2019/10/08/tech/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/9.png\">  </li>\n<li>链接完图片后目前在博客的预览界面还无法看到图片, 需要先执行<br>hexo clean (非必要步骤, 如果博客页面格式显示不正确, 需要执行)<br>hexo g (创建博客静态网页文件)<br>hexo d (这一步用于发布博客, 也同时发布图片)<br>hexo d的命令将会把图片发布到github服务器上, 也就可以在上述格式的图片地址里看到该图片  </li>\n</ul>\n<p>2.直接链接本地地址, 这种方式也很方便, 网上也有挺多人使用这种方式, 主要优点<br>是不用多操作一步链接网络地址, 我贴一下该方式:</p>\n<ol>\n<li>打开hexo主目录下的_config.yml文件, 修改参数post_asset_folder为true</li>\n<li>安装图片插件 npm install hexo-asset-image –save<br>或者安装  npm install hexo-renderer-marked -s</li>\n<li>在博客内直接引用本地地址即可, 如  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](/1.png)</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置首页文章摘要\"><a href=\"#设置首页文章摘要\" class=\"headerlink\" title=\"设置首页文章摘要\"></a>设置首页文章摘要</h2>有三种方法，推荐使用第一种，更加灵活的根据文章进行不同长度的摘要截断，而且对于不同的插件也有最好的适应性</li>\n<li>在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式</li>\n<li>在文章的 front-matter 中添加 description，并提供文章摘录 </li>\n<li>自动形成摘要，在 主题配置文件 中添加<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">auto_excerpt</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"string\">true</span></span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"string\">150</span></span><br></pre></td></tr></table></figure>\n默认截取的长度为 150 字符，可以根据需要自行设定</li>\n</ol>"},{"title":"Express框架中使用get和post","date":"2021-11-26T02:06:45.000Z","_content":"之所以有这个文章，是因为遇到在nodejs中使用express框架直接接受post请求时，无法获取到body中的内容，于是google了一篇英文文章解决了这个问题。\n翻译自[codeforgeek](https://codeforgeek.com/handle-get-post-request-express-4/)\n\n---\n\nGET和POST是两种用于构建REST接口的普通HTTP请求。两者的命名包含着不同的使用目的。\n根据定义，GET请求从指定的地址抓取数据，POST请求则是发送数据到指定的地址。\n\nExpress框架提供了router()方法用于构建HTTP终端。下面让我们看下怎么使用Express来实现GET和POST请求。\n\n## GET请求\n\n在Express中使用GET请求非常直接。你首先必须创建一个express和router的实例。下面是实现的一小段代码。\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst app = express();\n\nrouter.get(‘/handle’,(request,response) => {\n//code to perform particular action.\n//To access GET variable use req.query() and req.params() methods.\n});\n\n// add router in the Express app.\napp.use(\"/\", router);\n```\nGET请求会缓存在浏览器历史中。这就是为什么不推荐使用GET请求发送敏感数据（密码，ATM取款码，等等）。你应该只使用GET请求从服务器获取数据。\n\n## POST请求\n\nExpress需要一个额外的中间件模块提取POST请求中的数据。这个中间件叫做\"body-parser\"。我们需要在Express的实例中安装和配置它。\n你可以使用如下命令安装body-parser。\n```shell\nsudo npm install --save body-parser\n```\n你需要在你的项目中导入这个包并告知Express去使用这个中间件。参考如下代码。\n```js\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst router = express.Router();\nconst app = express();\n\n//Here we are configuring express to use body-parser as middle-ware.\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\nrouter.post(‘/handle’,(request,response) => {\n//code to perform particular action.\n//To access POST variable use req.body()methods.\nconsole.log(request.body);\n});\n\n// add router in the Express app.\napp.use(\"/\", router);\n```\n通过这种方式，你可以在Express框架中使用GET和POST请求。（译者注：注意先后顺序，body-parser的注入一定要在router的注入之前，否则也会不起作用）\n\n---\n\n后面的内容是博主写的demo，感觉也没必要发上来，就略过了。\n","source":"_posts/tech/Express框架中使用get和post.md","raw":"---\ntitle: Express框架中使用get和post\ndate: 2021-11-26 10:06:45\ntags: \n- node.js\n- translate\ncategories: \n- 学习\n- 搭建相关\n---\n之所以有这个文章，是因为遇到在nodejs中使用express框架直接接受post请求时，无法获取到body中的内容，于是google了一篇英文文章解决了这个问题。\n翻译自[codeforgeek](https://codeforgeek.com/handle-get-post-request-express-4/)\n\n---\n\nGET和POST是两种用于构建REST接口的普通HTTP请求。两者的命名包含着不同的使用目的。\n根据定义，GET请求从指定的地址抓取数据，POST请求则是发送数据到指定的地址。\n\nExpress框架提供了router()方法用于构建HTTP终端。下面让我们看下怎么使用Express来实现GET和POST请求。\n\n## GET请求\n\n在Express中使用GET请求非常直接。你首先必须创建一个express和router的实例。下面是实现的一小段代码。\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst app = express();\n\nrouter.get(‘/handle’,(request,response) => {\n//code to perform particular action.\n//To access GET variable use req.query() and req.params() methods.\n});\n\n// add router in the Express app.\napp.use(\"/\", router);\n```\nGET请求会缓存在浏览器历史中。这就是为什么不推荐使用GET请求发送敏感数据（密码，ATM取款码，等等）。你应该只使用GET请求从服务器获取数据。\n\n## POST请求\n\nExpress需要一个额外的中间件模块提取POST请求中的数据。这个中间件叫做\"body-parser\"。我们需要在Express的实例中安装和配置它。\n你可以使用如下命令安装body-parser。\n```shell\nsudo npm install --save body-parser\n```\n你需要在你的项目中导入这个包并告知Express去使用这个中间件。参考如下代码。\n```js\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst router = express.Router();\nconst app = express();\n\n//Here we are configuring express to use body-parser as middle-ware.\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\nrouter.post(‘/handle’,(request,response) => {\n//code to perform particular action.\n//To access POST variable use req.body()methods.\nconsole.log(request.body);\n});\n\n// add router in the Express app.\napp.use(\"/\", router);\n```\n通过这种方式，你可以在Express框架中使用GET和POST请求。（译者注：注意先后顺序，body-parser的注入一定要在router的注入之前，否则也会不起作用）\n\n---\n\n后面的内容是博主写的demo，感觉也没必要发上来，就略过了。\n","slug":"tech/Express框架中使用get和post","published":1,"updated":"2021-11-26T02:37:25.000Z","_id":"cl102ysw00021tccfew378250","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之所以有这个文章，是因为遇到在nodejs中使用express框架直接接受post请求时，无法获取到body中的内容，于是google了一篇英文文章解决了这个问题。<br>翻译自<a href=\"https://codeforgeek.com/handle-get-post-request-express-4/\">codeforgeek</a></p>\n<hr>\n<p>GET和POST是两种用于构建REST接口的普通HTTP请求。两者的命名包含着不同的使用目的。<br>根据定义，GET请求从指定的地址抓取数据，POST请求则是发送数据到指定的地址。</p>\n<p>Express框架提供了router()方法用于构建HTTP终端。下面让我们看下怎么使用Express来实现GET和POST请求。</p>\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><p>在Express中使用GET请求非常直接。你首先必须创建一个express和router的实例。下面是实现的一小段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(‘/handle’,<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//code to perform particular action.</span></span><br><span class=\"line\"><span class=\"comment\">//To access GET variable use req.query() and req.params() methods.</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router in the Express app.</span></span><br><span class=\"line\">app.use(<span class=\"string\">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>\n<p>GET请求会缓存在浏览器历史中。这就是为什么不推荐使用GET请求发送敏感数据（密码，ATM取款码，等等）。你应该只使用GET请求从服务器获取数据。</p>\n<h2 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h2><p>Express需要一个额外的中间件模块提取POST请求中的数据。这个中间件叫做”body-parser”。我们需要在Express的实例中安装和配置它。<br>你可以使用如下命令安装body-parser。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install --save body-parser</span><br></pre></td></tr></table></figure>\n<p>你需要在你的项目中导入这个包并告知Express去使用这个中间件。参考如下代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;body-parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Here we are configuring express to use body-parser as middle-ware.</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(‘/handle’,<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//code to perform particular action.</span></span><br><span class=\"line\"><span class=\"comment\">//To access POST variable use req.body()methods.</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(request.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router in the Express app.</span></span><br><span class=\"line\">app.use(<span class=\"string\">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>\n<p>通过这种方式，你可以在Express框架中使用GET和POST请求。（译者注：注意先后顺序，body-parser的注入一定要在router的注入之前，否则也会不起作用）</p>\n<hr>\n<p>后面的内容是博主写的demo，感觉也没必要发上来，就略过了。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p>之所以有这个文章，是因为遇到在nodejs中使用express框架直接接受post请求时，无法获取到body中的内容，于是google了一篇英文文章解决了这个问题。<br>翻译自<a href=\"https://codeforgeek.com/handle-get-post-request-express-4/\">codeforgeek</a></p>\n<hr>\n<p>GET和POST是两种用于构建REST接口的普通HTTP请求。两者的命名包含着不同的使用目的。<br>根据定义，GET请求从指定的地址抓取数据，POST请求则是发送数据到指定的地址。</p>\n<p>Express框架提供了router()方法用于构建HTTP终端。下面让我们看下怎么使用Express来实现GET和POST请求。</p>\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><p>在Express中使用GET请求非常直接。你首先必须创建一个express和router的实例。下面是实现的一小段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(‘/handle’,<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//code to perform particular action.</span></span><br><span class=\"line\"><span class=\"comment\">//To access GET variable use req.query() and req.params() methods.</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router in the Express app.</span></span><br><span class=\"line\">app.use(<span class=\"string\">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>\n<p>GET请求会缓存在浏览器历史中。这就是为什么不推荐使用GET请求发送敏感数据（密码，ATM取款码，等等）。你应该只使用GET请求从服务器获取数据。</p>\n<h2 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h2><p>Express需要一个额外的中间件模块提取POST请求中的数据。这个中间件叫做”body-parser”。我们需要在Express的实例中安装和配置它。<br>你可以使用如下命令安装body-parser。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install --save body-parser</span><br></pre></td></tr></table></figure>\n<p>你需要在你的项目中导入这个包并告知Express去使用这个中间件。参考如下代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;body-parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Here we are configuring express to use body-parser as middle-ware.</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(‘/handle’,<span class=\"function\">(<span class=\"params\">request,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//code to perform particular action.</span></span><br><span class=\"line\"><span class=\"comment\">//To access POST variable use req.body()methods.</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(request.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router in the Express app.</span></span><br><span class=\"line\">app.use(<span class=\"string\">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>\n<p>通过这种方式，你可以在Express框架中使用GET和POST请求。（译者注：注意先后顺序，body-parser的注入一定要在router的注入之前，否则也会不起作用）</p>\n<hr>\n<p>后面的内容是博主写的demo，感觉也没必要发上来，就略过了。</p>\n"},{"title":"ELK日常维护相关","date":"2019-10-14T05:25:13.000Z","comments":1,"_content":"## 配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭  \n只要在后面加上&即可, 如  \n```shell\nbin/logstash -f config/log4j-es.conf &\n```\n注意: 退出时使用Ctrl+D命令, 直接关闭窗口依然有可能使得进程关闭  \n\n## LogStash自动重新加载配置  \n启动logstash时在后面加上命令--config.reload.automatic  \n```shell\nbin/logstash -f config/log4j-es.conf --config.reload.automatic &\n```\n\n## 重新发送filebeat抓取的内容  \n1.删除registry下的data.json  \n如:  \n```shell\nrm -rf /home/elk/filebeats/filebeat-7.3.1-linux-x86_64/data/registry/filebeat\n```\n2.重启filebeat  \n如果存在正在运行的filebeat, 先kill掉  \n```shell\nps aux | grep filebeat  \nkill -s 9 pid\n```\n然后执行  \n```shell\n./filebeat -e -c filebeat.yml\n```\n<!-- more -->\n## 设置索引内容30天过期删除  \n本来我理解的理论上应该可以用索引的生命周期来实现, 但是半天没整明白, 所以现在\n是简单粗暴的使用linux的cron任务来实现, 更具体的cron配置详见[cron详解](https://blog.csdn.net/mengzuchao/article/details/81172305)  \n1.编辑shell脚本, 文件名为removeDataByTime.sh, 内容如下  \n```shell\n#!/bin/bash\nlimit_date=30\nfor var in `curl 'localhost:9200/_cat/indices' | awk '!/kibana*/ {print $3}'`\ndo\n  curl -H \"Content-Type:application/json\" -X POST -d '{\"query\": {\"range\": {\"@timestamp\": {\"lt\": \"now-'${limit_date}'d/d\"}}}}' \"http://localhost:9200/${var}/_delete_by_query\"\ndone\n```\n2.编辑cron文件, 执行crantab -e, 打开crontab配置文件  \n加上刚才的shell脚本, 设置每天0点15分执行  \n```shell\n15 00 * * * /home/elk/removeDataByTime.sh\n```\n设置cron重新启动, 执行/sbin/service crond restart  \n\n3.查看cron执行情况  \n查看cron任务列表 : crontab -l  \n查看cron执行日志 : grep 'removeDataByTime' /var/log/cron  \n\n## 设置LogStash不写入指定的内容\n\n在logstash中写入如下内容即可 ：\n\n```shell\nfilter {\n\t# 过滤message中的内容 , 注意drop后面有一个空格\n    if \"somethingA\" in [message] {\n      drop {}\n    }\n    # 过滤tags中的内容\n    if \"somethingB\" in [tags] {\n      drop {}\n    }\n}\n```\n\n\n\n## 设置索引别名来实现中文索引搜索\n\n有时候需要在搜索页面使用中文的索引名，但是在ES中不支持直接用中文名来命名索引，原因我认为应该是跟索引的Btree算法有关。\n\n但是我们可以给索引设置别名来在搜索页面使用中文的索引来搜索。\n\n可以按照如下方式来设置\n\n- 在postman发送如下请求（前提：在ElasticSearch中已经存在datadocking和activity-provider两个索引）：\n\n```json\nPOST: 192.168.15.161:9200/_aliases\n{\n    \"actions\": [\n        {\n            \"add\": {\n                \"alias\": \"外部对接\",\n                \"index\": \"datadocking\"\n            }\n        },\n        {\n            \"add\": {\n                \"alias\": \"微商城活动\",\n                \"index\": \"activity-provider\"\n            }\n        }\n    ]\n}\n```\n\n- 进入项目的索引模式\n\n  ![](1.png)\n\n  输入刚刚设置的中文名，就可以直接对应到英文的索引名，然后按照步骤创建索引模式\n\n  ![](2.png)\n\n  在搜索界面就可以使用中文的索引名来搜索\n\n  ![](3.png)","source":"_posts/tech/ELK日常维护相关.md","raw":"---\ntitle: ELK日常维护相关\ndate: 2019-10-14 13:25:13\ntags: \n- elk\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n## 配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭  \n只要在后面加上&即可, 如  \n```shell\nbin/logstash -f config/log4j-es.conf &\n```\n注意: 退出时使用Ctrl+D命令, 直接关闭窗口依然有可能使得进程关闭  \n\n## LogStash自动重新加载配置  \n启动logstash时在后面加上命令--config.reload.automatic  \n```shell\nbin/logstash -f config/log4j-es.conf --config.reload.automatic &\n```\n\n## 重新发送filebeat抓取的内容  \n1.删除registry下的data.json  \n如:  \n```shell\nrm -rf /home/elk/filebeats/filebeat-7.3.1-linux-x86_64/data/registry/filebeat\n```\n2.重启filebeat  \n如果存在正在运行的filebeat, 先kill掉  \n```shell\nps aux | grep filebeat  \nkill -s 9 pid\n```\n然后执行  \n```shell\n./filebeat -e -c filebeat.yml\n```\n<!-- more -->\n## 设置索引内容30天过期删除  \n本来我理解的理论上应该可以用索引的生命周期来实现, 但是半天没整明白, 所以现在\n是简单粗暴的使用linux的cron任务来实现, 更具体的cron配置详见[cron详解](https://blog.csdn.net/mengzuchao/article/details/81172305)  \n1.编辑shell脚本, 文件名为removeDataByTime.sh, 内容如下  \n```shell\n#!/bin/bash\nlimit_date=30\nfor var in `curl 'localhost:9200/_cat/indices' | awk '!/kibana*/ {print $3}'`\ndo\n  curl -H \"Content-Type:application/json\" -X POST -d '{\"query\": {\"range\": {\"@timestamp\": {\"lt\": \"now-'${limit_date}'d/d\"}}}}' \"http://localhost:9200/${var}/_delete_by_query\"\ndone\n```\n2.编辑cron文件, 执行crantab -e, 打开crontab配置文件  \n加上刚才的shell脚本, 设置每天0点15分执行  \n```shell\n15 00 * * * /home/elk/removeDataByTime.sh\n```\n设置cron重新启动, 执行/sbin/service crond restart  \n\n3.查看cron执行情况  \n查看cron任务列表 : crontab -l  \n查看cron执行日志 : grep 'removeDataByTime' /var/log/cron  \n\n## 设置LogStash不写入指定的内容\n\n在logstash中写入如下内容即可 ：\n\n```shell\nfilter {\n\t# 过滤message中的内容 , 注意drop后面有一个空格\n    if \"somethingA\" in [message] {\n      drop {}\n    }\n    # 过滤tags中的内容\n    if \"somethingB\" in [tags] {\n      drop {}\n    }\n}\n```\n\n\n\n## 设置索引别名来实现中文索引搜索\n\n有时候需要在搜索页面使用中文的索引名，但是在ES中不支持直接用中文名来命名索引，原因我认为应该是跟索引的Btree算法有关。\n\n但是我们可以给索引设置别名来在搜索页面使用中文的索引来搜索。\n\n可以按照如下方式来设置\n\n- 在postman发送如下请求（前提：在ElasticSearch中已经存在datadocking和activity-provider两个索引）：\n\n```json\nPOST: 192.168.15.161:9200/_aliases\n{\n    \"actions\": [\n        {\n            \"add\": {\n                \"alias\": \"外部对接\",\n                \"index\": \"datadocking\"\n            }\n        },\n        {\n            \"add\": {\n                \"alias\": \"微商城活动\",\n                \"index\": \"activity-provider\"\n            }\n        }\n    ]\n}\n```\n\n- 进入项目的索引模式\n\n  ![](1.png)\n\n  输入刚刚设置的中文名，就可以直接对应到英文的索引名，然后按照步骤创建索引模式\n\n  ![](2.png)\n\n  在搜索界面就可以使用中文的索引名来搜索\n\n  ![](3.png)","slug":"tech/ELK日常维护相关","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yszo0026tccfdxv79d64","layout":"post","photos":[],"link":"","content":"<h2 id=\"配置启动ELK-FileBeats后台运行-不随着窗口关闭而关闭\"><a href=\"#配置启动ELK-FileBeats后台运行-不随着窗口关闭而关闭\" class=\"headerlink\" title=\"配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭\"></a>配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭</h2><p>只要在后面加上&amp;即可, 如  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/logstash -f config/log4j-es.conf &amp;</span><br></pre></td></tr></table></figure>\n<p>注意: 退出时使用Ctrl+D命令, 直接关闭窗口依然有可能使得进程关闭  </p>\n<h2 id=\"LogStash自动重新加载配置\"><a href=\"#LogStash自动重新加载配置\" class=\"headerlink\" title=\"LogStash自动重新加载配置\"></a>LogStash自动重新加载配置</h2><p>启动logstash时在后面加上命令–config.reload.automatic  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/logstash -f config/log4j-es.conf --config.reload.automatic &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新发送filebeat抓取的内容\"><a href=\"#重新发送filebeat抓取的内容\" class=\"headerlink\" title=\"重新发送filebeat抓取的内容\"></a>重新发送filebeat抓取的内容</h2><p>1.删除registry下的data.json<br>如:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /home/elk/filebeats/filebeat-7.3.1-linux-x86_64/data/registry/filebeat</span><br></pre></td></tr></table></figure>\n<p>2.重启filebeat<br>如果存在正在运行的filebeat, 先kill掉  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep filebeat  </span><br><span class=\"line\">kill -s 9 pid</span><br></pre></td></tr></table></figure>\n<p>然后执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"设置索引内容30天过期删除\"><a href=\"#设置索引内容30天过期删除\" class=\"headerlink\" title=\"设置索引内容30天过期删除\"></a>设置索引内容30天过期删除</h2><p>本来我理解的理论上应该可以用索引的生命周期来实现, 但是半天没整明白, 所以现在<br>是简单粗暴的使用linux的cron任务来实现, 更具体的cron配置详见<a href=\"https://blog.csdn.net/mengzuchao/article/details/81172305\">cron详解</a><br>1.编辑shell脚本, 文件名为removeDataByTime.sh, 内容如下  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">limit_date=30</span><br><span class=\"line\">for var in `curl &#x27;localhost:9200/_cat/indices&#x27; | awk &#x27;!/kibana*/ &#123;print $3&#125;&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">  curl -H &quot;Content-Type:application/json&quot; -X POST -d &#x27;&#123;&quot;query&quot;: &#123;&quot;range&quot;: &#123;&quot;@timestamp&quot;: &#123;&quot;lt&quot;: &quot;now-&#x27;$&#123;limit_date&#125;&#x27;d/d&quot;&#125;&#125;&#125;&#125;&#x27; &quot;http://localhost:9200/$&#123;var&#125;/_delete_by_query&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>2.编辑cron文件, 执行crantab -e, 打开crontab配置文件<br>加上刚才的shell脚本, 设置每天0点15分执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 00 * * * /home/elk/removeDataByTime.sh</span><br></pre></td></tr></table></figure>\n<p>设置cron重新启动, 执行/sbin/service crond restart  </p>\n<p>3.查看cron执行情况<br>查看cron任务列表 : crontab -l<br>查看cron执行日志 : grep ‘removeDataByTime’ /var/log/cron  </p>\n<h2 id=\"设置LogStash不写入指定的内容\"><a href=\"#设置LogStash不写入指定的内容\" class=\"headerlink\" title=\"设置LogStash不写入指定的内容\"></a>设置LogStash不写入指定的内容</h2><p>在logstash中写入如下内容即可 ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter &#123;</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> 过滤message中的内容 , 注意drop后面有一个空格</span></span><br><span class=\"line\">    if &quot;somethingA&quot; in [message] &#123;</span><br><span class=\"line\">      drop &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 过滤tags中的内容</span><br><span class=\"line\">    if &quot;somethingB&quot; in [tags] &#123;</span><br><span class=\"line\">      drop &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置索引别名来实现中文索引搜索\"><a href=\"#设置索引别名来实现中文索引搜索\" class=\"headerlink\" title=\"设置索引别名来实现中文索引搜索\"></a>设置索引别名来实现中文索引搜索</h2><p>有时候需要在搜索页面使用中文的索引名，但是在ES中不支持直接用中文名来命名索引，原因我认为应该是跟索引的Btree算法有关。</p>\n<p>但是我们可以给索引设置别名来在搜索页面使用中文的索引来搜索。</p>\n<p>可以按照如下方式来设置</p>\n<ul>\n<li>在postman发送如下请求（前提：在ElasticSearch中已经存在datadocking和activity-provider两个索引）：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST: <span class=\"number\">192.168</span><span class=\"number\">.15</span><span class=\"number\">.161</span>:<span class=\"number\">9200</span>/_aliases</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;actions&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;add&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;alias&quot;</span>: <span class=\"string\">&quot;外部对接&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;index&quot;</span>: <span class=\"string\">&quot;datadocking&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;add&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;alias&quot;</span>: <span class=\"string\">&quot;微商城活动&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;index&quot;</span>: <span class=\"string\">&quot;activity-provider&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>进入项目的索引模式</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/1.png\"></p>\n<p>输入刚刚设置的中文名，就可以直接对应到英文的索引名，然后按照步骤创建索引模式</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/2.png\"></p>\n<p>在搜索界面就可以使用中文的索引名来搜索</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/3.png\"></p>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"配置启动ELK-FileBeats后台运行-不随着窗口关闭而关闭\"><a href=\"#配置启动ELK-FileBeats后台运行-不随着窗口关闭而关闭\" class=\"headerlink\" title=\"配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭\"></a>配置启动ELK+FileBeats后台运行, 不随着窗口关闭而关闭</h2><p>只要在后面加上&amp;即可, 如  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/logstash -f config/log4j-es.conf &amp;</span><br></pre></td></tr></table></figure>\n<p>注意: 退出时使用Ctrl+D命令, 直接关闭窗口依然有可能使得进程关闭  </p>\n<h2 id=\"LogStash自动重新加载配置\"><a href=\"#LogStash自动重新加载配置\" class=\"headerlink\" title=\"LogStash自动重新加载配置\"></a>LogStash自动重新加载配置</h2><p>启动logstash时在后面加上命令–config.reload.automatic  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/logstash -f config/log4j-es.conf --config.reload.automatic &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新发送filebeat抓取的内容\"><a href=\"#重新发送filebeat抓取的内容\" class=\"headerlink\" title=\"重新发送filebeat抓取的内容\"></a>重新发送filebeat抓取的内容</h2><p>1.删除registry下的data.json<br>如:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /home/elk/filebeats/filebeat-7.3.1-linux-x86_64/data/registry/filebeat</span><br></pre></td></tr></table></figure>\n<p>2.重启filebeat<br>如果存在正在运行的filebeat, 先kill掉  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep filebeat  </span><br><span class=\"line\">kill -s 9 pid</span><br></pre></td></tr></table></figure>\n<p>然后执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"设置索引内容30天过期删除\"><a href=\"#设置索引内容30天过期删除\" class=\"headerlink\" title=\"设置索引内容30天过期删除\"></a>设置索引内容30天过期删除</h2><p>本来我理解的理论上应该可以用索引的生命周期来实现, 但是半天没整明白, 所以现在<br>是简单粗暴的使用linux的cron任务来实现, 更具体的cron配置详见<a href=\"https://blog.csdn.net/mengzuchao/article/details/81172305\">cron详解</a><br>1.编辑shell脚本, 文件名为removeDataByTime.sh, 内容如下  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">limit_date=30</span><br><span class=\"line\">for var in `curl &#x27;localhost:9200/_cat/indices&#x27; | awk &#x27;!/kibana*/ &#123;print $3&#125;&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">  curl -H &quot;Content-Type:application/json&quot; -X POST -d &#x27;&#123;&quot;query&quot;: &#123;&quot;range&quot;: &#123;&quot;@timestamp&quot;: &#123;&quot;lt&quot;: &quot;now-&#x27;$&#123;limit_date&#125;&#x27;d/d&quot;&#125;&#125;&#125;&#125;&#x27; &quot;http://localhost:9200/$&#123;var&#125;/_delete_by_query&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>2.编辑cron文件, 执行crantab -e, 打开crontab配置文件<br>加上刚才的shell脚本, 设置每天0点15分执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 00 * * * /home/elk/removeDataByTime.sh</span><br></pre></td></tr></table></figure>\n<p>设置cron重新启动, 执行/sbin/service crond restart  </p>\n<p>3.查看cron执行情况<br>查看cron任务列表 : crontab -l<br>查看cron执行日志 : grep ‘removeDataByTime’ /var/log/cron  </p>\n<h2 id=\"设置LogStash不写入指定的内容\"><a href=\"#设置LogStash不写入指定的内容\" class=\"headerlink\" title=\"设置LogStash不写入指定的内容\"></a>设置LogStash不写入指定的内容</h2><p>在logstash中写入如下内容即可 ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter &#123;</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> 过滤message中的内容 , 注意drop后面有一个空格</span></span><br><span class=\"line\">    if &quot;somethingA&quot; in [message] &#123;</span><br><span class=\"line\">      drop &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 过滤tags中的内容</span><br><span class=\"line\">    if &quot;somethingB&quot; in [tags] &#123;</span><br><span class=\"line\">      drop &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置索引别名来实现中文索引搜索\"><a href=\"#设置索引别名来实现中文索引搜索\" class=\"headerlink\" title=\"设置索引别名来实现中文索引搜索\"></a>设置索引别名来实现中文索引搜索</h2><p>有时候需要在搜索页面使用中文的索引名，但是在ES中不支持直接用中文名来命名索引，原因我认为应该是跟索引的Btree算法有关。</p>\n<p>但是我们可以给索引设置别名来在搜索页面使用中文的索引来搜索。</p>\n<p>可以按照如下方式来设置</p>\n<ul>\n<li>在postman发送如下请求（前提：在ElasticSearch中已经存在datadocking和activity-provider两个索引）：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST: <span class=\"number\">192.168</span><span class=\"number\">.15</span><span class=\"number\">.161</span>:<span class=\"number\">9200</span>/_aliases</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;actions&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;add&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;alias&quot;</span>: <span class=\"string\">&quot;外部对接&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;index&quot;</span>: <span class=\"string\">&quot;datadocking&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;add&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;alias&quot;</span>: <span class=\"string\">&quot;微商城活动&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;index&quot;</span>: <span class=\"string\">&quot;activity-provider&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>进入项目的索引模式</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/1.png\"></p>\n<p>输入刚刚设置的中文名，就可以直接对应到英文的索引名，然后按照步骤创建索引模式</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/2.png\"></p>\n<p>在搜索界面就可以使用中文的索引名来搜索</p>\n<p><img src=\"/2019/10/14/tech/ELK%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4%E7%9B%B8%E5%85%B3/3.png\"></p>\n</li>\n</ul>"},{"title":"记一次ELK+FileBeats搭建","date":"2019-10-07T07:19:23.000Z","comments":1,"_content":"## 获取ElasticSearch+LogStash+Kibana+FileBeats  \n关于elk搭建的全部产品都可以从elastic的官方网站获取最新版本  \n[elastic官网](https://www.elastic.co/cn/products/)\n\n![](1.png)\n如图所示  \n当前elastic官方已经不再推荐单纯使用elk(ElasticSearch+LogStash+Kibana)三个产品搭建日志平台, 而是在此基础上加上了轻量级的日志收集插件FileBeats.  \n\n## 安装ElasticSearch  \n我们首先获取安装包  \n进入https://www.elastic.co/cn/downloads/elasticsearch  \n\n![](2.png)  \n在Downloads里点击linux就可以下载到用于linux安装的tar包  \n如果是直接在linux安装,使用wget命令即可  \n如 : wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz  \n如果需要更旧的历史版本, 点击下面的past release即可\n<!-- more -->\n![](3.png)  \n\n在获取到安装包之后, windows环境需要将tar包传送到linux , 使用scp(windows需要预装git)命令即可  \n如: scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@100.100.100.100:/home/elk/  \n在linux, 进入到安装包的目录, 使用tar -zxvf命令进行解压  \n如: tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz   \n解压完成后, elasticsearch其实就已经完成了安装  \n### 启动ElasticSearch  \n在启动elasticserach之前需要注意:elasticsearch不可以用root用户启动, 因此, 需要事先在linux建立一个非root用户    \n[linux如何创建一个管理员用户](https://www.cnblogs.com/sunyllove/p/9772053.html)  \n创建完linux用户后, 切换到该用户, 进入到elasticsearch目录, 执行bin/elasticserach即可  \n默认elasticsearch的端口是9200, 打开浏览器, 输入http://elasticsearch地址:9200/  , 出现如下画面, 说明elasticsearch启动成功\n\n![](4.png)\n\n## 安装LogStash\nwindows环境下载和上传到linux的方法不再赘述, 参照前文  \nlinux环境, 参照如下命令即可:  \n1.执行wget https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz  \n2.进入logstash安装包目录, 执行tar -zxvf logstash-7.4.0.tar.gz  \n\n### 配置和启动LogStash  \n1.在启动logstash之前, 需要先新建一个logstash的配置文件  \n参照logstash目录下的config/logstash-sample.config文件(如图), 新建一个logstash-elk.config文件  \n\n![](5.png)  \ninput, 即输入数据的监听端口, 这个一般不需要改.  \noutput, 用于将接收到的数据发送到elasitcsearch. 将hosts改成elasticsearch部署的地址, 如果elasticsearch和logstash是同一台机器, 则不需要更改.   \n注意: 如果多个实例中的FileBeats发送过来的数据希望进入同一个elasticsearch实例, 并根据不同的ip地址划分为不同的索引, 按照如下方式配置  \n\n```\noutput {\n    if \"100.100.100.101\" in [host][ip] {\n        elasticsearch{\n          hosts => [\"localhost:9200\"]\n          index => \"sample1\"\n        }\n    }else if \"100.100.100.102\" in [host][ip] {\n        elasticsearch{\n          hosts => [\"localhost:9200\"]\n          index => \"sample2\"\n        }\n    } else {\n      elasticsearch{\n        hosts => [\"localhost:9200\"]\n        index => \"other\"\n      }\n    }\n\n}\n```\n配置完成后, 启动logstash, 执行bin/logstash -f config/logstash-elk.conf \n\n## 安装Kibana  \nlinux参照如下命令  \n1.wget https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz  \n2.进入kibana安装包目录, 执行tar -zxvf kibana-7.4.0-linux-x86_64.tar.gz  \n\n### 配置和启动kibana\n进入config/kibana.yml  \n1.修改server.host为linux机器的实际地址  \n2.修改i18n.locale: \"zh-CN\" 这样kibana界面会显示为中文  \n3.返回kibana主目录, 执行bin/kibana  (注意:kibana也不能用root用户启动)  \n4.打开浏览器, 输入http://kibana地址:5601, 出现如下画面  \n\n![](6.png)\n\n## 安装FileBeats  \n注意: **FileBeats需要安装在所有需要发送日志的服务器上**  \nlinux参照如下命令  \n1.wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz  \n2.tar -zxvf filebeat-7.4.0-linux-x86_64.tar.gz\n\n### 配置和启动FileBeats\n进入filebeats安装目录, vi filebeat.yml  \n1.修改paths下的目录, 输入filebeats所在服务器需要收集的日志地址, 如:  \n\n```\npaths:\n    - /home/sample1/logs/log.*\n    - /home/sample2/logs/log.*\n```\n\n2.修改output.logstash下的内容, 将logstash部署的地址输入, 参照如下:  \n\n```\noutput.logstash:\n  hosts: [\"100.100.100.101:5044\"]\n  enabled: true\n```\n3.进入filebeats主目录, 执行 ./filebeat -e -c filebeat.yml, 启动成功  \n\n## kibana查看日志内容\n将上述Elk+FileBeats都安装搭建完成后, 浏览器进入到kibana的界面.  \n1.打开管理-索引模式-创建索引模式, 进入如下界面:  \n\n![](7.png)  \n2.可以看到有三个索引可以匹配, 在索引模式的输入框内输入自己想要创建的索引, 如other, 然后点击下一步\n\n![](8.png)\n3.选择timestamp, 点击创建索引模式\n\n![](9.png)\n4.创建成功, 点击discover\n\n![](10.png)  \n5.可以看到有一个新的索引other可以选择\n\n![](11.png)\n\n6.到此, elk+filebeats的基本搭建工作就已经完成了","source":"_posts/tech/ELK_FileBeats.md","raw":"---\ntitle: 记一次ELK+FileBeats搭建\ndate: 2019-10-07 15:19:23\ntags: elk\ncomments: true\ncategories: \n- 学习\n- 搭建相关\n---\n## 获取ElasticSearch+LogStash+Kibana+FileBeats  \n关于elk搭建的全部产品都可以从elastic的官方网站获取最新版本  \n[elastic官网](https://www.elastic.co/cn/products/)\n\n![](1.png)\n如图所示  \n当前elastic官方已经不再推荐单纯使用elk(ElasticSearch+LogStash+Kibana)三个产品搭建日志平台, 而是在此基础上加上了轻量级的日志收集插件FileBeats.  \n\n## 安装ElasticSearch  \n我们首先获取安装包  \n进入https://www.elastic.co/cn/downloads/elasticsearch  \n\n![](2.png)  \n在Downloads里点击linux就可以下载到用于linux安装的tar包  \n如果是直接在linux安装,使用wget命令即可  \n如 : wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz  \n如果需要更旧的历史版本, 点击下面的past release即可\n<!-- more -->\n![](3.png)  \n\n在获取到安装包之后, windows环境需要将tar包传送到linux , 使用scp(windows需要预装git)命令即可  \n如: scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz root@100.100.100.100:/home/elk/  \n在linux, 进入到安装包的目录, 使用tar -zxvf命令进行解压  \n如: tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz   \n解压完成后, elasticsearch其实就已经完成了安装  \n### 启动ElasticSearch  \n在启动elasticserach之前需要注意:elasticsearch不可以用root用户启动, 因此, 需要事先在linux建立一个非root用户    \n[linux如何创建一个管理员用户](https://www.cnblogs.com/sunyllove/p/9772053.html)  \n创建完linux用户后, 切换到该用户, 进入到elasticsearch目录, 执行bin/elasticserach即可  \n默认elasticsearch的端口是9200, 打开浏览器, 输入http://elasticsearch地址:9200/  , 出现如下画面, 说明elasticsearch启动成功\n\n![](4.png)\n\n## 安装LogStash\nwindows环境下载和上传到linux的方法不再赘述, 参照前文  \nlinux环境, 参照如下命令即可:  \n1.执行wget https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz  \n2.进入logstash安装包目录, 执行tar -zxvf logstash-7.4.0.tar.gz  \n\n### 配置和启动LogStash  \n1.在启动logstash之前, 需要先新建一个logstash的配置文件  \n参照logstash目录下的config/logstash-sample.config文件(如图), 新建一个logstash-elk.config文件  \n\n![](5.png)  \ninput, 即输入数据的监听端口, 这个一般不需要改.  \noutput, 用于将接收到的数据发送到elasitcsearch. 将hosts改成elasticsearch部署的地址, 如果elasticsearch和logstash是同一台机器, 则不需要更改.   \n注意: 如果多个实例中的FileBeats发送过来的数据希望进入同一个elasticsearch实例, 并根据不同的ip地址划分为不同的索引, 按照如下方式配置  \n\n```\noutput {\n    if \"100.100.100.101\" in [host][ip] {\n        elasticsearch{\n          hosts => [\"localhost:9200\"]\n          index => \"sample1\"\n        }\n    }else if \"100.100.100.102\" in [host][ip] {\n        elasticsearch{\n          hosts => [\"localhost:9200\"]\n          index => \"sample2\"\n        }\n    } else {\n      elasticsearch{\n        hosts => [\"localhost:9200\"]\n        index => \"other\"\n      }\n    }\n\n}\n```\n配置完成后, 启动logstash, 执行bin/logstash -f config/logstash-elk.conf \n\n## 安装Kibana  \nlinux参照如下命令  \n1.wget https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz  \n2.进入kibana安装包目录, 执行tar -zxvf kibana-7.4.0-linux-x86_64.tar.gz  \n\n### 配置和启动kibana\n进入config/kibana.yml  \n1.修改server.host为linux机器的实际地址  \n2.修改i18n.locale: \"zh-CN\" 这样kibana界面会显示为中文  \n3.返回kibana主目录, 执行bin/kibana  (注意:kibana也不能用root用户启动)  \n4.打开浏览器, 输入http://kibana地址:5601, 出现如下画面  \n\n![](6.png)\n\n## 安装FileBeats  \n注意: **FileBeats需要安装在所有需要发送日志的服务器上**  \nlinux参照如下命令  \n1.wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz  \n2.tar -zxvf filebeat-7.4.0-linux-x86_64.tar.gz\n\n### 配置和启动FileBeats\n进入filebeats安装目录, vi filebeat.yml  \n1.修改paths下的目录, 输入filebeats所在服务器需要收集的日志地址, 如:  \n\n```\npaths:\n    - /home/sample1/logs/log.*\n    - /home/sample2/logs/log.*\n```\n\n2.修改output.logstash下的内容, 将logstash部署的地址输入, 参照如下:  \n\n```\noutput.logstash:\n  hosts: [\"100.100.100.101:5044\"]\n  enabled: true\n```\n3.进入filebeats主目录, 执行 ./filebeat -e -c filebeat.yml, 启动成功  \n\n## kibana查看日志内容\n将上述Elk+FileBeats都安装搭建完成后, 浏览器进入到kibana的界面.  \n1.打开管理-索引模式-创建索引模式, 进入如下界面:  \n\n![](7.png)  \n2.可以看到有三个索引可以匹配, 在索引模式的输入框内输入自己想要创建的索引, 如other, 然后点击下一步\n\n![](8.png)\n3.选择timestamp, 点击创建索引模式\n\n![](9.png)\n4.创建成功, 点击discover\n\n![](10.png)  \n5.可以看到有一个新的索引other可以选择\n\n![](11.png)\n\n6.到此, elk+filebeats的基本搭建工作就已经完成了","slug":"tech/ELK_FileBeats","published":1,"updated":"2021-11-23T07:37:38.000Z","_id":"cl102yt4d002atccff2q088yz","layout":"post","photos":[],"link":"","content":"<h2 id=\"获取ElasticSearch-LogStash-Kibana-FileBeats\"><a href=\"#获取ElasticSearch-LogStash-Kibana-FileBeats\" class=\"headerlink\" title=\"获取ElasticSearch+LogStash+Kibana+FileBeats\"></a>获取ElasticSearch+LogStash+Kibana+FileBeats</h2><p>关于elk搭建的全部产品都可以从elastic的官方网站获取最新版本<br><a href=\"https://www.elastic.co/cn/products/\">elastic官网</a></p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/1.png\"><br>如图所示<br>当前elastic官方已经不再推荐单纯使用elk(ElasticSearch+LogStash+Kibana)三个产品搭建日志平台, 而是在此基础上加上了轻量级的日志收集插件FileBeats.  </p>\n<h2 id=\"安装ElasticSearch\"><a href=\"#安装ElasticSearch\" class=\"headerlink\" title=\"安装ElasticSearch\"></a>安装ElasticSearch</h2><p>我们首先获取安装包<br>进入<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a>  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/2.png\"><br>在Downloads里点击linux就可以下载到用于linux安装的tar包<br>如果是直接在linux安装,使用wget命令即可<br>如 : wget <a href=\"https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz</a><br>如果需要更旧的历史版本, 点击下面的past release即可</p>\n<span id=\"more\"></span>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/3.png\">  </p>\n<p>在获取到安装包之后, windows环境需要将tar包传送到linux , 使用scp(windows需要预装git)命令即可<br>如: scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz <a href=\"mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x30;&#48;&#46;&#x31;&#48;&#x30;&#x2e;&#49;&#48;&#x30;&#x2e;&#49;&#48;&#48;\">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x30;&#48;&#46;&#x31;&#48;&#x30;&#x2e;&#49;&#48;&#x30;&#x2e;&#49;&#48;&#48;</a>:/home/elk/<br>在linux, 进入到安装包的目录, 使用tar -zxvf命令进行解压<br>如: tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz<br>解压完成后, elasticsearch其实就已经完成了安装  </p>\n<h3 id=\"启动ElasticSearch\"><a href=\"#启动ElasticSearch\" class=\"headerlink\" title=\"启动ElasticSearch\"></a>启动ElasticSearch</h3><p>在启动elasticserach之前需要注意:elasticsearch不可以用root用户启动, 因此, 需要事先在linux建立一个非root用户<br><a href=\"https://www.cnblogs.com/sunyllove/p/9772053.html\">linux如何创建一个管理员用户</a><br>创建完linux用户后, 切换到该用户, 进入到elasticsearch目录, 执行bin/elasticserach即可<br>默认elasticsearch的端口是9200, 打开浏览器, 输入<a href=\"http://elasticsearch地址:9200/\">http://elasticsearch地址:9200/</a>  , 出现如下画面, 说明elasticsearch启动成功</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/4.png\"></p>\n<h2 id=\"安装LogStash\"><a href=\"#安装LogStash\" class=\"headerlink\" title=\"安装LogStash\"></a>安装LogStash</h2><p>windows环境下载和上传到linux的方法不再赘述, 参照前文<br>linux环境, 参照如下命令即可:<br>1.执行wget <a href=\"https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz\">https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz</a><br>2.进入logstash安装包目录, 执行tar -zxvf logstash-7.4.0.tar.gz  </p>\n<h3 id=\"配置和启动LogStash\"><a href=\"#配置和启动LogStash\" class=\"headerlink\" title=\"配置和启动LogStash\"></a>配置和启动LogStash</h3><p>1.在启动logstash之前, 需要先新建一个logstash的配置文件<br>参照logstash目录下的config/logstash-sample.config文件(如图), 新建一个logstash-elk.config文件  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/5.png\"><br>input, 即输入数据的监听端口, 这个一般不需要改.<br>output, 用于将接收到的数据发送到elasitcsearch. 将hosts改成elasticsearch部署的地址, 如果elasticsearch和logstash是同一台机器, 则不需要更改.<br>注意: 如果多个实例中的FileBeats发送过来的数据希望进入同一个elasticsearch实例, 并根据不同的ip地址划分为不同的索引, 按照如下方式配置  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    if &quot;100.100.100.101&quot; in [host][ip] &#123;</span><br><span class=\"line\">        elasticsearch&#123;</span><br><span class=\"line\">          hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">          index =&gt; &quot;sample1&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if &quot;100.100.100.102&quot; in [host][ip] &#123;</span><br><span class=\"line\">        elasticsearch&#123;</span><br><span class=\"line\">          hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">          index =&gt; &quot;sample2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      elasticsearch&#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;other&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成后, 启动logstash, 执行bin/logstash -f config/logstash-elk.conf </p>\n<h2 id=\"安装Kibana\"><a href=\"#安装Kibana\" class=\"headerlink\" title=\"安装Kibana\"></a>安装Kibana</h2><p>linux参照如下命令<br>1.wget <a href=\"https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz</a><br>2.进入kibana安装包目录, 执行tar -zxvf kibana-7.4.0-linux-x86_64.tar.gz  </p>\n<h3 id=\"配置和启动kibana\"><a href=\"#配置和启动kibana\" class=\"headerlink\" title=\"配置和启动kibana\"></a>配置和启动kibana</h3><p>进入config/kibana.yml<br>1.修改server.host为linux机器的实际地址<br>2.修改i18n.locale: “zh-CN” 这样kibana界面会显示为中文<br>3.返回kibana主目录, 执行bin/kibana  (注意:kibana也不能用root用户启动)<br>4.打开浏览器, 输入<a href=\"http://kibana地址:5601/\">http://kibana地址:5601</a>, 出现如下画面  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/6.png\"></p>\n<h2 id=\"安装FileBeats\"><a href=\"#安装FileBeats\" class=\"headerlink\" title=\"安装FileBeats\"></a>安装FileBeats</h2><p>注意: <strong>FileBeats需要安装在所有需要发送日志的服务器上</strong><br>linux参照如下命令<br>1.wget <a href=\"https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz</a><br>2.tar -zxvf filebeat-7.4.0-linux-x86_64.tar.gz</p>\n<h3 id=\"配置和启动FileBeats\"><a href=\"#配置和启动FileBeats\" class=\"headerlink\" title=\"配置和启动FileBeats\"></a>配置和启动FileBeats</h3><p>进入filebeats安装目录, vi filebeat.yml<br>1.修改paths下的目录, 输入filebeats所在服务器需要收集的日志地址, 如:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paths:</span><br><span class=\"line\">    - /home/sample1/logs/log.*</span><br><span class=\"line\">    - /home/sample2/logs/log.*</span><br></pre></td></tr></table></figure>\n\n<p>2.修改output.logstash下的内容, 将logstash部署的地址输入, 参照如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.logstash:</span><br><span class=\"line\">  hosts: [&quot;100.100.100.101:5044&quot;]</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n<p>3.进入filebeats主目录, 执行 ./filebeat -e -c filebeat.yml, 启动成功  </p>\n<h2 id=\"kibana查看日志内容\"><a href=\"#kibana查看日志内容\" class=\"headerlink\" title=\"kibana查看日志内容\"></a>kibana查看日志内容</h2><p>将上述Elk+FileBeats都安装搭建完成后, 浏览器进入到kibana的界面.<br>1.打开管理-索引模式-创建索引模式, 进入如下界面:  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/7.png\"><br>2.可以看到有三个索引可以匹配, 在索引模式的输入框内输入自己想要创建的索引, 如other, 然后点击下一步</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/8.png\"><br>3.选择timestamp, 点击创建索引模式</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/9.png\"><br>4.创建成功, 点击discover</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/10.png\"><br>5.可以看到有一个新的索引other可以选择</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/11.png\"></p>\n<p>6.到此, elk+filebeats的基本搭建工作就已经完成了</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h2 id=\"获取ElasticSearch-LogStash-Kibana-FileBeats\"><a href=\"#获取ElasticSearch-LogStash-Kibana-FileBeats\" class=\"headerlink\" title=\"获取ElasticSearch+LogStash+Kibana+FileBeats\"></a>获取ElasticSearch+LogStash+Kibana+FileBeats</h2><p>关于elk搭建的全部产品都可以从elastic的官方网站获取最新版本<br><a href=\"https://www.elastic.co/cn/products/\">elastic官网</a></p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/1.png\"><br>如图所示<br>当前elastic官方已经不再推荐单纯使用elk(ElasticSearch+LogStash+Kibana)三个产品搭建日志平台, 而是在此基础上加上了轻量级的日志收集插件FileBeats.  </p>\n<h2 id=\"安装ElasticSearch\"><a href=\"#安装ElasticSearch\" class=\"headerlink\" title=\"安装ElasticSearch\"></a>安装ElasticSearch</h2><p>我们首先获取安装包<br>进入<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a>  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/2.png\"><br>在Downloads里点击linux就可以下载到用于linux安装的tar包<br>如果是直接在linux安装,使用wget命令即可<br>如 : wget <a href=\"https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz</a><br>如果需要更旧的历史版本, 点击下面的past release即可</p>","more":"<p><img src=\"/2019/10/07/tech/ELK_FileBeats/3.png\">  </p>\n<p>在获取到安装包之后, windows环境需要将tar包传送到linux , 使用scp(windows需要预装git)命令即可<br>如: scp C:/Users/Administrator/Downloads/elasticsearch-7.3.1-linux-x86_64.tar.gz <a href=\"mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x30;&#48;&#46;&#x31;&#48;&#x30;&#x2e;&#49;&#48;&#x30;&#x2e;&#49;&#48;&#48;\">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x30;&#48;&#46;&#x31;&#48;&#x30;&#x2e;&#49;&#48;&#x30;&#x2e;&#49;&#48;&#48;</a>:/home/elk/<br>在linux, 进入到安装包的目录, 使用tar -zxvf命令进行解压<br>如: tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz<br>解压完成后, elasticsearch其实就已经完成了安装  </p>\n<h3 id=\"启动ElasticSearch\"><a href=\"#启动ElasticSearch\" class=\"headerlink\" title=\"启动ElasticSearch\"></a>启动ElasticSearch</h3><p>在启动elasticserach之前需要注意:elasticsearch不可以用root用户启动, 因此, 需要事先在linux建立一个非root用户<br><a href=\"https://www.cnblogs.com/sunyllove/p/9772053.html\">linux如何创建一个管理员用户</a><br>创建完linux用户后, 切换到该用户, 进入到elasticsearch目录, 执行bin/elasticserach即可<br>默认elasticsearch的端口是9200, 打开浏览器, 输入<a href=\"http://elasticsearch地址:9200/\">http://elasticsearch地址:9200/</a>  , 出现如下画面, 说明elasticsearch启动成功</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/4.png\"></p>\n<h2 id=\"安装LogStash\"><a href=\"#安装LogStash\" class=\"headerlink\" title=\"安装LogStash\"></a>安装LogStash</h2><p>windows环境下载和上传到linux的方法不再赘述, 参照前文<br>linux环境, 参照如下命令即可:<br>1.执行wget <a href=\"https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz\">https://artifacts.elastic.co/downloads/logstash/logstash-7.4.0.tar.gz</a><br>2.进入logstash安装包目录, 执行tar -zxvf logstash-7.4.0.tar.gz  </p>\n<h3 id=\"配置和启动LogStash\"><a href=\"#配置和启动LogStash\" class=\"headerlink\" title=\"配置和启动LogStash\"></a>配置和启动LogStash</h3><p>1.在启动logstash之前, 需要先新建一个logstash的配置文件<br>参照logstash目录下的config/logstash-sample.config文件(如图), 新建一个logstash-elk.config文件  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/5.png\"><br>input, 即输入数据的监听端口, 这个一般不需要改.<br>output, 用于将接收到的数据发送到elasitcsearch. 将hosts改成elasticsearch部署的地址, 如果elasticsearch和logstash是同一台机器, 则不需要更改.<br>注意: 如果多个实例中的FileBeats发送过来的数据希望进入同一个elasticsearch实例, 并根据不同的ip地址划分为不同的索引, 按照如下方式配置  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    if &quot;100.100.100.101&quot; in [host][ip] &#123;</span><br><span class=\"line\">        elasticsearch&#123;</span><br><span class=\"line\">          hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">          index =&gt; &quot;sample1&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else if &quot;100.100.100.102&quot; in [host][ip] &#123;</span><br><span class=\"line\">        elasticsearch&#123;</span><br><span class=\"line\">          hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">          index =&gt; &quot;sample2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      elasticsearch&#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;other&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成后, 启动logstash, 执行bin/logstash -f config/logstash-elk.conf </p>\n<h2 id=\"安装Kibana\"><a href=\"#安装Kibana\" class=\"headerlink\" title=\"安装Kibana\"></a>安装Kibana</h2><p>linux参照如下命令<br>1.wget <a href=\"https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/kibana/kibana-7.4.0-linux-x86_64.tar.gz</a><br>2.进入kibana安装包目录, 执行tar -zxvf kibana-7.4.0-linux-x86_64.tar.gz  </p>\n<h3 id=\"配置和启动kibana\"><a href=\"#配置和启动kibana\" class=\"headerlink\" title=\"配置和启动kibana\"></a>配置和启动kibana</h3><p>进入config/kibana.yml<br>1.修改server.host为linux机器的实际地址<br>2.修改i18n.locale: “zh-CN” 这样kibana界面会显示为中文<br>3.返回kibana主目录, 执行bin/kibana  (注意:kibana也不能用root用户启动)<br>4.打开浏览器, 输入<a href=\"http://kibana地址:5601/\">http://kibana地址:5601</a>, 出现如下画面  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/6.png\"></p>\n<h2 id=\"安装FileBeats\"><a href=\"#安装FileBeats\" class=\"headerlink\" title=\"安装FileBeats\"></a>安装FileBeats</h2><p>注意: <strong>FileBeats需要安装在所有需要发送日志的服务器上</strong><br>linux参照如下命令<br>1.wget <a href=\"https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz\">https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz</a><br>2.tar -zxvf filebeat-7.4.0-linux-x86_64.tar.gz</p>\n<h3 id=\"配置和启动FileBeats\"><a href=\"#配置和启动FileBeats\" class=\"headerlink\" title=\"配置和启动FileBeats\"></a>配置和启动FileBeats</h3><p>进入filebeats安装目录, vi filebeat.yml<br>1.修改paths下的目录, 输入filebeats所在服务器需要收集的日志地址, 如:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paths:</span><br><span class=\"line\">    - /home/sample1/logs/log.*</span><br><span class=\"line\">    - /home/sample2/logs/log.*</span><br></pre></td></tr></table></figure>\n\n<p>2.修改output.logstash下的内容, 将logstash部署的地址输入, 参照如下:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.logstash:</span><br><span class=\"line\">  hosts: [&quot;100.100.100.101:5044&quot;]</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n<p>3.进入filebeats主目录, 执行 ./filebeat -e -c filebeat.yml, 启动成功  </p>\n<h2 id=\"kibana查看日志内容\"><a href=\"#kibana查看日志内容\" class=\"headerlink\" title=\"kibana查看日志内容\"></a>kibana查看日志内容</h2><p>将上述Elk+FileBeats都安装搭建完成后, 浏览器进入到kibana的界面.<br>1.打开管理-索引模式-创建索引模式, 进入如下界面:  </p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/7.png\"><br>2.可以看到有三个索引可以匹配, 在索引模式的输入框内输入自己想要创建的索引, 如other, 然后点击下一步</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/8.png\"><br>3.选择timestamp, 点击创建索引模式</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/9.png\"><br>4.创建成功, 点击discover</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/10.png\"><br>5.可以看到有一个新的索引other可以选择</p>\n<p><img src=\"/2019/10/07/tech/ELK_FileBeats/11.png\"></p>\n<p>6.到此, elk+filebeats的基本搭建工作就已经完成了</p>"},{"title":"azkaban简单搭建","date":"2020-04-29T01:15:11.000Z","_content":"前言：\nazkaban的用处和好处不再赘述，这里只讲怎么将azkaban在项目中使用起来。\n另外非常推荐直接看[官方的英文文档](https://azkaban.readthedocs.io/en/latest/)进行学习，那将是最新最可靠的教程。\n## 下载和安装azkaban  \n### 下载azkaban  \n方法1：直接到azkaban的github网页下载tar.gz包。截止2020.4.29日最新版本的包地址为(https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz)  \n方法2：在linux执行   \n```shell\nwget https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz\n```\n### 安装azkaban  \n将包进行解压，执行\n```shell\ntar -zxvf azkaban-3.81.10.tar.gz\n```\n解压完成后目录结构如下图  \n<!-- more -->\n![](1.png)  \n如果使用solo-server方式的话，不需要建表，下面的步骤也都可以不用看，直接跳转看[solo-server](https://azkaban.readthedocs.io/en/latest/getStarted.html#getting-started-with-the-solo-server)  \n但是个人理解solo-server只适用于小型简单的项目，如果考虑项目以后的扩充和发展的话，建议一开始就使用multi-executor-server方式，该方式需要建表。  \n步骤如下：\n### 新增azkaban相关表  \n复制如下文件内的sql语句，在事先建好的数据库内执行  \n```shell\nvi azkaban-3.81.10/azkaban-db/build/sql/create-all-sql-0.1.0-SNAPSHOT.sql\n```\n- 可能有的坑：\n早期版本的mysql可能不支持长度过长的字段设为索引和主键，遇到这种报错时，需要将对应的字段改短再执行。过长的字段比如 execution_logs.name，sql给设置的长度是varchar(640)，在我的mysql数据库中执行会报错，我改成了varchar(200)，这个字段的含义是任务名，一般来说你正常命名的话完全用不到640个字段的长度，所以可以放心修改。  \n### 编译azkaban  \n在azkaban目录下执行  \n```\n./gradlew build installDist\n```\n可能有的坑:\n- 部分依赖包可能无法下载，修改build.gradle，将repositories指向国内阿里云地址，如下：\n```\nbuildscript {\n  repositories {\n        maven {\n            url 'http://maven.aliyun.com/nexus/content/groups/public/'\n        }\n        maven {\n            url 'http://maven.aliyun.com/repository/google'\n        }\n        maven {\n            url 'http://maven.aliyun.com/repository/jcenter'\n        }\n  }\n  dependencies {\n    classpath 'com.cinnober.gradle:semver-git:2.2.3'\n    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.14'\n    classpath  'com.github.jengelman.gradle.plugins:shadow:4.0.0'\n  }\n}\n```\n\n- 如果出现编译报错的情况，可以尝试将编译期间的test过程注释掉，或者进入azkaban-executor-server和azkban-web-server目录下单独编译这两个包。  \n\n### 启动azkban-executor-server  \n- 修改配置文件 \n```\nvi ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server/conf/azkaban.properties\n```\n需要修改的内容如下  \n> default.timezone.id=Asia/Shanghai # 修改为中国时区\nazkaban.webserver.url=localhost:8199 # 指向本地的azkaban-web-server地址\n#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来\ndatabase.type=mysql\nmysql.port=3306\nmysql.host=110.110.110.110\nmysql.database=azkaban\nmysql.user=azkaban\nmysql.password=azkaban  \n\n- 启动azkaban-executor-server  \n```shell\ncd ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server;\nbin/start-exec.sh; # 注意一定要按照这个语句执行,不要在bin目录下执行./start-exe.sh，否则某些资源文件会加载不到，导致报错\n```\n-  激活executor\n```\n# 指向executor地址和端口\ncurl localhost:port/executor?action=activate\n```\n\n### 启动azkaban-web-server  \n- 修改配置文件\n```\nvi ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-exec-server/conf/azkaban.properties\n```\n需要修改的内容如下  \n> default.timezone.id=Asia/Shanghai # 修改为中国时区\n#邮件配置\nmail.sender=888888@qq.com # 发送邮件的邮箱\nmail.host=smtp.qq.com  # 邮件服务器\nmail.user=888888@qq.com # 邮件用户\nmail.password=abc123456 #密码需要取qq邮箱中获取到的授权码\njob.failure.email=8888888@qq.com # 定时任务执行失败发送邮件的邮箱\n#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来\ndatabase.type=mysql\nmysql.port=3306\nmysql.host=110.110.110.110\nmysql.database=azkaban\nmysql.user=azkaban\nmysql.password=azkaban\n\n- 启动azkaban-web-server  \n```shell\ncd ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server;\nbin/start-web.sh;\n```\n### 访问azkaban  \n浏览器输入 localhost:8199，出现如下界面 \n![](2.png)  \n用户名密码默认均为azkban，可以在 ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server/conf/azkaban-users.xml 修改用户和密码  \n\n## 配置定时任务  \n1.打开azkaban主页面，点击create project，在弹出页面输入项目名和描述\n![](3.png)\n2.随后点击项目名进入配置页面，azkaban目前无法在页面直接配置，需要通过上传和下载配置文件来完成对定时任务的增删改，也就是用到页面上的upload和download按钮\n![](4.png)\n3.在本地新建一个test.flow文件，azkaban的基本配置文件需要用flow后缀的文件进行配置，配置的基本格式如下\n```properties\n\n---\nconfig:\n  failure.emails: user@qq.com\n\nnodes:\n  - name: testA\n    type: command\n    config:\n      command: echo 'hello wrold'\n  - name: testB\n    type: command\n    config:\n      command: echo 'hello wrold'\n```\n其中nodes节点下的就是执行的任务，commnad写的就是该任务需要执行的指令，azkaban还支持其他job类型，具体见[官方文档](https://azkaban.readthedocs.io/en/latest/jobTypes.html)\n我暂时只用到commond\n4.同时新建一个flow20.project文件，里面只需要一条内容，如下\nazkaban-flow-version: 2.0\n5.将flow文件和flow20.project文件打包成 **【项目名.zip】**，然后在azkaban页面点击upload，上传该zip文件\n6.点击项目名就可以看到刚创建的job，然后点击execute flow-schedule，就可以配置cron表达式，设置该任务的运行周期\n![](5.png)\n![](6.png)\n7.以后对于任务的新增和命令修改，都只能通过在azkaban页面点击download下载zip文件，然后修改里面的内容，再重新上传来完成\n      ","source":"_posts/tech/azkaban简单搭建.md","raw":"---\ntitle: azkaban简单搭建\ndate: 2020-04-29 09:15:11\ntags:\n- azkaban\ncategories:\n- 学习\n- 搭建相关\n---\n前言：\nazkaban的用处和好处不再赘述，这里只讲怎么将azkaban在项目中使用起来。\n另外非常推荐直接看[官方的英文文档](https://azkaban.readthedocs.io/en/latest/)进行学习，那将是最新最可靠的教程。\n## 下载和安装azkaban  \n### 下载azkaban  \n方法1：直接到azkaban的github网页下载tar.gz包。截止2020.4.29日最新版本的包地址为(https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz)  \n方法2：在linux执行   \n```shell\nwget https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz\n```\n### 安装azkaban  \n将包进行解压，执行\n```shell\ntar -zxvf azkaban-3.81.10.tar.gz\n```\n解压完成后目录结构如下图  \n<!-- more -->\n![](1.png)  \n如果使用solo-server方式的话，不需要建表，下面的步骤也都可以不用看，直接跳转看[solo-server](https://azkaban.readthedocs.io/en/latest/getStarted.html#getting-started-with-the-solo-server)  \n但是个人理解solo-server只适用于小型简单的项目，如果考虑项目以后的扩充和发展的话，建议一开始就使用multi-executor-server方式，该方式需要建表。  \n步骤如下：\n### 新增azkaban相关表  \n复制如下文件内的sql语句，在事先建好的数据库内执行  \n```shell\nvi azkaban-3.81.10/azkaban-db/build/sql/create-all-sql-0.1.0-SNAPSHOT.sql\n```\n- 可能有的坑：\n早期版本的mysql可能不支持长度过长的字段设为索引和主键，遇到这种报错时，需要将对应的字段改短再执行。过长的字段比如 execution_logs.name，sql给设置的长度是varchar(640)，在我的mysql数据库中执行会报错，我改成了varchar(200)，这个字段的含义是任务名，一般来说你正常命名的话完全用不到640个字段的长度，所以可以放心修改。  \n### 编译azkaban  \n在azkaban目录下执行  \n```\n./gradlew build installDist\n```\n可能有的坑:\n- 部分依赖包可能无法下载，修改build.gradle，将repositories指向国内阿里云地址，如下：\n```\nbuildscript {\n  repositories {\n        maven {\n            url 'http://maven.aliyun.com/nexus/content/groups/public/'\n        }\n        maven {\n            url 'http://maven.aliyun.com/repository/google'\n        }\n        maven {\n            url 'http://maven.aliyun.com/repository/jcenter'\n        }\n  }\n  dependencies {\n    classpath 'com.cinnober.gradle:semver-git:2.2.3'\n    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.14'\n    classpath  'com.github.jengelman.gradle.plugins:shadow:4.0.0'\n  }\n}\n```\n\n- 如果出现编译报错的情况，可以尝试将编译期间的test过程注释掉，或者进入azkaban-executor-server和azkban-web-server目录下单独编译这两个包。  \n\n### 启动azkban-executor-server  \n- 修改配置文件 \n```\nvi ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server/conf/azkaban.properties\n```\n需要修改的内容如下  \n> default.timezone.id=Asia/Shanghai # 修改为中国时区\nazkaban.webserver.url=localhost:8199 # 指向本地的azkaban-web-server地址\n#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来\ndatabase.type=mysql\nmysql.port=3306\nmysql.host=110.110.110.110\nmysql.database=azkaban\nmysql.user=azkaban\nmysql.password=azkaban  \n\n- 启动azkaban-executor-server  \n```shell\ncd ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server;\nbin/start-exec.sh; # 注意一定要按照这个语句执行,不要在bin目录下执行./start-exe.sh，否则某些资源文件会加载不到，导致报错\n```\n-  激活executor\n```\n# 指向executor地址和端口\ncurl localhost:port/executor?action=activate\n```\n\n### 启动azkaban-web-server  \n- 修改配置文件\n```\nvi ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-exec-server/conf/azkaban.properties\n```\n需要修改的内容如下  \n> default.timezone.id=Asia/Shanghai # 修改为中国时区\n#邮件配置\nmail.sender=888888@qq.com # 发送邮件的邮箱\nmail.host=smtp.qq.com  # 邮件服务器\nmail.user=888888@qq.com # 邮件用户\nmail.password=abc123456 #密码需要取qq邮箱中获取到的授权码\njob.failure.email=8888888@qq.com # 定时任务执行失败发送邮件的邮箱\n#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来\ndatabase.type=mysql\nmysql.port=3306\nmysql.host=110.110.110.110\nmysql.database=azkaban\nmysql.user=azkaban\nmysql.password=azkaban\n\n- 启动azkaban-web-server  \n```shell\ncd ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server;\nbin/start-web.sh;\n```\n### 访问azkaban  \n浏览器输入 localhost:8199，出现如下界面 \n![](2.png)  \n用户名密码默认均为azkban，可以在 ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server/conf/azkaban-users.xml 修改用户和密码  \n\n## 配置定时任务  \n1.打开azkaban主页面，点击create project，在弹出页面输入项目名和描述\n![](3.png)\n2.随后点击项目名进入配置页面，azkaban目前无法在页面直接配置，需要通过上传和下载配置文件来完成对定时任务的增删改，也就是用到页面上的upload和download按钮\n![](4.png)\n3.在本地新建一个test.flow文件，azkaban的基本配置文件需要用flow后缀的文件进行配置，配置的基本格式如下\n```properties\n\n---\nconfig:\n  failure.emails: user@qq.com\n\nnodes:\n  - name: testA\n    type: command\n    config:\n      command: echo 'hello wrold'\n  - name: testB\n    type: command\n    config:\n      command: echo 'hello wrold'\n```\n其中nodes节点下的就是执行的任务，commnad写的就是该任务需要执行的指令，azkaban还支持其他job类型，具体见[官方文档](https://azkaban.readthedocs.io/en/latest/jobTypes.html)\n我暂时只用到commond\n4.同时新建一个flow20.project文件，里面只需要一条内容，如下\nazkaban-flow-version: 2.0\n5.将flow文件和flow20.project文件打包成 **【项目名.zip】**，然后在azkaban页面点击upload，上传该zip文件\n6.点击项目名就可以看到刚创建的job，然后点击execute flow-schedule，就可以配置cron表达式，设置该任务的运行周期\n![](5.png)\n![](6.png)\n7.以后对于任务的新增和命令修改，都只能通过在azkaban页面点击download下载zip文件，然后修改里面的内容，再重新上传来完成\n      ","slug":"tech/azkaban简单搭建","published":1,"updated":"2021-11-23T09:30:48.000Z","_id":"cl102ytb2002etccf83dueq6f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前言：<br>azkaban的用处和好处不再赘述，这里只讲怎么将azkaban在项目中使用起来。<br>另外非常推荐直接看<a href=\"https://azkaban.readthedocs.io/en/latest/\">官方的英文文档</a>进行学习，那将是最新最可靠的教程。</p>\n<h2 id=\"下载和安装azkaban\"><a href=\"#下载和安装azkaban\" class=\"headerlink\" title=\"下载和安装azkaban\"></a>下载和安装azkaban</h2><h3 id=\"下载azkaban\"><a href=\"#下载azkaban\" class=\"headerlink\" title=\"下载azkaban\"></a>下载azkaban</h3><p>方法1：直接到azkaban的github网页下载tar.gz包。截止2020.4.29日最新版本的包地址为(<a href=\"https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz\">https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz</a>)<br>方法2：在linux执行   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装azkaban\"><a href=\"#安装azkaban\" class=\"headerlink\" title=\"安装azkaban\"></a>安装azkaban</h3><p>将包进行解压，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf azkaban-3.81.10.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压完成后目录结构如下图  </p>\n<span id=\"more\"></span>\n<p><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/1.png\"><br>如果使用solo-server方式的话，不需要建表，下面的步骤也都可以不用看，直接跳转看<a href=\"https://azkaban.readthedocs.io/en/latest/getStarted.html#getting-started-with-the-solo-server\">solo-server</a><br>但是个人理解solo-server只适用于小型简单的项目，如果考虑项目以后的扩充和发展的话，建议一开始就使用multi-executor-server方式，该方式需要建表。<br>步骤如下：</p>\n<h3 id=\"新增azkaban相关表\"><a href=\"#新增azkaban相关表\" class=\"headerlink\" title=\"新增azkaban相关表\"></a>新增azkaban相关表</h3><p>复制如下文件内的sql语句，在事先建好的数据库内执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi azkaban-3.81.10/azkaban-db/build/sql/create-all-sql-0.1.0-SNAPSHOT.sql</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>可能有的坑：<br>早期版本的mysql可能不支持长度过长的字段设为索引和主键，遇到这种报错时，需要将对应的字段改短再执行。过长的字段比如 execution_logs.name，sql给设置的长度是varchar(640)，在我的mysql数据库中执行会报错，我改成了varchar(200)，这个字段的含义是任务名，一般来说你正常命名的话完全用不到640个字段的长度，所以可以放心修改。  </p>\n<h3 id=\"编译azkaban\"><a href=\"#编译azkaban\" class=\"headerlink\" title=\"编译azkaban\"></a>编译azkaban</h3><p>在azkaban目录下执行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew build installDist</span><br></pre></td></tr></table></figure>\n<p>可能有的坑:</p>\n</li>\n<li><p>部分依赖包可能无法下载，修改build.gradle，将repositories指向国内阿里云地址，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/repository/google&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/repository/jcenter&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath &#x27;com.cinnober.gradle:semver-git:2.2.3&#x27;</span><br><span class=\"line\">    classpath &#x27;net.ltgt.gradle:gradle-errorprone-plugin:0.0.14&#x27;</span><br><span class=\"line\">    classpath  &#x27;com.github.jengelman.gradle.plugins:shadow:4.0.0&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果出现编译报错的情况，可以尝试将编译期间的test过程注释掉，或者进入azkaban-executor-server和azkban-web-server目录下单独编译这两个包。  </p>\n</li>\n</ul>\n<h3 id=\"启动azkban-executor-server\"><a href=\"#启动azkban-executor-server\" class=\"headerlink\" title=\"启动azkban-executor-server\"></a>启动azkban-executor-server</h3><ul>\n<li><p>修改配置文件 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server/conf/azkaban.properties</span><br></pre></td></tr></table></figure>\n<p>需要修改的内容如下  </p>\n<blockquote>\n<p>default.timezone.id=Asia/Shanghai # 修改为中国时区<br>azkaban.webserver.url=localhost:8199 # 指向本地的azkaban-web-server地址<br>#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来<br>database.type=mysql<br>mysql.port=3306<br>mysql.host=110.110.110.110<br>mysql.database=azkaban<br>mysql.user=azkaban<br>mysql.password=azkaban  </p>\n</blockquote>\n</li>\n<li><p>启动azkaban-executor-server  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server;</span><br><span class=\"line\">bin/start-exec.sh; # 注意一定要按照这个语句执行,不要在bin目录下执行./start-exe.sh，否则某些资源文件会加载不到，导致报错</span><br></pre></td></tr></table></figure></li>\n<li><p> 激活executor</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指向executor地址和端口</span><br><span class=\"line\">curl localhost:port/executor?action=activate</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"启动azkaban-web-server\"><a href=\"#启动azkaban-web-server\" class=\"headerlink\" title=\"启动azkaban-web-server\"></a>启动azkaban-web-server</h3><ul>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-exec-server/conf/azkaban.properties</span><br></pre></td></tr></table></figure>\n<p>需要修改的内容如下  </p>\n<blockquote>\n<p>default.timezone.id=Asia/Shanghai # 修改为中国时区<br>#邮件配置<br>mail.sender=<a href=\"mailto:&#x38;&#x38;&#x38;&#56;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;\">&#x38;&#x38;&#x38;&#56;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a> # 发送邮件的邮箱<br>mail.host=smtp.qq.com  # 邮件服务器<br>mail.user=<a href=\"mailto:&#x38;&#x38;&#56;&#x38;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;\">&#x38;&#x38;&#56;&#x38;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a> # 邮件用户<br>mail.password=abc123456 #密码需要取qq邮箱中获取到的授权码<br>job.failure.email=<a href=\"mailto:&#56;&#x38;&#x38;&#x38;&#x38;&#56;&#56;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;\">&#56;&#x38;&#x38;&#x38;&#x38;&#56;&#56;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a> # 定时任务执行失败发送邮件的邮箱<br>#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来<br>database.type=mysql<br>mysql.port=3306<br>mysql.host=110.110.110.110<br>mysql.database=azkaban<br>mysql.user=azkaban<br>mysql.password=azkaban</p>\n</blockquote>\n</li>\n<li><p>启动azkaban-web-server  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server;</span><br><span class=\"line\">bin/start-web.sh;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问azkaban\"><a href=\"#访问azkaban\" class=\"headerlink\" title=\"访问azkaban\"></a>访问azkaban</h3><p>浏览器输入 localhost:8199，出现如下界面<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/2.png\"><br>用户名密码默认均为azkban，可以在 ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server/conf/azkaban-users.xml 修改用户和密码  </p>\n</li>\n</ul>\n<h2 id=\"配置定时任务\"><a href=\"#配置定时任务\" class=\"headerlink\" title=\"配置定时任务\"></a>配置定时任务</h2><p>1.打开azkaban主页面，点击create project，在弹出页面输入项目名和描述<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/3.png\"><br>2.随后点击项目名进入配置页面，azkaban目前无法在页面直接配置，需要通过上传和下载配置文件来完成对定时任务的增删改，也就是用到页面上的upload和download按钮<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/4.png\"><br>3.在本地新建一个test.flow文件，azkaban的基本配置文件需要用flow后缀的文件进行配置，配置的基本格式如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">---</span></span><br><span class=\"line\"><span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">failure.emails</span>: <span class=\"string\">user@qq.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodes</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">-</span> <span class=\"string\">name: testA</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">echo &#x27;hello wrold&#x27;</span></span><br><span class=\"line\">  <span class=\"meta\">-</span> <span class=\"string\">name: testB</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">echo &#x27;hello wrold&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>其中nodes节点下的就是执行的任务，commnad写的就是该任务需要执行的指令，azkaban还支持其他job类型，具体见<a href=\"https://azkaban.readthedocs.io/en/latest/jobTypes.html\">官方文档</a><br>我暂时只用到commond<br>4.同时新建一个flow20.project文件，里面只需要一条内容，如下<br>azkaban-flow-version: 2.0<br>5.将flow文件和flow20.project文件打包成 <strong>【项目名.zip】</strong>，然后在azkaban页面点击upload，上传该zip文件<br>6.点击项目名就可以看到刚创建的job，然后点击execute flow-schedule，就可以配置cron表达式，设置该任务的运行周期<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/5.png\"><br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/6.png\"><br>7.以后对于任务的新增和命令修改，都只能通过在azkaban页面点击download下载zip文件，然后修改里面的内容，再重新上传来完成\n      </p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>前言：<br>azkaban的用处和好处不再赘述，这里只讲怎么将azkaban在项目中使用起来。<br>另外非常推荐直接看<a href=\"https://azkaban.readthedocs.io/en/latest/\">官方的英文文档</a>进行学习，那将是最新最可靠的教程。</p>\n<h2 id=\"下载和安装azkaban\"><a href=\"#下载和安装azkaban\" class=\"headerlink\" title=\"下载和安装azkaban\"></a>下载和安装azkaban</h2><h3 id=\"下载azkaban\"><a href=\"#下载azkaban\" class=\"headerlink\" title=\"下载azkaban\"></a>下载azkaban</h3><p>方法1：直接到azkaban的github网页下载tar.gz包。截止2020.4.29日最新版本的包地址为(<a href=\"https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz\">https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz</a>)<br>方法2：在linux执行   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/azkaban/azkaban/archive/3.84.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装azkaban\"><a href=\"#安装azkaban\" class=\"headerlink\" title=\"安装azkaban\"></a>安装azkaban</h3><p>将包进行解压，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf azkaban-3.81.10.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压完成后目录结构如下图  </p>","more":"<p><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/1.png\"><br>如果使用solo-server方式的话，不需要建表，下面的步骤也都可以不用看，直接跳转看<a href=\"https://azkaban.readthedocs.io/en/latest/getStarted.html#getting-started-with-the-solo-server\">solo-server</a><br>但是个人理解solo-server只适用于小型简单的项目，如果考虑项目以后的扩充和发展的话，建议一开始就使用multi-executor-server方式，该方式需要建表。<br>步骤如下：</p>\n<h3 id=\"新增azkaban相关表\"><a href=\"#新增azkaban相关表\" class=\"headerlink\" title=\"新增azkaban相关表\"></a>新增azkaban相关表</h3><p>复制如下文件内的sql语句，在事先建好的数据库内执行  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi azkaban-3.81.10/azkaban-db/build/sql/create-all-sql-0.1.0-SNAPSHOT.sql</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>可能有的坑：<br>早期版本的mysql可能不支持长度过长的字段设为索引和主键，遇到这种报错时，需要将对应的字段改短再执行。过长的字段比如 execution_logs.name，sql给设置的长度是varchar(640)，在我的mysql数据库中执行会报错，我改成了varchar(200)，这个字段的含义是任务名，一般来说你正常命名的话完全用不到640个字段的长度，所以可以放心修改。  </p>\n<h3 id=\"编译azkaban\"><a href=\"#编译azkaban\" class=\"headerlink\" title=\"编译azkaban\"></a>编译azkaban</h3><p>在azkaban目录下执行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew build installDist</span><br></pre></td></tr></table></figure>\n<p>可能有的坑:</p>\n</li>\n<li><p>部分依赖包可能无法下载，修改build.gradle，将repositories指向国内阿里云地址，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/repository/google&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &#x27;http://maven.aliyun.com/repository/jcenter&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath &#x27;com.cinnober.gradle:semver-git:2.2.3&#x27;</span><br><span class=\"line\">    classpath &#x27;net.ltgt.gradle:gradle-errorprone-plugin:0.0.14&#x27;</span><br><span class=\"line\">    classpath  &#x27;com.github.jengelman.gradle.plugins:shadow:4.0.0&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果出现编译报错的情况，可以尝试将编译期间的test过程注释掉，或者进入azkaban-executor-server和azkban-web-server目录下单独编译这两个包。  </p>\n</li>\n</ul>\n<h3 id=\"启动azkban-executor-server\"><a href=\"#启动azkban-executor-server\" class=\"headerlink\" title=\"启动azkban-executor-server\"></a>启动azkban-executor-server</h3><ul>\n<li><p>修改配置文件 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server/conf/azkaban.properties</span><br></pre></td></tr></table></figure>\n<p>需要修改的内容如下  </p>\n<blockquote>\n<p>default.timezone.id=Asia/Shanghai # 修改为中国时区<br>azkaban.webserver.url=localhost:8199 # 指向本地的azkaban-web-server地址<br>#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来<br>database.type=mysql<br>mysql.port=3306<br>mysql.host=110.110.110.110<br>mysql.database=azkaban<br>mysql.user=azkaban<br>mysql.password=azkaban  </p>\n</blockquote>\n</li>\n<li><p>启动azkaban-executor-server  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../azkaban-3.81.0/azkaban-exec-server/build/install/azkaban-exec-server;</span><br><span class=\"line\">bin/start-exec.sh; # 注意一定要按照这个语句执行,不要在bin目录下执行./start-exe.sh，否则某些资源文件会加载不到，导致报错</span><br></pre></td></tr></table></figure></li>\n<li><p> 激活executor</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指向executor地址和端口</span><br><span class=\"line\">curl localhost:port/executor?action=activate</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"启动azkaban-web-server\"><a href=\"#启动azkaban-web-server\" class=\"headerlink\" title=\"启动azkaban-web-server\"></a>启动azkaban-web-server</h3><ul>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-exec-server/conf/azkaban.properties</span><br></pre></td></tr></table></figure>\n<p>需要修改的内容如下  </p>\n<blockquote>\n<p>default.timezone.id=Asia/Shanghai # 修改为中国时区<br>#邮件配置<br>mail.sender=<a href=\"mailto:&#x38;&#x38;&#x38;&#56;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;\">&#x38;&#x38;&#x38;&#56;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a> # 发送邮件的邮箱<br>mail.host=smtp.qq.com  # 邮件服务器<br>mail.user=<a href=\"mailto:&#x38;&#x38;&#56;&#x38;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;\">&#x38;&#x38;&#56;&#x38;&#x38;&#x38;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a> # 邮件用户<br>mail.password=abc123456 #密码需要取qq邮箱中获取到的授权码<br>job.failure.email=<a href=\"mailto:&#56;&#x38;&#x38;&#x38;&#x38;&#56;&#56;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;\">&#56;&#x38;&#x38;&#x38;&#x38;&#56;&#56;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a> # 定时任务执行失败发送邮件的邮箱<br>#数据库配置，指向azkban建表的数据库，根据实际的数据库配置来<br>database.type=mysql<br>mysql.port=3306<br>mysql.host=110.110.110.110<br>mysql.database=azkaban<br>mysql.user=azkaban<br>mysql.password=azkaban</p>\n</blockquote>\n</li>\n<li><p>启动azkaban-web-server  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server;</span><br><span class=\"line\">bin/start-web.sh;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问azkaban\"><a href=\"#访问azkaban\" class=\"headerlink\" title=\"访问azkaban\"></a>访问azkaban</h3><p>浏览器输入 localhost:8199，出现如下界面<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/2.png\"><br>用户名密码默认均为azkban，可以在 ../azkaban-3.81.0/azkaban-web-server/build/install/azkaban-web-server/conf/azkaban-users.xml 修改用户和密码  </p>\n</li>\n</ul>\n<h2 id=\"配置定时任务\"><a href=\"#配置定时任务\" class=\"headerlink\" title=\"配置定时任务\"></a>配置定时任务</h2><p>1.打开azkaban主页面，点击create project，在弹出页面输入项目名和描述<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/3.png\"><br>2.随后点击项目名进入配置页面，azkaban目前无法在页面直接配置，需要通过上传和下载配置文件来完成对定时任务的增删改，也就是用到页面上的upload和download按钮<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/4.png\"><br>3.在本地新建一个test.flow文件，azkaban的基本配置文件需要用flow后缀的文件进行配置，配置的基本格式如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">---</span></span><br><span class=\"line\"><span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">failure.emails</span>: <span class=\"string\">user@qq.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodes</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">-</span> <span class=\"string\">name: testA</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">echo &#x27;hello wrold&#x27;</span></span><br><span class=\"line\">  <span class=\"meta\">-</span> <span class=\"string\">name: testB</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">echo &#x27;hello wrold&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>其中nodes节点下的就是执行的任务，commnad写的就是该任务需要执行的指令，azkaban还支持其他job类型，具体见<a href=\"https://azkaban.readthedocs.io/en/latest/jobTypes.html\">官方文档</a><br>我暂时只用到commond<br>4.同时新建一个flow20.project文件，里面只需要一条内容，如下<br>azkaban-flow-version: 2.0<br>5.将flow文件和flow20.project文件打包成 <strong>【项目名.zip】</strong>，然后在azkaban页面点击upload，上传该zip文件<br>6.点击项目名就可以看到刚创建的job，然后点击execute flow-schedule，就可以配置cron表达式，设置该任务的运行周期<br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/5.png\"><br><img src=\"/2020/04/29/tech/azkaban%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/6.png\"><br>7.以后对于任务的新增和命令修改，都只能通过在azkaban页面点击download下载zip文件，然后修改里面的内容，再重新上传来完成\n      </p>"},{"title":"MySql 8.0参考手册中文版（一）","date":"2019-10-17T01:03:03.000Z","comments":1,"_content":"[原文文档](https://dev.mysql.com/doc/refman/8.0/en/)  \n\n**声明**\n\n该文档纯粹自己手动翻译， 也许网上有更好的版本， 但是我这个属于自己学习的版本， 为了提高英语水平和对MySQL的理解， 后续不保证会持续更新，内容如有理解错误， 还请指正。\n\n## MySQL 8.0 参考手册  \n\n### 包含MySQL NDB集群8.0  \n\n#### 摘要  \n\n这是一份MySQL参考手册。 该文档分别记录了MySQL8.0到8.0.20，以及基于NDB8.0版本到NDB8.0.19版本的NDB集群发布版本。这份文档可能包括一些目前还没发布的MySQL版本的特性。想要了解哪些版本已经发布，请查看[MySQL8.0发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)。  \n\n**MySQL8.0特性**。这份手册描述的特性并没有包含在所有版本的MySQL8.0中；这些特性可能不包含在你所购买的MySQL8.0版本中。如果你有任何问题是关于你的MySQL8.0版本中所包含的特性的，请参阅你的MySQL8.0许可协议或者联系你的oracle销售代表。  \n\n有关每个发布版本的变化，请查看[MySQL8.0发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)。  \n\n有关法律信息和许可信息，请查看[前言和法律声明](https://dev.mysql.com/doc/refman/8.0/en/preface.html)。  \n\n在使用MySQL中需要帮助，请访问[MySQL论坛](http://forums.mysql.com/)，你可以在那里向别的MySQL用户描述你的问题。  \n\n文档创建于：2019-10-16  \n\n## 1.  一般信息  \n\nMySQL提供了非常快速的，多线程，多用户，和健壮的SQL数据库服务。MySQL服务用于关键服务，高负荷生产的系统以及嵌入大量部署的软件。Oracle是Oracle公司及其分支机构的注册商标。MySQL是Oracle公司及其分支机构的商标，未经Oracle正式的书面许可，客户不得使用。其他的名字可能是其各自所有者的商标。  \n\nMySQL软件具有双重许可。用户可以在GNU通用公共许可 (http://www.fsf.org/licenses/)  条款下将MySQL软件作为开源软件产品使用，或者从Oracle购买一份标准的商业许可。访问 http://www.mysql.com/company/legal/licensing/  以获取更多关于授权政策的信息。  \n\n下面的列表描述了一些在本手册中需要特别关注的部分：  \n\n - 访问[1.3.2章节，“MySql的主要特性”](https://dev.mysql.com/doc/refman/8.0/en/features.html)，讨论关于MySQL数据库服务的功能。\n\n - 访问[1.4章节，“MySQL8.0更新了什么”](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)，获取关于MySQL新功能的概况。访问[发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)，获取关于每个版本的更新信息。\n\n - 访问[2章节，安装和升级MySQL](https://dev.mysql.com/doc/refman/8.0/en/installing.html)，获取安装介绍。访问[章节2.11](https://dev.mysql.com/doc/refman/8.0/en/upgrading.html)，获取MySQL升级说明。  \n\n - 访问[第3章节，教程](https://dev.mysql.com/doc/refman/8.0/en/tutorial.html)，获取MySQL数据库服务的教程介绍。\n\n - 访问 [第5章节，MySQL服务管理](https://dev.mysql.com/doc/refman/8.0/en/server-administration.html)，获取关于MySQL服务的配置和管理的信息。\n\n - 访问 [第6章节，安全](https://dev.mysql.com/doc/refman/8.0/en/security.html)，获取关于MySQL的安全信息。\n\n - 访问 [第17章节，复制](https://dev.mysql.com/doc/refman/8.0/en/replication.html)，获取关于设置复制服务器的信息。\n\n - 访问[第30章节，MySQL企业版](https://dev.mysql.com/doc/refman/8.0/en/mysql-enterprise.html)，获取关于MySQL企业版的信息，商用版的MySQL会发布一些进阶的功能和管理工具。\n\n - 访问 [附录A，MySQL8.0常见问题](https://dev.mysql.com/doc/refman/8.0/en/faqs.html)，获取关于MySQL服务及其功能的一些常见问题的答案。\n\n - 访问[发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)，获取关于新特性和bug修复的发布信息。\n\n     \n\n   **重要**  \n\n   如果要报告问题或者bug，请按照[章节17，“如何报告bug和问题”](https://dev.mysql.com/doc/refman/8.0/en/bug-reports.html)的指示。如果你发现在MySQL中的一个敏感的安全性的bug，请立即发送邮件信息到< [secalert_us@oracle.com](mailto:secalert_us@oracle.com) >让我们知晓。例外：支持客户应该报告所有的问题，包括安全bug，发送给Oracle支持部门。  \n\n   \n\n### 1.1 关于本手册  \n\n这份参考手册适用于MySQL数据库系统8.0版本到8.0.20版。在本文中关于和MySQL8.0镜像版本的区别参照了（8.0.x）的发行版本。查看[法律声明](https://dev.mysql.com/doc/refman/8.0/en/preface.html#legalnotice)，获取许可的信息。\n\n本手册不适用于MySQL软件的更早版本，因为在MySQL8.0和更早版本之间存在着很多功能及别的方面的不同。如果你正在使用MySQL软件的早期发布版本，请参考对应的手册。比如：[MySQL5.7操作手册](https://dev.mysql.com/doc/refman/5.7/en/)可以覆盖MySQL软件的5.7发布版本系列。\n\n由于这个手册是作为参考来使用，因此不会提供关于SQL或关联的数据库概念的一般介绍。同样也不会教你如何使用你的操作系统或命令行解释器。\n\nMySQL数据库软件在经历不断的发展，其手册同样也会不断的更新。最新版本的手册可以在 https://dev.mysql.com/doc/ 在线搜索到。其他格式也可以在这里获取，包括HTML，PDF和EPUB版本。\n\n参考手册的源文件由DocBook XML格式写成。其HTML版本和其他版本都自动生成，主要使用DocBook XSL样式表。关于DocBook的信息，详见 http://docbook.org/ 。\n\nMySQL的源代码包括内部文档，由Doxygen编写。已完成的Doxygen内容可以访问 https://dev.mysql.com/doc/index-other.html 。同样也可以按照 [章节2.9.10，“创建MySQL Doxygen文档内容”](https://dev.mysql.com/doc/refman/8.0/en/source-installation-doxygen.html)的介绍从MySQL源分发创建本地的内容。\n\n如果你有使用MySQL的的问题，加入 [MySQL开发者社区](https://mysqlcommunity.slack.com/)，或者在我们的论坛提问；详见 [章节1.6.2，“MySQL论坛的MySQL社区支持”](https://dev.mysql.com/doc/refman/8.0/en/forums.html)。如果你对本手册有补充或者更正的建议，请发送到 http://www.mysql.com/company/contact/。\n\n本手册最初由 David Axmark 和 Michael “Monty” Widenius 编写。主要由MySQL文档团队编写，成员包括 Chris Cole， Paul DuBois， Margaret Fisher， Edward Gilmore， Stefan Hinz， David Moss， Philip Olson， Daniel Price， Daniel So， 以及 Jon Stephens 。\n\n\n\n### 1.2  排版和语法约定\n\n本手册使用下列的排版约定：\n\n// TODO\n\n### 1.3 MySQL数据库管理系统总览  \n\n#### 1.3.1 什么是MySQL？ \n\nMySQL是最受欢迎的开源的SQL数据库管理系统，由Oracle公司开发，发布和支持。\n\n[MySQL官网](http://www.mysql.com/)提供了MySQL软件的最新版本的信息。\n\n- MySQL是一个数据库管理系统  \n\n  数据库是数据的结构化集合。它可以是任何东西，从简单的购物清单，到一个图片集，或者公司网络中的海量信息。在一个计算机数据库上添加，访问和执行数据存储，你需要一个像MySQL服务器一样的数据库管理系统。由于计算机非常善于处理大量的数据，数据库管理系统就在计算机中扮演了一个中心角色，无论是作为一个独立的程序，还是别的应用的一部分。\n\n- MySQL数据库是关系型的\n\n  一个关系型数据库将数据存储在不同的表中，而不是把所有的数据放在一个大的存储库中。数据库结构组织成物理文件以优化速度。具有对象（诸如数据库，表，视图，行和列）的逻辑模型提供了灵活的程序设计环境。你可以建立规则去管理不同字段之间的关系，比如一对一，一对多，唯一，必填或者选填，以及不同表之间的指向。数据库强制执行这些规则，所以一个良好设计的数据库，可以使你的程序避免看到不一致，重复，孤立，过期，或者缺失的数据。\n\n  MySQL中的SQL代表“结构化查询语言”。SQL是用于访问数据库的最通用的标准化语言。基于你的程序设计环境，又可以直接输入SQL（比如，用于创建报表），用另一种语言把SQL注入到代码中，或者使用隐含SQL语法的特定语言的API。\n\n  SQL由 ANSI/ISO 的SQL标准来定义。SQL的标准从1986年以来不断发展，存在多个不同的版本。在本手册中，“SQL-92”是指1992年发布的标准，“SQL:1999”是指在1999年发布的版本，以及“SQL:2003”，指现在的版本。我们在任何时用到“SQL标准”这个词时，都是指当前版本的SQL标准。\n\n- MySQL软件是开源的\n\n  开源意味着对于任何人来说都可以使用和修改该软件。任何人都可以从网络上下载MySQL软件并且免费使用。你也可以按照你的意愿去学习和更改源代码以适应你的需求。MySQL软件使用[GPL]( http://www.fsf.org/licenses/)（通用公共许可），来定义你在不同情景下对软件能做的和不能做的事。如果你对GPL感到不适，或者想要将MySQL的代码注入到一个商用软件中，你可以从我们这里购买一份商用许可。访问[MySQL许可概览](http://www.mysql.com/company/legal/licensing/)以获取更多信息。\n\n- MySQL数据库服务快速，可靠，可拓展且易用\n\n  如果你寻求的就是这个，你应该去尝试一下。MySQL服务可以在笔记本或者台式机上与其他应用，网络服务一起舒适的运行，只需要一点甚至无需额外的关注。如果你将整台机器都用于MySQL，你可以调整设置利用所有的内存，CPU功率，以及IO性能。MySQL同样可以扩大网络和机器的集群。\n\n  MySQL服务最初开发用来比现有方式更快的处理数据，而且成功的应用在高要求的生产环境很多年。尽管经历了不断的发展，MySQL如今提供了一组丰富而有用的功能。其可连接性，速度以及安全性使得MySQL服务高度适合在网络上访问数据库。\n\n- MySQL服务运行于客户端/服务端或者嵌入式系统\n\n  MySQL数据库软件是一个客户端/服务端系统，其包含了一个多线程的SQL服务器用于支持不同的后端，不同的客户端程序以及库，管理工具，以及大范围的应用程序接口。\n\n  我们也提供MySQL服务作为一个嵌入的多线程库，你可以将其链接到你的应用以实现一个更小，更快，易于管理的独立产品。\n\n- 大量捐赠的MySQL软件已经可用\n\n  MySQL服务有一些使用的功能是由与我们密切合作的用户开发的。很有可能你最喜欢的应用或者语言由MySQL数据库服务支持。\n\n“MySQL”的官方读法是“ My Ess Que Ell ”（而不是 “my sequel” ），但是我们不介意你把它读作“my sequel”或者别的当地的读法。\n\n#### 1.3.2 MySQL的主要功能\n\n本节描述了一些MySQL数据库软件的重要特征。在大部分情况下，该路线图适用于所有版本的MySQL。想要知道在特定版本的MySQL中引入的功能，请在“In a Nutshell”章节查看对应的手册：\n\n- MySQL8.0：[章节1.4，“MySQL8.0更新了什么”](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)\n- MySQL5.7：[MySQL5.7更新了什么](https://dev.mysql.com/doc/refman/5.7/en/mysql-nutshell.html)\n- MySQL5.6：[MySQL5.6更新了什么](https://dev.mysql.com/doc/refman/5.6/en/mysql-nutshell.html)\n- MySQL5.5：[MySQL5.5更新了什么](https://dev.mysql.com/doc/refman/5.5/en/mysql-nutshell.html)\n\n**内部实现和可移植性**\n\n- 由C和C++实现\n- 通过了大规模的不同编译器的测试\n- 在多个不同的平台上运行。详见https://www.mysql.com/support/supportedplatforms/database.html\n- 关于移植，MySQL5.5及以上的版本使用CMake命令。更早的版本使用GNU Automake，Autoconf和Libtool。\n- 经过了Purify（一个商用的内存泄漏探测器）以及Valgrind（一个GPL工具）的测试。（http://developer.kde.org/~sewardj/）\n- 使用具有独立模块的多层服务的设计。\n- 设计为使用核心线程的多线程方式，如果多核CPU可用，则可以很容易的被使用。\n- 提供了基于事务和非事务的存储引擎。\n- 使用索引压缩的非常快速的B-tree磁盘（MyISAM）\n- 设计为可以相对简单的增加另一个存储引擎。如果你想为一个内部的数据库提供一个SQL接口，这会非常有用。\n- 使用了非常快速的基于线程的内存分配系统。\n- 使用了一种优化了的内部循环的join来非常快速的执行join。\n- 实现了在内存的hash table，其作为临时表来使用。\n- 使用了一种尽可能快的高度优化的类库来实现SQL功能。在所有的查询初始化后一般就不会再有内存分配。\n- 为使用客户端/服务端环境提供了作为单独程序的服务，作为一个库可以嵌入到独立的应用中。这种应用可以单独使用或者在网络无法访问的环境中使用。\n\n**数据类型**\n\n- 很多的数据类型：带符号/无符号的整数类型，1、2、3、4以及8比特的长度， [`FLOAT`](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html), [`DOUBLE`](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html), [`CHAR`](https://dev.mysql.com/doc/refman/8.0/en/char.html), [`VARCHAR`](https://dev.mysql.com/doc/refman/8.0/en/char.html), [`BINARY`](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html), [`VARBINARY`](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html), [`TEXT`](https://dev.mysql.com/doc/refman/8.0/en/blob.html), [`BLOB`](https://dev.mysql.com/doc/refman/8.0/en/blob.html), [`DATE`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`TIME`](https://dev.mysql.com/doc/refman/8.0/en/time.html), [`DATETIME`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`TIMESTAMP`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`YEAR`](https://dev.mysql.com/doc/refman/8.0/en/year.html), [`SET`](https://dev.mysql.com/doc/refman/8.0/en/set.html), [`ENUM`](https://dev.mysql.com/doc/refman/8.0/en/enum.html) ，以及OpenGIS的空间数据类型。详见[章节11，数据类型](https://dev.mysql.com/doc/refman/8.0/en/data-types.html)。\n- 固定长度和可变长度的字符串类型。\n\n**语句和功能**\n\n- 所有的操作符和功能支持都在Select列表和Where条件语句查询中。比如：\n\n  ```sql\n  mysql> SELECT CONCAT(first_name, ' ', last_name)\n      -> FROM citizen\n      -> WHERE income/dependents > 10000 AND age > 30;\n  ```\n\n- 完全支持SQL中的`Group By`和`Order By`条件。提供Group的功能的支持（ [`COUNT()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count), [`AVG()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_avg), [`STD()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_std), [`SUM()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_sum), [`MAX()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_max), [`MIN()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_min), 和 [`GROUP_CONCAT()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_group-concat)) ）\n\n- 完全支持拥有SQL和ODBC语法的 `LEFT OUTER JOIN` 和 `RIGHT OUTER JOIN`  \n\n- 支持标准SQL要求的表和列的别名。\n\n- 支持`Delete`，`Insert`，`Replace`，以及在`update`时返回修改的数量，或者返回匹配的行数，而不是在连接服务器时设置一个标识。\n\n- 支持MySQL特定的`show`语句，用于返回数据库，存储引擎，表，以及索引的信息。支持 `INFORMATION_SCHEMA`数据库，实现自标准SQL。\n\n-  [`EXPLAIN`](https://dev.mysql.com/doc/refman/8.0/en/explain.html) 语句会展现优化器如何处理查询语句的。\n\n- 函数名称独立于表明和列名。比如，`ABS`是一个合法的列明。唯一的限制是在调用函数时，在函数名和(之间不能存在空格。详见[章节9.3，关键字和保留字](https://dev.mysql.com/doc/refman/8.0/en/keywords.html)。\n\n- 你可以在一个语句内指定不同数据库的表。\n\n**安全性**\n\n- 权限和密码系统非常灵活和安全，并支持基于主机的认证。\n- 连接服务器时，通过对所有密码通信进行加密来实现密码安全。\n\n**可拓展性和限制**\n\n- 支持大型数据库。我们使用的MySQL服务拥有可以包含5000万条数据的数据库。我们也知道拥有20万张表和50亿条数据的MySQL服务器的用户。\n- 支持每张表最多64个索引。每个索引可以包含1-16列或者部分列。InnoDB表的索引最大宽度为767字节或者3072字节。详见 [章节15.6.1.16，“InnoDB表的限制”](https://dev.mysql.com/doc/refman/8.0/en/innodb-restrictions.html)。MyISAM表的最大索引宽度为1000字节。详见 [章节16.2，“MyISAM存储引擎”](https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html)。可以使用Char，Varchar，Blob或者Text字段类型的前缀作为一个索引。\n\n**可连接性**\n\n- 客户端可以通过不同的协议连接MySQL服务：\n  - 客户端可以在任何平台上使用TCP/IP端口进行连接。\n  - 在windows系统，如果服务端启用了 [`named_pipe`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe) 系统参数进行启动，那客户端就可以使用name pipe进行连接。如果服务端启用了 [`shared_memory`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory)  系统参数进行启动，那客户端也可以使用  [`shared_memory`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory)  方式进行连接。客户端可以通过使用  [`--protocol=memory`](https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_protocol) 选项来进行shared memory的连接。\n  - 在unix系统，客户端可以使用Unix域的套接字文件来进行连接。\n- MySQL的客户端程序可以用不同的语言编写。一个C语言编写的客户端库可以用于C语言和C++编写的客户端，或者任何别的提供C语言绑定的语言。\n-  C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, 和 Tcl 的API都是可用的，使得MySQL客户端可以被多种语言编写。详见[章节28，连接器和API](https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html).\n- 连接器/ODBC（MyODBC）接口为那些使用ODBC（Open Datebase Connectivity）连接的客户端程序提供了MySQL支持。比如说，你可以使用MS Access去连接你的MySQL服务器。客户端可以运行在Windows或者Unix。连接器/ODBC源是可用的。和很多其他的功能一样，所有的ODBC2.5的功能都是被支持的。详见[MySQL 连接器/ODBC开发者指南](https://dev.mysql.com/doc/connector-odbc/en/)。\n- 连接器/J 接口为那些使用了JDBC连接器的java客户端程序提供了MySQL支持。客户端可以运行于Windows或者Unix。连接器/J 源是可用的。详见[MySQL连接器/J 5.1开发者指南](https://dev.mysql.com/doc/connector-j/5.1/en/)。\n- MySQL连接器/NET 允许开发者创建一个要求安全和高性能数据连接MySQL的.NET应用程序。它实现了必须的ADO.NET的接口并融入进了ADO.NET的感知工具。开发者可以选择他们的.NET语言去构建应用。MySQL连接器/NET是一个完全托管的ADO.NET驱动，100%由纯粹的C#编写。详见[MySQL连接器/NET开发者指南](https://dev.mysql.com/doc/connector-net/en/)。\n\n**本地化**\n\n- 服务器可以提供各种语言的报错信息。详见[章节10.12，设置错误提示的语言](https://dev.mysql.com/doc/refman/8.0/en/error-message-language.html)。\n- 完全支持不同的字符集，包括 `latin1` (cp1252)，`german`，`big5`，`ujis` ，几种Unicode编码，以及别的。比如， Scandinavian 的字符 “`å`”, “`ä`” 和“`ö`” 可以用在表和列的名字中。\n- 所有的数据以选定的字符集存储。\n- 根据默认的字符集和校对规则进行排序和比较。当MySQL服务运行的时候也可以对该规则进行更改(详见[章节10.3.2，“服务器字符集和校验”](https://dev.mysql.com/doc/refman/8.0/en/charset-server.html))。一个非常高级的排序例子，可以看下捷克的排序编码。MySQL支持多种可以在编译和运行阶段指定的字符集。\n- 服务器时区可以动态的改变，而且单独的客户端可以指定各自的时区。详见[章节5.1.13，MySQL服务器时区支持](https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html)。\n\n**客户端和工具**\n\n- MySQL包含多个客户端和实用程序。包括命令行程序，比如 [**mysqldump**](https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html) 和 [**mysqladmin**](https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html) ，以及图形化程序 [MySQL Workbench](https://dev.mysql.com/doc/refman/8.0/en/workbench.html) 。\n- MySQL服务器内置了对于SQL语句的检查，优化和表修复的支持。这些语句可以通过[mysqlcheck](https://dev.mysql.com/doc/refman/8.0/en/mysqlcheck.html)客户端从命令行使用。MySQL也包含了[myisamchk](https://dev.mysql.com/doc/refman/8.0/en/myisamchk.html)工具，一个非常快速的命令行工具，用于在MyISAM表提交这些操作。详见[章节4，MySQL程序](https://dev.mysql.com/doc/refman/8.0/en/programs.html)。\n- 可以调用 --help 和 -?来呼叫MySQL程序用以获取在线协助。\n\n#### 1.3.3 MySQL的历史\n\n我们一开始想要用我们自己的快速，低级的引擎来使用mSQL数据库来连接我们的表。然而，经过了一些测试后，我们认为mSQL的速度和灵活性达不到我们的要求。这导致了我们的数据库的一个新的SQL接口，但是其API接口和mSQL几乎一样。该API设计为允许那些为mSQL编写的第三方代码可以很方便的移植以用于MySQL。\n\nMySQL得名于联合创建人Monty Widenius的女儿，My。\n\nMySQL的海豚（我们的logo）的名字是“Sakila”，这来自于“为海豚取名”的比赛中用户建议的庞大的名字列表里选择出来的。最后获胜的名字由来自非洲Swaziland， 一个名叫Ambrose Twebaze的开源软件开发者提供。据 Ambrose所说，这个女性化的名字Sakila出自 Swaziland 的当地语Siswati。Sakila也是坦桑尼亚的 Arusha 的一个城镇的名字，邻近 Ambrose 的原籍国乌干达。\n\n### 1.4 MySQL8.0更新了什么\n\n这一节总结了在MySQL8.0中哪些被添加，启用，以及移除。随附的部分罗列了在MySQL8.0中已经被新增，启用，移除的选项和变量。详见 [章节1.5，“服务器，状态变量和选项在MySQL8.0中的添加，弃用和删除”](https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html)。\n<!-- more -->\n**MySQL8.0新增的特性**\n\n以下特性被加入到MySQL8.0中：\n\n- **数据字典。** MySQL现在合并了一个可以存储数据库对象的事务化的数据字典。在之前的MySQL发行版中，数据字典存储在元数据文件和非事务的表。关于更多信息，详见[章节14，MySQL数据字典](https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html)。\n\n- **原子数据定义语句(原子DDL)。** 一个原子DDL语句包含了数据字典的升级，存储引擎的操作，以及将关联DDL操作的二进制日志写入到单独的原子事务中。要获取更多信息，详见[章节13.1.1，“原子数据定义语句的支持”](https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html)。\n\n- **升级过程。** 在以前，安装了一个新版本的MySQL后，MySQL服务器会在下一次启动时自动升级数据字典表，在此之后，需要DBA在mysql的schema里手动调用 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 去升级系统表，也包括在别的schema比如sys schema和user schema里面的对象。\n\n  对于MySQL8.0.16来说，服务器会执行先前由 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 控制的任务。在安装了新版本的MySQL之后，服务器会在下次升级时自动执行所有的升级任务，而不是依赖DBA去调用 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 。而且，服务器会更新帮助表里面的内容（这是 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 没有做的）。一个新的 [`--upgrade`](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_upgrade) 服务器参数为服务器如何自动执行数据字典和服务器升级的选项提供了控制。想要了解更多，详见[章节2.11.3，MySQL的升级流程升级了什么](https://dev.mysql.com/doc/refman/8.0/en/upgrading-what-is-upgraded.html)。\n\n- **安全和账户管理**。增加下列增强的功能后，可以提高安全性以及增加DBA在账户管理方面的灵活性：\n\n  - 在mysql系统数据库中的授权表现在属于InnoDB（事务型）表。以前它们是MyISAM（非事务型）表。授权表的存储引擎的变化是伴随账户管理语句变化的基础。以前一句命名多个用户的账户管理的语句（如 [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/create-user.html) 或 [`DROP USER`](https://dev.mysql.com/doc/refman/8.0/en/drop-user.html)) ，在其中一些用户命名失败的情况下也可以对别的用户命名成功。现在，每一个语句都是事务的，且要么所有的命名用户都成功，要么其中任何一个失败之后语句都会回滚并不发生任何效果。语句如果成功会被写入二进制表中，但是在失败时不会写入；在这种情况下，会发生回滚且没有任何变化发生。想要了解更多，详见[13.1.1“原子数据定义语句的支持”](https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html)。\n\n  - 一个新的 `caching_sha2_password`  认证插件已经可用。类似于 `sha256_password`  插件， caching_sha2_password 实现了 SHA-256 的密码Hash，但是在连接时用缓存来解决延迟问题。它也支持更多的连接协议，而且不需要为了基于RAS密钥对的密码交换功能和OpenSSL进行连接。\n\n     caching_sha2_password 和 sha256_password 的认证方式相比 mysql_native_password 插件提供了更多的安全加密方式，而且 caching_sha2_password 的性能比sha256_password更好。由于这些 caching_sha2_password 卓越的安全和性能的特点，现在已经成为首选的认证插件，而且也是默认的认证插件，而不是  `mysql_native_password` 。想要了解这种默认插件的变化对于服务器操作和服务器与客户端及连接器之间的兼容性的信息，详见 [ caching_sha2_password 作为首选的认证插件](https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password)。\n\n  - MySQL如今支持角色，即权限集合的命名。角色可以被创建和删除。角色可以被授权和撤销权限。角色可以从用户账号中授权和删除。一个账户下的活跃的适用角色可以从账户里已授权的角色中选择，也可以在账户的登陆期间进行修改。想要了解更多信息，详见[6.2.10，使用角色](https://dev.mysql.com/doc/refman/8.0/en/roles.html)。\n\n  - MySQL现在包含了用户账号目录的概念，根据系统和普通用户区分他们是否有 [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) 权限。详见[6.2.11，账户目录](https://dev.mysql.com/doc/refman/8.0/en/account-categories.html)。\n\n  - 在以前，除非在某些schema里，否则不能授予一个全局的权限。现在只要设置 [`partial_revokes`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_partial_revokes)  系统参数为 enabled 就可以做到。详见[6.2.12，使用部分撤销的权限限制](https://dev.mysql.com/doc/refman/8.0/en/partial-revokes.html)。\n\n  - 授权语句拥有一个可以指定额外的权限信息的用户条件去用于语句执行。这种语法在SQL层面可见， 尽管其主要目的是使在部分撤销所施加的授予者特权限制的所有节点之间实现统一复制， 通过使这些限制出现在二进制日志中。\n\n  - MySQL现在会保留历史密码信息，限制重复使用以前的密码。DBA可以要求一些数量的密码更改或者一段时间内不可以从以前的密码中选择。可以为全局和每个账户建立密码重新使用的策略。\n\n    现在可以通过指定当前要被取代的密码来验证更改密码的操作。这可以让DBA去避免那些不能提供他们知道的当前密码的用户去修改密码。可以为全局或每个账户建立密码验证策略。\n\n    账户现在允许使用双重验证，这使得在复杂的多服务器系统上可以无缝的提交分阶段的密码修改，而不需要停机。\n\n    这些功能为DBA提供了对密码管理的完全掌控。关于更多信息，详见[6.2.15，密码管理](https://dev.mysql.com/doc/refman/8.0/en/password-management.html)。\n\n  - MySQL现在支持FIPS模式，它使用OpenSSL编译，在运行时一个OpenSSL库和FIPS对象模式都是可用的。FIPS模式为密码相关操作强加了一些条件，比如对于可接受的加密方式的限制，或者对于密码长度的要求。详见[6.5，FIPS支持](https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html)。\n\n  - 服务器现在可以在运行时重新配置服务器用于新连接的SSL上下文。该功能可能会很有用，比如，在一个MySQL服务器运行太久而SSL证书过期，可以避免去重启该服务器。详见 [加密连接的服务器端运行时配置](https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration)。\n\n  - OpenSSL1.1.1支持用于加密连接的TLS1.3协议，如果服务端和客户端都用OpenSSL或更高版本来编译，那么MySQL8.0.16和更高版本下也将支持TLS1.3协议。详见[6.3.2，加密连接TLS协议和密码](https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html)。\n\n  - MySQL现在授予客户端在已命名的管道上用于windows尽量少的必要连接的访问控制。新的MySQL客户端软件可以不用任何额外配置打开命名管道连接。如果更早版本的客户端软件不能马上升级，那么新的 [`named_pipe_full_access_group`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe_full_access_group)系统参数可以给予windows用户组必要的权限用于打开命名管道连接。完全访问权限的用户组的成员应该是暂时的且被限制的。\n\n- **资源管理。** MySQL现在支持资源组的创建和管理，并且允许跟服务器一起运行的线程分配给特定的组，以便线程根据组的可用的资源执行。组属性可以控制其资源，允许或者限制组内线程的资源消费。DBA可以根据不同的工作量来调整这些属性为合适的值。现在，CPU时间是可以管理的资源，其概念由\"虚拟CPU\"来表示，其包含了CPU内核，超线程，硬件线程等等。服务器在启动时决定有多少虚拟CPU可用，并且拥有相应权限的数据库管理员可以将这些CPU与资源组关联并分配线程给组。要了解更多信息，详见[8.12.5，资源组](https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html)。\n\n- **表加密管理。** 现在可以通过定义和强制加密默认值来全局管理表加密。default_table_encryption常量为新创建的schema和一般表空间定义了一个加密默认值。当创建一个schema时，加密默认值同时也可以用DEFAULT ENCRYPTION条款来进行定义。默认情况下，创建一个表的同时\n会继承当前的schema或一般表空间的加密方式。设置table_encryption_privilege_check常量为可用，会强制使用加密默认值。当创建和修改一个不同于默认表加密设置的schema或表空间，或创建和修改一个不同于默认schema加密设置的表时，会发生权限检查。在table_encryption_privilege_check常量\n为可用时，TABLE_ENCRYPTION_ADMIN权限会允许覆盖默认加密设置。想要了解更多这方面信息，查看《为Schemas和一般表空间定义一个加密默认值》章节。\n\n- **InnoDB的优化** 包含以下对于InnoDB的优化：\n  - 当前最大的自增计数器发生值改变时，会写入到redo日志，并在每一次检查点保存在私有引擎的系统表里。这个改进使得自增计数器的值在系统重启时保持不变。额外的：\n    - 服务器重启时不会取消表选项里`AUTO_INCREMENT=N`的效果。如果你重新设置了自增计数器的值，或者你将自增计数器的值修改为一个很大的值，新的值也会在服务器重启时保持不变。\n    - 服务器重启时会立刻跟随一项[ROLLBACK](https://dev.mysql.com/doc/refman/8.0/en/commit.html)的操作，而不再重新使用事务回滚后的自增值。\n    - 如果你将自增列的值修改为一个比当前最大自增值更大的值（比如一个update的操作），新的值会持久化，并且随之的新增操作会在这个值基础上自增。\n  更多的信息，详见15.6.1.6章节，[InnoDB中的自增操作](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)，以及[InnoDB自增计数器的初始化](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization)。\n  - 当索引树的损坏发生时，InnoDB会往redo日志写入一个损坏标识，这会保证损坏标识安全的销毁。InnoDB也会在每个检查点往私有引擎的系统表里写入内存崩溃的标识数据。在还原时，InnoDB在表和索引被标识为崩溃对象前会从这两个地方读取崩溃标识并合并结果内容。\n  - InnoDB缓存插件支持多种get操作（在一个缓存查询中获取多种key-value组合）和范围查询。详见15.20.4章节，[InnoDB缓存的多种get和范围查询支持](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-multiple-get-range-query.html)\n  - innodb_deadlock_detect是一个新的动态变量，可以用于对不可用的死锁的监控。在高级的金融系统中，死锁监控可以缓解大量的线程等待同一个锁的情况。同时，在死锁发生时，使用在事务回滚时的innodb_lock_wait_timeout的设置并关闭死锁监控也可能是更有效的办法。\n  - 新的`INFORMATION_SCHEMA.INNODB_CACHED_INDEXES`表会在InnoDB缓冲池中为每个索引记录索引页缓存的数量。\n  - 现在，InnoDB的临时表会在共享的临时表空间ibtmp1中创建。\n  - InnoDB[表空间加密功能](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html)支持对于redo日志和undo日志数据的加密。详见[Redo日志加密](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-redo-log)和[Undo日志加密](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-undo-log)。\n  - 对于`SELECT ... FOR SHARE`和`SELECT ... FOR UPDATE`这样的加锁读取语句，InnoDB支持使用`NOWAIT`和`SKIP LOCKED`选项。语句中的`NOWAIT`选项的效果是当一列被请求的行被另一个事务锁定时立刻返回结果。`SKIP LOCKED`会在结果集中移除被锁定的行。详见[并发锁读中使用NOWAIT和SKIP LOCKED](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked)。\n    `SELECT ... FOR SHARE`语句取代`SELECT ... LOCK IN SHARE MODE`，但是`LOCK IN SHARE MODE`依然保持着向后的兼容性。两个语句是等效的。但是`FOR UPDATE`和`FOR SHARE`支持`NOWAIT'，'SKIP LOCKED`，以及`OF`之类的`tbl_name`选项。\n    详见13.2.10章节，[SELECT STATEMENT](https://dev.mysql.com/doc/refman/8.0/en/select.html)。`OF`这个`tbl_name`值用于锁定对命名的表的查询(TODO)。\n  - \n    ADD PARTITION, DROP PARTITION, COALESCE PARTITION, REORGANIZE PARTITION, and REBUILD PARTITION ALTER TABLE options are supported by native partitioning \n    in-place APIs and may be used with ALGORITHM={COPY|INPLACE} and LOCK clauses.\n    \n    DROP PARTITION with ALGORITHM=INPLACE deletes data stored in the partition and drops the partition. However, \n    DROP PARTITION with ALGORITHM=COPY or old_alter_table=ON rebuilds the partitioned table and attempts to move data from the dropped partition \n    to another partition with a compatible PARTITION ... VALUES definition. Data that cannot be moved to another partition is deleted. ","source":"_posts/tech/MySql-Document.md","raw":"---\ntitle: MySql 8.0参考手册中文版（一）\ndate: 2019-10-17 09:03:03\ntags: \n- mysql\n- translate\ncomments: true\ncategories: \n- 学习\n- 数据库\n---\n[原文文档](https://dev.mysql.com/doc/refman/8.0/en/)  \n\n**声明**\n\n该文档纯粹自己手动翻译， 也许网上有更好的版本， 但是我这个属于自己学习的版本， 为了提高英语水平和对MySQL的理解， 后续不保证会持续更新，内容如有理解错误， 还请指正。\n\n## MySQL 8.0 参考手册  \n\n### 包含MySQL NDB集群8.0  \n\n#### 摘要  \n\n这是一份MySQL参考手册。 该文档分别记录了MySQL8.0到8.0.20，以及基于NDB8.0版本到NDB8.0.19版本的NDB集群发布版本。这份文档可能包括一些目前还没发布的MySQL版本的特性。想要了解哪些版本已经发布，请查看[MySQL8.0发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)。  \n\n**MySQL8.0特性**。这份手册描述的特性并没有包含在所有版本的MySQL8.0中；这些特性可能不包含在你所购买的MySQL8.0版本中。如果你有任何问题是关于你的MySQL8.0版本中所包含的特性的，请参阅你的MySQL8.0许可协议或者联系你的oracle销售代表。  \n\n有关每个发布版本的变化，请查看[MySQL8.0发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)。  \n\n有关法律信息和许可信息，请查看[前言和法律声明](https://dev.mysql.com/doc/refman/8.0/en/preface.html)。  \n\n在使用MySQL中需要帮助，请访问[MySQL论坛](http://forums.mysql.com/)，你可以在那里向别的MySQL用户描述你的问题。  \n\n文档创建于：2019-10-16  \n\n## 1.  一般信息  \n\nMySQL提供了非常快速的，多线程，多用户，和健壮的SQL数据库服务。MySQL服务用于关键服务，高负荷生产的系统以及嵌入大量部署的软件。Oracle是Oracle公司及其分支机构的注册商标。MySQL是Oracle公司及其分支机构的商标，未经Oracle正式的书面许可，客户不得使用。其他的名字可能是其各自所有者的商标。  \n\nMySQL软件具有双重许可。用户可以在GNU通用公共许可 (http://www.fsf.org/licenses/)  条款下将MySQL软件作为开源软件产品使用，或者从Oracle购买一份标准的商业许可。访问 http://www.mysql.com/company/legal/licensing/  以获取更多关于授权政策的信息。  \n\n下面的列表描述了一些在本手册中需要特别关注的部分：  \n\n - 访问[1.3.2章节，“MySql的主要特性”](https://dev.mysql.com/doc/refman/8.0/en/features.html)，讨论关于MySQL数据库服务的功能。\n\n - 访问[1.4章节，“MySQL8.0更新了什么”](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)，获取关于MySQL新功能的概况。访问[发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)，获取关于每个版本的更新信息。\n\n - 访问[2章节，安装和升级MySQL](https://dev.mysql.com/doc/refman/8.0/en/installing.html)，获取安装介绍。访问[章节2.11](https://dev.mysql.com/doc/refman/8.0/en/upgrading.html)，获取MySQL升级说明。  \n\n - 访问[第3章节，教程](https://dev.mysql.com/doc/refman/8.0/en/tutorial.html)，获取MySQL数据库服务的教程介绍。\n\n - 访问 [第5章节，MySQL服务管理](https://dev.mysql.com/doc/refman/8.0/en/server-administration.html)，获取关于MySQL服务的配置和管理的信息。\n\n - 访问 [第6章节，安全](https://dev.mysql.com/doc/refman/8.0/en/security.html)，获取关于MySQL的安全信息。\n\n - 访问 [第17章节，复制](https://dev.mysql.com/doc/refman/8.0/en/replication.html)，获取关于设置复制服务器的信息。\n\n - 访问[第30章节，MySQL企业版](https://dev.mysql.com/doc/refman/8.0/en/mysql-enterprise.html)，获取关于MySQL企业版的信息，商用版的MySQL会发布一些进阶的功能和管理工具。\n\n - 访问 [附录A，MySQL8.0常见问题](https://dev.mysql.com/doc/refman/8.0/en/faqs.html)，获取关于MySQL服务及其功能的一些常见问题的答案。\n\n - 访问[发布日志](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/)，获取关于新特性和bug修复的发布信息。\n\n     \n\n   **重要**  \n\n   如果要报告问题或者bug，请按照[章节17，“如何报告bug和问题”](https://dev.mysql.com/doc/refman/8.0/en/bug-reports.html)的指示。如果你发现在MySQL中的一个敏感的安全性的bug，请立即发送邮件信息到< [secalert_us@oracle.com](mailto:secalert_us@oracle.com) >让我们知晓。例外：支持客户应该报告所有的问题，包括安全bug，发送给Oracle支持部门。  \n\n   \n\n### 1.1 关于本手册  \n\n这份参考手册适用于MySQL数据库系统8.0版本到8.0.20版。在本文中关于和MySQL8.0镜像版本的区别参照了（8.0.x）的发行版本。查看[法律声明](https://dev.mysql.com/doc/refman/8.0/en/preface.html#legalnotice)，获取许可的信息。\n\n本手册不适用于MySQL软件的更早版本，因为在MySQL8.0和更早版本之间存在着很多功能及别的方面的不同。如果你正在使用MySQL软件的早期发布版本，请参考对应的手册。比如：[MySQL5.7操作手册](https://dev.mysql.com/doc/refman/5.7/en/)可以覆盖MySQL软件的5.7发布版本系列。\n\n由于这个手册是作为参考来使用，因此不会提供关于SQL或关联的数据库概念的一般介绍。同样也不会教你如何使用你的操作系统或命令行解释器。\n\nMySQL数据库软件在经历不断的发展，其手册同样也会不断的更新。最新版本的手册可以在 https://dev.mysql.com/doc/ 在线搜索到。其他格式也可以在这里获取，包括HTML，PDF和EPUB版本。\n\n参考手册的源文件由DocBook XML格式写成。其HTML版本和其他版本都自动生成，主要使用DocBook XSL样式表。关于DocBook的信息，详见 http://docbook.org/ 。\n\nMySQL的源代码包括内部文档，由Doxygen编写。已完成的Doxygen内容可以访问 https://dev.mysql.com/doc/index-other.html 。同样也可以按照 [章节2.9.10，“创建MySQL Doxygen文档内容”](https://dev.mysql.com/doc/refman/8.0/en/source-installation-doxygen.html)的介绍从MySQL源分发创建本地的内容。\n\n如果你有使用MySQL的的问题，加入 [MySQL开发者社区](https://mysqlcommunity.slack.com/)，或者在我们的论坛提问；详见 [章节1.6.2，“MySQL论坛的MySQL社区支持”](https://dev.mysql.com/doc/refman/8.0/en/forums.html)。如果你对本手册有补充或者更正的建议，请发送到 http://www.mysql.com/company/contact/。\n\n本手册最初由 David Axmark 和 Michael “Monty” Widenius 编写。主要由MySQL文档团队编写，成员包括 Chris Cole， Paul DuBois， Margaret Fisher， Edward Gilmore， Stefan Hinz， David Moss， Philip Olson， Daniel Price， Daniel So， 以及 Jon Stephens 。\n\n\n\n### 1.2  排版和语法约定\n\n本手册使用下列的排版约定：\n\n// TODO\n\n### 1.3 MySQL数据库管理系统总览  \n\n#### 1.3.1 什么是MySQL？ \n\nMySQL是最受欢迎的开源的SQL数据库管理系统，由Oracle公司开发，发布和支持。\n\n[MySQL官网](http://www.mysql.com/)提供了MySQL软件的最新版本的信息。\n\n- MySQL是一个数据库管理系统  \n\n  数据库是数据的结构化集合。它可以是任何东西，从简单的购物清单，到一个图片集，或者公司网络中的海量信息。在一个计算机数据库上添加，访问和执行数据存储，你需要一个像MySQL服务器一样的数据库管理系统。由于计算机非常善于处理大量的数据，数据库管理系统就在计算机中扮演了一个中心角色，无论是作为一个独立的程序，还是别的应用的一部分。\n\n- MySQL数据库是关系型的\n\n  一个关系型数据库将数据存储在不同的表中，而不是把所有的数据放在一个大的存储库中。数据库结构组织成物理文件以优化速度。具有对象（诸如数据库，表，视图，行和列）的逻辑模型提供了灵活的程序设计环境。你可以建立规则去管理不同字段之间的关系，比如一对一，一对多，唯一，必填或者选填，以及不同表之间的指向。数据库强制执行这些规则，所以一个良好设计的数据库，可以使你的程序避免看到不一致，重复，孤立，过期，或者缺失的数据。\n\n  MySQL中的SQL代表“结构化查询语言”。SQL是用于访问数据库的最通用的标准化语言。基于你的程序设计环境，又可以直接输入SQL（比如，用于创建报表），用另一种语言把SQL注入到代码中，或者使用隐含SQL语法的特定语言的API。\n\n  SQL由 ANSI/ISO 的SQL标准来定义。SQL的标准从1986年以来不断发展，存在多个不同的版本。在本手册中，“SQL-92”是指1992年发布的标准，“SQL:1999”是指在1999年发布的版本，以及“SQL:2003”，指现在的版本。我们在任何时用到“SQL标准”这个词时，都是指当前版本的SQL标准。\n\n- MySQL软件是开源的\n\n  开源意味着对于任何人来说都可以使用和修改该软件。任何人都可以从网络上下载MySQL软件并且免费使用。你也可以按照你的意愿去学习和更改源代码以适应你的需求。MySQL软件使用[GPL]( http://www.fsf.org/licenses/)（通用公共许可），来定义你在不同情景下对软件能做的和不能做的事。如果你对GPL感到不适，或者想要将MySQL的代码注入到一个商用软件中，你可以从我们这里购买一份商用许可。访问[MySQL许可概览](http://www.mysql.com/company/legal/licensing/)以获取更多信息。\n\n- MySQL数据库服务快速，可靠，可拓展且易用\n\n  如果你寻求的就是这个，你应该去尝试一下。MySQL服务可以在笔记本或者台式机上与其他应用，网络服务一起舒适的运行，只需要一点甚至无需额外的关注。如果你将整台机器都用于MySQL，你可以调整设置利用所有的内存，CPU功率，以及IO性能。MySQL同样可以扩大网络和机器的集群。\n\n  MySQL服务最初开发用来比现有方式更快的处理数据，而且成功的应用在高要求的生产环境很多年。尽管经历了不断的发展，MySQL如今提供了一组丰富而有用的功能。其可连接性，速度以及安全性使得MySQL服务高度适合在网络上访问数据库。\n\n- MySQL服务运行于客户端/服务端或者嵌入式系统\n\n  MySQL数据库软件是一个客户端/服务端系统，其包含了一个多线程的SQL服务器用于支持不同的后端，不同的客户端程序以及库，管理工具，以及大范围的应用程序接口。\n\n  我们也提供MySQL服务作为一个嵌入的多线程库，你可以将其链接到你的应用以实现一个更小，更快，易于管理的独立产品。\n\n- 大量捐赠的MySQL软件已经可用\n\n  MySQL服务有一些使用的功能是由与我们密切合作的用户开发的。很有可能你最喜欢的应用或者语言由MySQL数据库服务支持。\n\n“MySQL”的官方读法是“ My Ess Que Ell ”（而不是 “my sequel” ），但是我们不介意你把它读作“my sequel”或者别的当地的读法。\n\n#### 1.3.2 MySQL的主要功能\n\n本节描述了一些MySQL数据库软件的重要特征。在大部分情况下，该路线图适用于所有版本的MySQL。想要知道在特定版本的MySQL中引入的功能，请在“In a Nutshell”章节查看对应的手册：\n\n- MySQL8.0：[章节1.4，“MySQL8.0更新了什么”](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)\n- MySQL5.7：[MySQL5.7更新了什么](https://dev.mysql.com/doc/refman/5.7/en/mysql-nutshell.html)\n- MySQL5.6：[MySQL5.6更新了什么](https://dev.mysql.com/doc/refman/5.6/en/mysql-nutshell.html)\n- MySQL5.5：[MySQL5.5更新了什么](https://dev.mysql.com/doc/refman/5.5/en/mysql-nutshell.html)\n\n**内部实现和可移植性**\n\n- 由C和C++实现\n- 通过了大规模的不同编译器的测试\n- 在多个不同的平台上运行。详见https://www.mysql.com/support/supportedplatforms/database.html\n- 关于移植，MySQL5.5及以上的版本使用CMake命令。更早的版本使用GNU Automake，Autoconf和Libtool。\n- 经过了Purify（一个商用的内存泄漏探测器）以及Valgrind（一个GPL工具）的测试。（http://developer.kde.org/~sewardj/）\n- 使用具有独立模块的多层服务的设计。\n- 设计为使用核心线程的多线程方式，如果多核CPU可用，则可以很容易的被使用。\n- 提供了基于事务和非事务的存储引擎。\n- 使用索引压缩的非常快速的B-tree磁盘（MyISAM）\n- 设计为可以相对简单的增加另一个存储引擎。如果你想为一个内部的数据库提供一个SQL接口，这会非常有用。\n- 使用了非常快速的基于线程的内存分配系统。\n- 使用了一种优化了的内部循环的join来非常快速的执行join。\n- 实现了在内存的hash table，其作为临时表来使用。\n- 使用了一种尽可能快的高度优化的类库来实现SQL功能。在所有的查询初始化后一般就不会再有内存分配。\n- 为使用客户端/服务端环境提供了作为单独程序的服务，作为一个库可以嵌入到独立的应用中。这种应用可以单独使用或者在网络无法访问的环境中使用。\n\n**数据类型**\n\n- 很多的数据类型：带符号/无符号的整数类型，1、2、3、4以及8比特的长度， [`FLOAT`](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html), [`DOUBLE`](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html), [`CHAR`](https://dev.mysql.com/doc/refman/8.0/en/char.html), [`VARCHAR`](https://dev.mysql.com/doc/refman/8.0/en/char.html), [`BINARY`](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html), [`VARBINARY`](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html), [`TEXT`](https://dev.mysql.com/doc/refman/8.0/en/blob.html), [`BLOB`](https://dev.mysql.com/doc/refman/8.0/en/blob.html), [`DATE`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`TIME`](https://dev.mysql.com/doc/refman/8.0/en/time.html), [`DATETIME`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`TIMESTAMP`](https://dev.mysql.com/doc/refman/8.0/en/datetime.html), [`YEAR`](https://dev.mysql.com/doc/refman/8.0/en/year.html), [`SET`](https://dev.mysql.com/doc/refman/8.0/en/set.html), [`ENUM`](https://dev.mysql.com/doc/refman/8.0/en/enum.html) ，以及OpenGIS的空间数据类型。详见[章节11，数据类型](https://dev.mysql.com/doc/refman/8.0/en/data-types.html)。\n- 固定长度和可变长度的字符串类型。\n\n**语句和功能**\n\n- 所有的操作符和功能支持都在Select列表和Where条件语句查询中。比如：\n\n  ```sql\n  mysql> SELECT CONCAT(first_name, ' ', last_name)\n      -> FROM citizen\n      -> WHERE income/dependents > 10000 AND age > 30;\n  ```\n\n- 完全支持SQL中的`Group By`和`Order By`条件。提供Group的功能的支持（ [`COUNT()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count), [`AVG()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_avg), [`STD()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_std), [`SUM()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_sum), [`MAX()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_max), [`MIN()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_min), 和 [`GROUP_CONCAT()`](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_group-concat)) ）\n\n- 完全支持拥有SQL和ODBC语法的 `LEFT OUTER JOIN` 和 `RIGHT OUTER JOIN`  \n\n- 支持标准SQL要求的表和列的别名。\n\n- 支持`Delete`，`Insert`，`Replace`，以及在`update`时返回修改的数量，或者返回匹配的行数，而不是在连接服务器时设置一个标识。\n\n- 支持MySQL特定的`show`语句，用于返回数据库，存储引擎，表，以及索引的信息。支持 `INFORMATION_SCHEMA`数据库，实现自标准SQL。\n\n-  [`EXPLAIN`](https://dev.mysql.com/doc/refman/8.0/en/explain.html) 语句会展现优化器如何处理查询语句的。\n\n- 函数名称独立于表明和列名。比如，`ABS`是一个合法的列明。唯一的限制是在调用函数时，在函数名和(之间不能存在空格。详见[章节9.3，关键字和保留字](https://dev.mysql.com/doc/refman/8.0/en/keywords.html)。\n\n- 你可以在一个语句内指定不同数据库的表。\n\n**安全性**\n\n- 权限和密码系统非常灵活和安全，并支持基于主机的认证。\n- 连接服务器时，通过对所有密码通信进行加密来实现密码安全。\n\n**可拓展性和限制**\n\n- 支持大型数据库。我们使用的MySQL服务拥有可以包含5000万条数据的数据库。我们也知道拥有20万张表和50亿条数据的MySQL服务器的用户。\n- 支持每张表最多64个索引。每个索引可以包含1-16列或者部分列。InnoDB表的索引最大宽度为767字节或者3072字节。详见 [章节15.6.1.16，“InnoDB表的限制”](https://dev.mysql.com/doc/refman/8.0/en/innodb-restrictions.html)。MyISAM表的最大索引宽度为1000字节。详见 [章节16.2，“MyISAM存储引擎”](https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html)。可以使用Char，Varchar，Blob或者Text字段类型的前缀作为一个索引。\n\n**可连接性**\n\n- 客户端可以通过不同的协议连接MySQL服务：\n  - 客户端可以在任何平台上使用TCP/IP端口进行连接。\n  - 在windows系统，如果服务端启用了 [`named_pipe`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe) 系统参数进行启动，那客户端就可以使用name pipe进行连接。如果服务端启用了 [`shared_memory`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory)  系统参数进行启动，那客户端也可以使用  [`shared_memory`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory)  方式进行连接。客户端可以通过使用  [`--protocol=memory`](https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_protocol) 选项来进行shared memory的连接。\n  - 在unix系统，客户端可以使用Unix域的套接字文件来进行连接。\n- MySQL的客户端程序可以用不同的语言编写。一个C语言编写的客户端库可以用于C语言和C++编写的客户端，或者任何别的提供C语言绑定的语言。\n-  C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, 和 Tcl 的API都是可用的，使得MySQL客户端可以被多种语言编写。详见[章节28，连接器和API](https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html).\n- 连接器/ODBC（MyODBC）接口为那些使用ODBC（Open Datebase Connectivity）连接的客户端程序提供了MySQL支持。比如说，你可以使用MS Access去连接你的MySQL服务器。客户端可以运行在Windows或者Unix。连接器/ODBC源是可用的。和很多其他的功能一样，所有的ODBC2.5的功能都是被支持的。详见[MySQL 连接器/ODBC开发者指南](https://dev.mysql.com/doc/connector-odbc/en/)。\n- 连接器/J 接口为那些使用了JDBC连接器的java客户端程序提供了MySQL支持。客户端可以运行于Windows或者Unix。连接器/J 源是可用的。详见[MySQL连接器/J 5.1开发者指南](https://dev.mysql.com/doc/connector-j/5.1/en/)。\n- MySQL连接器/NET 允许开发者创建一个要求安全和高性能数据连接MySQL的.NET应用程序。它实现了必须的ADO.NET的接口并融入进了ADO.NET的感知工具。开发者可以选择他们的.NET语言去构建应用。MySQL连接器/NET是一个完全托管的ADO.NET驱动，100%由纯粹的C#编写。详见[MySQL连接器/NET开发者指南](https://dev.mysql.com/doc/connector-net/en/)。\n\n**本地化**\n\n- 服务器可以提供各种语言的报错信息。详见[章节10.12，设置错误提示的语言](https://dev.mysql.com/doc/refman/8.0/en/error-message-language.html)。\n- 完全支持不同的字符集，包括 `latin1` (cp1252)，`german`，`big5`，`ujis` ，几种Unicode编码，以及别的。比如， Scandinavian 的字符 “`å`”, “`ä`” 和“`ö`” 可以用在表和列的名字中。\n- 所有的数据以选定的字符集存储。\n- 根据默认的字符集和校对规则进行排序和比较。当MySQL服务运行的时候也可以对该规则进行更改(详见[章节10.3.2，“服务器字符集和校验”](https://dev.mysql.com/doc/refman/8.0/en/charset-server.html))。一个非常高级的排序例子，可以看下捷克的排序编码。MySQL支持多种可以在编译和运行阶段指定的字符集。\n- 服务器时区可以动态的改变，而且单独的客户端可以指定各自的时区。详见[章节5.1.13，MySQL服务器时区支持](https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html)。\n\n**客户端和工具**\n\n- MySQL包含多个客户端和实用程序。包括命令行程序，比如 [**mysqldump**](https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html) 和 [**mysqladmin**](https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html) ，以及图形化程序 [MySQL Workbench](https://dev.mysql.com/doc/refman/8.0/en/workbench.html) 。\n- MySQL服务器内置了对于SQL语句的检查，优化和表修复的支持。这些语句可以通过[mysqlcheck](https://dev.mysql.com/doc/refman/8.0/en/mysqlcheck.html)客户端从命令行使用。MySQL也包含了[myisamchk](https://dev.mysql.com/doc/refman/8.0/en/myisamchk.html)工具，一个非常快速的命令行工具，用于在MyISAM表提交这些操作。详见[章节4，MySQL程序](https://dev.mysql.com/doc/refman/8.0/en/programs.html)。\n- 可以调用 --help 和 -?来呼叫MySQL程序用以获取在线协助。\n\n#### 1.3.3 MySQL的历史\n\n我们一开始想要用我们自己的快速，低级的引擎来使用mSQL数据库来连接我们的表。然而，经过了一些测试后，我们认为mSQL的速度和灵活性达不到我们的要求。这导致了我们的数据库的一个新的SQL接口，但是其API接口和mSQL几乎一样。该API设计为允许那些为mSQL编写的第三方代码可以很方便的移植以用于MySQL。\n\nMySQL得名于联合创建人Monty Widenius的女儿，My。\n\nMySQL的海豚（我们的logo）的名字是“Sakila”，这来自于“为海豚取名”的比赛中用户建议的庞大的名字列表里选择出来的。最后获胜的名字由来自非洲Swaziland， 一个名叫Ambrose Twebaze的开源软件开发者提供。据 Ambrose所说，这个女性化的名字Sakila出自 Swaziland 的当地语Siswati。Sakila也是坦桑尼亚的 Arusha 的一个城镇的名字，邻近 Ambrose 的原籍国乌干达。\n\n### 1.4 MySQL8.0更新了什么\n\n这一节总结了在MySQL8.0中哪些被添加，启用，以及移除。随附的部分罗列了在MySQL8.0中已经被新增，启用，移除的选项和变量。详见 [章节1.5，“服务器，状态变量和选项在MySQL8.0中的添加，弃用和删除”](https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html)。\n<!-- more -->\n**MySQL8.0新增的特性**\n\n以下特性被加入到MySQL8.0中：\n\n- **数据字典。** MySQL现在合并了一个可以存储数据库对象的事务化的数据字典。在之前的MySQL发行版中，数据字典存储在元数据文件和非事务的表。关于更多信息，详见[章节14，MySQL数据字典](https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html)。\n\n- **原子数据定义语句(原子DDL)。** 一个原子DDL语句包含了数据字典的升级，存储引擎的操作，以及将关联DDL操作的二进制日志写入到单独的原子事务中。要获取更多信息，详见[章节13.1.1，“原子数据定义语句的支持”](https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html)。\n\n- **升级过程。** 在以前，安装了一个新版本的MySQL后，MySQL服务器会在下一次启动时自动升级数据字典表，在此之后，需要DBA在mysql的schema里手动调用 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 去升级系统表，也包括在别的schema比如sys schema和user schema里面的对象。\n\n  对于MySQL8.0.16来说，服务器会执行先前由 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 控制的任务。在安装了新版本的MySQL之后，服务器会在下次升级时自动执行所有的升级任务，而不是依赖DBA去调用 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 。而且，服务器会更新帮助表里面的内容（这是 [**mysql_upgrade**](https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html) 没有做的）。一个新的 [`--upgrade`](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_upgrade) 服务器参数为服务器如何自动执行数据字典和服务器升级的选项提供了控制。想要了解更多，详见[章节2.11.3，MySQL的升级流程升级了什么](https://dev.mysql.com/doc/refman/8.0/en/upgrading-what-is-upgraded.html)。\n\n- **安全和账户管理**。增加下列增强的功能后，可以提高安全性以及增加DBA在账户管理方面的灵活性：\n\n  - 在mysql系统数据库中的授权表现在属于InnoDB（事务型）表。以前它们是MyISAM（非事务型）表。授权表的存储引擎的变化是伴随账户管理语句变化的基础。以前一句命名多个用户的账户管理的语句（如 [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/create-user.html) 或 [`DROP USER`](https://dev.mysql.com/doc/refman/8.0/en/drop-user.html)) ，在其中一些用户命名失败的情况下也可以对别的用户命名成功。现在，每一个语句都是事务的，且要么所有的命名用户都成功，要么其中任何一个失败之后语句都会回滚并不发生任何效果。语句如果成功会被写入二进制表中，但是在失败时不会写入；在这种情况下，会发生回滚且没有任何变化发生。想要了解更多，详见[13.1.1“原子数据定义语句的支持”](https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html)。\n\n  - 一个新的 `caching_sha2_password`  认证插件已经可用。类似于 `sha256_password`  插件， caching_sha2_password 实现了 SHA-256 的密码Hash，但是在连接时用缓存来解决延迟问题。它也支持更多的连接协议，而且不需要为了基于RAS密钥对的密码交换功能和OpenSSL进行连接。\n\n     caching_sha2_password 和 sha256_password 的认证方式相比 mysql_native_password 插件提供了更多的安全加密方式，而且 caching_sha2_password 的性能比sha256_password更好。由于这些 caching_sha2_password 卓越的安全和性能的特点，现在已经成为首选的认证插件，而且也是默认的认证插件，而不是  `mysql_native_password` 。想要了解这种默认插件的变化对于服务器操作和服务器与客户端及连接器之间的兼容性的信息，详见 [ caching_sha2_password 作为首选的认证插件](https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password)。\n\n  - MySQL如今支持角色，即权限集合的命名。角色可以被创建和删除。角色可以被授权和撤销权限。角色可以从用户账号中授权和删除。一个账户下的活跃的适用角色可以从账户里已授权的角色中选择，也可以在账户的登陆期间进行修改。想要了解更多信息，详见[6.2.10，使用角色](https://dev.mysql.com/doc/refman/8.0/en/roles.html)。\n\n  - MySQL现在包含了用户账号目录的概念，根据系统和普通用户区分他们是否有 [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) 权限。详见[6.2.11，账户目录](https://dev.mysql.com/doc/refman/8.0/en/account-categories.html)。\n\n  - 在以前，除非在某些schema里，否则不能授予一个全局的权限。现在只要设置 [`partial_revokes`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_partial_revokes)  系统参数为 enabled 就可以做到。详见[6.2.12，使用部分撤销的权限限制](https://dev.mysql.com/doc/refman/8.0/en/partial-revokes.html)。\n\n  - 授权语句拥有一个可以指定额外的权限信息的用户条件去用于语句执行。这种语法在SQL层面可见， 尽管其主要目的是使在部分撤销所施加的授予者特权限制的所有节点之间实现统一复制， 通过使这些限制出现在二进制日志中。\n\n  - MySQL现在会保留历史密码信息，限制重复使用以前的密码。DBA可以要求一些数量的密码更改或者一段时间内不可以从以前的密码中选择。可以为全局和每个账户建立密码重新使用的策略。\n\n    现在可以通过指定当前要被取代的密码来验证更改密码的操作。这可以让DBA去避免那些不能提供他们知道的当前密码的用户去修改密码。可以为全局或每个账户建立密码验证策略。\n\n    账户现在允许使用双重验证，这使得在复杂的多服务器系统上可以无缝的提交分阶段的密码修改，而不需要停机。\n\n    这些功能为DBA提供了对密码管理的完全掌控。关于更多信息，详见[6.2.15，密码管理](https://dev.mysql.com/doc/refman/8.0/en/password-management.html)。\n\n  - MySQL现在支持FIPS模式，它使用OpenSSL编译，在运行时一个OpenSSL库和FIPS对象模式都是可用的。FIPS模式为密码相关操作强加了一些条件，比如对于可接受的加密方式的限制，或者对于密码长度的要求。详见[6.5，FIPS支持](https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html)。\n\n  - 服务器现在可以在运行时重新配置服务器用于新连接的SSL上下文。该功能可能会很有用，比如，在一个MySQL服务器运行太久而SSL证书过期，可以避免去重启该服务器。详见 [加密连接的服务器端运行时配置](https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration)。\n\n  - OpenSSL1.1.1支持用于加密连接的TLS1.3协议，如果服务端和客户端都用OpenSSL或更高版本来编译，那么MySQL8.0.16和更高版本下也将支持TLS1.3协议。详见[6.3.2，加密连接TLS协议和密码](https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html)。\n\n  - MySQL现在授予客户端在已命名的管道上用于windows尽量少的必要连接的访问控制。新的MySQL客户端软件可以不用任何额外配置打开命名管道连接。如果更早版本的客户端软件不能马上升级，那么新的 [`named_pipe_full_access_group`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe_full_access_group)系统参数可以给予windows用户组必要的权限用于打开命名管道连接。完全访问权限的用户组的成员应该是暂时的且被限制的。\n\n- **资源管理。** MySQL现在支持资源组的创建和管理，并且允许跟服务器一起运行的线程分配给特定的组，以便线程根据组的可用的资源执行。组属性可以控制其资源，允许或者限制组内线程的资源消费。DBA可以根据不同的工作量来调整这些属性为合适的值。现在，CPU时间是可以管理的资源，其概念由\"虚拟CPU\"来表示，其包含了CPU内核，超线程，硬件线程等等。服务器在启动时决定有多少虚拟CPU可用，并且拥有相应权限的数据库管理员可以将这些CPU与资源组关联并分配线程给组。要了解更多信息，详见[8.12.5，资源组](https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html)。\n\n- **表加密管理。** 现在可以通过定义和强制加密默认值来全局管理表加密。default_table_encryption常量为新创建的schema和一般表空间定义了一个加密默认值。当创建一个schema时，加密默认值同时也可以用DEFAULT ENCRYPTION条款来进行定义。默认情况下，创建一个表的同时\n会继承当前的schema或一般表空间的加密方式。设置table_encryption_privilege_check常量为可用，会强制使用加密默认值。当创建和修改一个不同于默认表加密设置的schema或表空间，或创建和修改一个不同于默认schema加密设置的表时，会发生权限检查。在table_encryption_privilege_check常量\n为可用时，TABLE_ENCRYPTION_ADMIN权限会允许覆盖默认加密设置。想要了解更多这方面信息，查看《为Schemas和一般表空间定义一个加密默认值》章节。\n\n- **InnoDB的优化** 包含以下对于InnoDB的优化：\n  - 当前最大的自增计数器发生值改变时，会写入到redo日志，并在每一次检查点保存在私有引擎的系统表里。这个改进使得自增计数器的值在系统重启时保持不变。额外的：\n    - 服务器重启时不会取消表选项里`AUTO_INCREMENT=N`的效果。如果你重新设置了自增计数器的值，或者你将自增计数器的值修改为一个很大的值，新的值也会在服务器重启时保持不变。\n    - 服务器重启时会立刻跟随一项[ROLLBACK](https://dev.mysql.com/doc/refman/8.0/en/commit.html)的操作，而不再重新使用事务回滚后的自增值。\n    - 如果你将自增列的值修改为一个比当前最大自增值更大的值（比如一个update的操作），新的值会持久化，并且随之的新增操作会在这个值基础上自增。\n  更多的信息，详见15.6.1.6章节，[InnoDB中的自增操作](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)，以及[InnoDB自增计数器的初始化](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization)。\n  - 当索引树的损坏发生时，InnoDB会往redo日志写入一个损坏标识，这会保证损坏标识安全的销毁。InnoDB也会在每个检查点往私有引擎的系统表里写入内存崩溃的标识数据。在还原时，InnoDB在表和索引被标识为崩溃对象前会从这两个地方读取崩溃标识并合并结果内容。\n  - InnoDB缓存插件支持多种get操作（在一个缓存查询中获取多种key-value组合）和范围查询。详见15.20.4章节，[InnoDB缓存的多种get和范围查询支持](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-multiple-get-range-query.html)\n  - innodb_deadlock_detect是一个新的动态变量，可以用于对不可用的死锁的监控。在高级的金融系统中，死锁监控可以缓解大量的线程等待同一个锁的情况。同时，在死锁发生时，使用在事务回滚时的innodb_lock_wait_timeout的设置并关闭死锁监控也可能是更有效的办法。\n  - 新的`INFORMATION_SCHEMA.INNODB_CACHED_INDEXES`表会在InnoDB缓冲池中为每个索引记录索引页缓存的数量。\n  - 现在，InnoDB的临时表会在共享的临时表空间ibtmp1中创建。\n  - InnoDB[表空间加密功能](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html)支持对于redo日志和undo日志数据的加密。详见[Redo日志加密](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-redo-log)和[Undo日志加密](https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-undo-log)。\n  - 对于`SELECT ... FOR SHARE`和`SELECT ... FOR UPDATE`这样的加锁读取语句，InnoDB支持使用`NOWAIT`和`SKIP LOCKED`选项。语句中的`NOWAIT`选项的效果是当一列被请求的行被另一个事务锁定时立刻返回结果。`SKIP LOCKED`会在结果集中移除被锁定的行。详见[并发锁读中使用NOWAIT和SKIP LOCKED](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked)。\n    `SELECT ... FOR SHARE`语句取代`SELECT ... LOCK IN SHARE MODE`，但是`LOCK IN SHARE MODE`依然保持着向后的兼容性。两个语句是等效的。但是`FOR UPDATE`和`FOR SHARE`支持`NOWAIT'，'SKIP LOCKED`，以及`OF`之类的`tbl_name`选项。\n    详见13.2.10章节，[SELECT STATEMENT](https://dev.mysql.com/doc/refman/8.0/en/select.html)。`OF`这个`tbl_name`值用于锁定对命名的表的查询(TODO)。\n  - \n    ADD PARTITION, DROP PARTITION, COALESCE PARTITION, REORGANIZE PARTITION, and REBUILD PARTITION ALTER TABLE options are supported by native partitioning \n    in-place APIs and may be used with ALGORITHM={COPY|INPLACE} and LOCK clauses.\n    \n    DROP PARTITION with ALGORITHM=INPLACE deletes data stored in the partition and drops the partition. However, \n    DROP PARTITION with ALGORITHM=COPY or old_alter_table=ON rebuilds the partitioned table and attempts to move data from the dropped partition \n    to another partition with a compatible PARTITION ... VALUES definition. Data that cannot be moved to another partition is deleted. ","slug":"tech/MySql-Document","published":1,"updated":"2021-11-29T01:17:04.000Z","_id":"cl102yupw002itccf6et16b6z","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">原文文档</a>  </p>\n<p><strong>声明</strong></p>\n<p>该文档纯粹自己手动翻译， 也许网上有更好的版本， 但是我这个属于自己学习的版本， 为了提高英语水平和对MySQL的理解， 后续不保证会持续更新，内容如有理解错误， 还请指正。</p>\n<h2 id=\"MySQL-8-0-参考手册\"><a href=\"#MySQL-8-0-参考手册\" class=\"headerlink\" title=\"MySQL 8.0 参考手册\"></a>MySQL 8.0 参考手册</h2><h3 id=\"包含MySQL-NDB集群8-0\"><a href=\"#包含MySQL-NDB集群8-0\" class=\"headerlink\" title=\"包含MySQL NDB集群8.0\"></a>包含MySQL NDB集群8.0</h3><h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><p>这是一份MySQL参考手册。 该文档分别记录了MySQL8.0到8.0.20，以及基于NDB8.0版本到NDB8.0.19版本的NDB集群发布版本。这份文档可能包括一些目前还没发布的MySQL版本的特性。想要了解哪些版本已经发布，请查看<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">MySQL8.0发布日志</a>。  </p>\n<p><strong>MySQL8.0特性</strong>。这份手册描述的特性并没有包含在所有版本的MySQL8.0中；这些特性可能不包含在你所购买的MySQL8.0版本中。如果你有任何问题是关于你的MySQL8.0版本中所包含的特性的，请参阅你的MySQL8.0许可协议或者联系你的oracle销售代表。  </p>\n<p>有关每个发布版本的变化，请查看<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">MySQL8.0发布日志</a>。  </p>\n<p>有关法律信息和许可信息，请查看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/preface.html\">前言和法律声明</a>。  </p>\n<p>在使用MySQL中需要帮助，请访问<a href=\"http://forums.mysql.com/\">MySQL论坛</a>，你可以在那里向别的MySQL用户描述你的问题。  </p>\n<p>文档创建于：2019-10-16  </p>\n<h2 id=\"1-一般信息\"><a href=\"#1-一般信息\" class=\"headerlink\" title=\"1.  一般信息\"></a>1.  一般信息</h2><p>MySQL提供了非常快速的，多线程，多用户，和健壮的SQL数据库服务。MySQL服务用于关键服务，高负荷生产的系统以及嵌入大量部署的软件。Oracle是Oracle公司及其分支机构的注册商标。MySQL是Oracle公司及其分支机构的商标，未经Oracle正式的书面许可，客户不得使用。其他的名字可能是其各自所有者的商标。  </p>\n<p>MySQL软件具有双重许可。用户可以在GNU通用公共许可 (<a href=\"http://www.fsf.org/licenses/\">http://www.fsf.org/licenses/</a>)  条款下将MySQL软件作为开源软件产品使用，或者从Oracle购买一份标准的商业许可。访问 <a href=\"http://www.mysql.com/company/legal/licensing/\">http://www.mysql.com/company/legal/licensing/</a>  以获取更多关于授权政策的信息。  </p>\n<p>下面的列表描述了一些在本手册中需要特别关注的部分：  </p>\n<ul>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/features.html\">1.3.2章节，“MySql的主要特性”</a>，讨论关于MySQL数据库服务的功能。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html\">1.4章节，“MySQL8.0更新了什么”</a>，获取关于MySQL新功能的概况。访问<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">发布日志</a>，获取关于每个版本的更新信息。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/installing.html\">2章节，安装和升级MySQL</a>，获取安装介绍。访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading.html\">章节2.11</a>，获取MySQL升级说明。  </p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/tutorial.html\">第3章节，教程</a>，获取MySQL数据库服务的教程介绍。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-administration.html\">第5章节，MySQL服务管理</a>，获取关于MySQL服务的配置和管理的信息。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/security.html\">第6章节，安全</a>，获取关于MySQL的安全信息。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication.html\">第17章节，复制</a>，获取关于设置复制服务器的信息。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-enterprise.html\">第30章节，MySQL企业版</a>，获取关于MySQL企业版的信息，商用版的MySQL会发布一些进阶的功能和管理工具。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/faqs.html\">附录A，MySQL8.0常见问题</a>，获取关于MySQL服务及其功能的一些常见问题的答案。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">发布日志</a>，获取关于新特性和bug修复的发布信息。</p>\n<p><strong>重要</strong>  </p>\n<p>如果要报告问题或者bug，请按照<a href=\"https://dev.mysql.com/doc/refman/8.0/en/bug-reports.html\">章节17，“如何报告bug和问题”</a>的指示。如果你发现在MySQL中的一个敏感的安全性的bug，请立即发送邮件信息到&lt; <a href=\"mailto:secalert_us@oracle.com\">secalert_us@oracle.com</a> &gt;让我们知晓。例外：支持客户应该报告所有的问题，包括安全bug，发送给Oracle支持部门。  </p>\n</li>\n</ul>\n<h3 id=\"1-1-关于本手册\"><a href=\"#1-1-关于本手册\" class=\"headerlink\" title=\"1.1 关于本手册\"></a>1.1 关于本手册</h3><p>这份参考手册适用于MySQL数据库系统8.0版本到8.0.20版。在本文中关于和MySQL8.0镜像版本的区别参照了（8.0.x）的发行版本。查看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/preface.html#legalnotice\">法律声明</a>，获取许可的信息。</p>\n<p>本手册不适用于MySQL软件的更早版本，因为在MySQL8.0和更早版本之间存在着很多功能及别的方面的不同。如果你正在使用MySQL软件的早期发布版本，请参考对应的手册。比如：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/\">MySQL5.7操作手册</a>可以覆盖MySQL软件的5.7发布版本系列。</p>\n<p>由于这个手册是作为参考来使用，因此不会提供关于SQL或关联的数据库概念的一般介绍。同样也不会教你如何使用你的操作系统或命令行解释器。</p>\n<p>MySQL数据库软件在经历不断的发展，其手册同样也会不断的更新。最新版本的手册可以在 <a href=\"https://dev.mysql.com/doc/\">https://dev.mysql.com/doc/</a> 在线搜索到。其他格式也可以在这里获取，包括HTML，PDF和EPUB版本。</p>\n<p>参考手册的源文件由DocBook XML格式写成。其HTML版本和其他版本都自动生成，主要使用DocBook XSL样式表。关于DocBook的信息，详见 <a href=\"http://docbook.org/\">http://docbook.org/</a> 。</p>\n<p>MySQL的源代码包括内部文档，由Doxygen编写。已完成的Doxygen内容可以访问 <a href=\"https://dev.mysql.com/doc/index-other.html\">https://dev.mysql.com/doc/index-other.html</a> 。同样也可以按照 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/source-installation-doxygen.html\">章节2.9.10，“创建MySQL Doxygen文档内容”</a>的介绍从MySQL源分发创建本地的内容。</p>\n<p>如果你有使用MySQL的的问题，加入 <a href=\"https://mysqlcommunity.slack.com/\">MySQL开发者社区</a>，或者在我们的论坛提问；详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/forums.html\">章节1.6.2，“MySQL论坛的MySQL社区支持”</a>。如果你对本手册有补充或者更正的建议，请发送到 <a href=\"http://www.mysql.com/company/contact/%E3%80%82\">http://www.mysql.com/company/contact/。</a></p>\n<p>本手册最初由 David Axmark 和 Michael “Monty” Widenius 编写。主要由MySQL文档团队编写，成员包括 Chris Cole， Paul DuBois， Margaret Fisher， Edward Gilmore， Stefan Hinz， David Moss， Philip Olson， Daniel Price， Daniel So， 以及 Jon Stephens 。</p>\n<h3 id=\"1-2-排版和语法约定\"><a href=\"#1-2-排版和语法约定\" class=\"headerlink\" title=\"1.2  排版和语法约定\"></a>1.2  排版和语法约定</h3><p>本手册使用下列的排版约定：</p>\n<p>// TODO</p>\n<h3 id=\"1-3-MySQL数据库管理系统总览\"><a href=\"#1-3-MySQL数据库管理系统总览\" class=\"headerlink\" title=\"1.3 MySQL数据库管理系统总览\"></a>1.3 MySQL数据库管理系统总览</h3><h4 id=\"1-3-1-什么是MySQL？\"><a href=\"#1-3-1-什么是MySQL？\" class=\"headerlink\" title=\"1.3.1 什么是MySQL？\"></a>1.3.1 什么是MySQL？</h4><p>MySQL是最受欢迎的开源的SQL数据库管理系统，由Oracle公司开发，发布和支持。</p>\n<p><a href=\"http://www.mysql.com/\">MySQL官网</a>提供了MySQL软件的最新版本的信息。</p>\n<ul>\n<li><p>MySQL是一个数据库管理系统  </p>\n<p>数据库是数据的结构化集合。它可以是任何东西，从简单的购物清单，到一个图片集，或者公司网络中的海量信息。在一个计算机数据库上添加，访问和执行数据存储，你需要一个像MySQL服务器一样的数据库管理系统。由于计算机非常善于处理大量的数据，数据库管理系统就在计算机中扮演了一个中心角色，无论是作为一个独立的程序，还是别的应用的一部分。</p>\n</li>\n<li><p>MySQL数据库是关系型的</p>\n<p>一个关系型数据库将数据存储在不同的表中，而不是把所有的数据放在一个大的存储库中。数据库结构组织成物理文件以优化速度。具有对象（诸如数据库，表，视图，行和列）的逻辑模型提供了灵活的程序设计环境。你可以建立规则去管理不同字段之间的关系，比如一对一，一对多，唯一，必填或者选填，以及不同表之间的指向。数据库强制执行这些规则，所以一个良好设计的数据库，可以使你的程序避免看到不一致，重复，孤立，过期，或者缺失的数据。</p>\n<p>MySQL中的SQL代表“结构化查询语言”。SQL是用于访问数据库的最通用的标准化语言。基于你的程序设计环境，又可以直接输入SQL（比如，用于创建报表），用另一种语言把SQL注入到代码中，或者使用隐含SQL语法的特定语言的API。</p>\n<p>SQL由 ANSI/ISO 的SQL标准来定义。SQL的标准从1986年以来不断发展，存在多个不同的版本。在本手册中，“SQL-92”是指1992年发布的标准，“SQL:1999”是指在1999年发布的版本，以及“SQL:2003”，指现在的版本。我们在任何时用到“SQL标准”这个词时，都是指当前版本的SQL标准。</p>\n</li>\n<li><p>MySQL软件是开源的</p>\n<p>开源意味着对于任何人来说都可以使用和修改该软件。任何人都可以从网络上下载MySQL软件并且免费使用。你也可以按照你的意愿去学习和更改源代码以适应你的需求。MySQL软件使用<a href=\"http://www.fsf.org/licenses/\">GPL</a>)（通用公共许可），来定义你在不同情景下对软件能做的和不能做的事。如果你对GPL感到不适，或者想要将MySQL的代码注入到一个商用软件中，你可以从我们这里购买一份商用许可。访问<a href=\"http://www.mysql.com/company/legal/licensing/\">MySQL许可概览</a>以获取更多信息。</p>\n</li>\n<li><p>MySQL数据库服务快速，可靠，可拓展且易用</p>\n<p>如果你寻求的就是这个，你应该去尝试一下。MySQL服务可以在笔记本或者台式机上与其他应用，网络服务一起舒适的运行，只需要一点甚至无需额外的关注。如果你将整台机器都用于MySQL，你可以调整设置利用所有的内存，CPU功率，以及IO性能。MySQL同样可以扩大网络和机器的集群。</p>\n<p>MySQL服务最初开发用来比现有方式更快的处理数据，而且成功的应用在高要求的生产环境很多年。尽管经历了不断的发展，MySQL如今提供了一组丰富而有用的功能。其可连接性，速度以及安全性使得MySQL服务高度适合在网络上访问数据库。</p>\n</li>\n<li><p>MySQL服务运行于客户端/服务端或者嵌入式系统</p>\n<p>MySQL数据库软件是一个客户端/服务端系统，其包含了一个多线程的SQL服务器用于支持不同的后端，不同的客户端程序以及库，管理工具，以及大范围的应用程序接口。</p>\n<p>我们也提供MySQL服务作为一个嵌入的多线程库，你可以将其链接到你的应用以实现一个更小，更快，易于管理的独立产品。</p>\n</li>\n<li><p>大量捐赠的MySQL软件已经可用</p>\n<p>MySQL服务有一些使用的功能是由与我们密切合作的用户开发的。很有可能你最喜欢的应用或者语言由MySQL数据库服务支持。</p>\n</li>\n</ul>\n<p>“MySQL”的官方读法是“ My Ess Que Ell ”（而不是 “my sequel” ），但是我们不介意你把它读作“my sequel”或者别的当地的读法。</p>\n<h4 id=\"1-3-2-MySQL的主要功能\"><a href=\"#1-3-2-MySQL的主要功能\" class=\"headerlink\" title=\"1.3.2 MySQL的主要功能\"></a>1.3.2 MySQL的主要功能</h4><p>本节描述了一些MySQL数据库软件的重要特征。在大部分情况下，该路线图适用于所有版本的MySQL。想要知道在特定版本的MySQL中引入的功能，请在“In a Nutshell”章节查看对应的手册：</p>\n<ul>\n<li>MySQL8.0：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html\">章节1.4，“MySQL8.0更新了什么”</a></li>\n<li>MySQL5.7：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/mysql-nutshell.html\">MySQL5.7更新了什么</a></li>\n<li>MySQL5.6：<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysql-nutshell.html\">MySQL5.6更新了什么</a></li>\n<li>MySQL5.5：<a href=\"https://dev.mysql.com/doc/refman/5.5/en/mysql-nutshell.html\">MySQL5.5更新了什么</a></li>\n</ul>\n<p><strong>内部实现和可移植性</strong></p>\n<ul>\n<li>由C和C++实现</li>\n<li>通过了大规模的不同编译器的测试</li>\n<li>在多个不同的平台上运行。详见<a href=\"https://www.mysql.com/support/supportedplatforms/database.html\">https://www.mysql.com/support/supportedplatforms/database.html</a></li>\n<li>关于移植，MySQL5.5及以上的版本使用CMake命令。更早的版本使用GNU Automake，Autoconf和Libtool。</li>\n<li>经过了Purify（一个商用的内存泄漏探测器）以及Valgrind（一个GPL工具）的测试。（<a href=\"http://developer.kde.org/~sewardj/%EF%BC%89\">http://developer.kde.org/~sewardj/）</a></li>\n<li>使用具有独立模块的多层服务的设计。</li>\n<li>设计为使用核心线程的多线程方式，如果多核CPU可用，则可以很容易的被使用。</li>\n<li>提供了基于事务和非事务的存储引擎。</li>\n<li>使用索引压缩的非常快速的B-tree磁盘（MyISAM）</li>\n<li>设计为可以相对简单的增加另一个存储引擎。如果你想为一个内部的数据库提供一个SQL接口，这会非常有用。</li>\n<li>使用了非常快速的基于线程的内存分配系统。</li>\n<li>使用了一种优化了的内部循环的join来非常快速的执行join。</li>\n<li>实现了在内存的hash table，其作为临时表来使用。</li>\n<li>使用了一种尽可能快的高度优化的类库来实现SQL功能。在所有的查询初始化后一般就不会再有内存分配。</li>\n<li>为使用客户端/服务端环境提供了作为单独程序的服务，作为一个库可以嵌入到独立的应用中。这种应用可以单独使用或者在网络无法访问的环境中使用。</li>\n</ul>\n<p><strong>数据类型</strong></p>\n<ul>\n<li>很多的数据类型：带符号/无符号的整数类型，1、2、3、4以及8比特的长度， <a href=\"https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html\"><code>FLOAT</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html\"><code>DOUBLE</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/char.html\"><code>CHAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/char.html\"><code>VARCHAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\"><code>BINARY</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\"><code>VARBINARY</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>TEXT</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>BLOB</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>DATE</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/time.html\"><code>TIME</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>DATETIME</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>TIMESTAMP</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/year.html\"><code>YEAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/set.html\"><code>SET</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/enum.html\"><code>ENUM</code></a> ，以及OpenGIS的空间数据类型。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-types.html\">章节11，数据类型</a>。</li>\n<li>固定长度和可变长度的字符串类型。</li>\n</ul>\n<p><strong>语句和功能</strong></p>\n<ul>\n<li><p>所有的操作符和功能支持都在Select列表和Where条件语句查询中。比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> CONCAT(first_name, <span class=\"string\">&#x27; &#x27;</span>, last_name)</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">FROM</span> citizen</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">WHERE</span> income<span class=\"operator\">/</span>dependents <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span> <span class=\"keyword\">AND</span> age <span class=\"operator\">&gt;</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>完全支持SQL中的<code>Group By</code>和<code>Order By</code>条件。提供Group的功能的支持（ <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count\"><code>COUNT()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_avg\"><code>AVG()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_std\"><code>STD()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_sum\"><code>SUM()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_max\"><code>MAX()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_min\"><code>MIN()</code></a>, 和 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_group-concat\"><code>GROUP_CONCAT()</code></a>) ）</p>\n</li>\n<li><p>完全支持拥有SQL和ODBC语法的 <code>LEFT OUTER JOIN</code> 和 <code>RIGHT OUTER JOIN</code>  </p>\n</li>\n<li><p>支持标准SQL要求的表和列的别名。</p>\n</li>\n<li><p>支持<code>Delete</code>，<code>Insert</code>，<code>Replace</code>，以及在<code>update</code>时返回修改的数量，或者返回匹配的行数，而不是在连接服务器时设置一个标识。</p>\n</li>\n<li><p>支持MySQL特定的<code>show</code>语句，用于返回数据库，存储引擎，表，以及索引的信息。支持 <code>INFORMATION_SCHEMA</code>数据库，实现自标准SQL。</p>\n</li>\n<li><p> <a href=\"https://dev.mysql.com/doc/refman/8.0/en/explain.html\"><code>EXPLAIN</code></a> 语句会展现优化器如何处理查询语句的。</p>\n</li>\n<li><p>函数名称独立于表明和列名。比如，<code>ABS</code>是一个合法的列明。唯一的限制是在调用函数时，在函数名和(之间不能存在空格。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/keywords.html\">章节9.3，关键字和保留字</a>。</p>\n</li>\n<li><p>你可以在一个语句内指定不同数据库的表。</p>\n</li>\n</ul>\n<p><strong>安全性</strong></p>\n<ul>\n<li>权限和密码系统非常灵活和安全，并支持基于主机的认证。</li>\n<li>连接服务器时，通过对所有密码通信进行加密来实现密码安全。</li>\n</ul>\n<p><strong>可拓展性和限制</strong></p>\n<ul>\n<li>支持大型数据库。我们使用的MySQL服务拥有可以包含5000万条数据的数据库。我们也知道拥有20万张表和50亿条数据的MySQL服务器的用户。</li>\n<li>支持每张表最多64个索引。每个索引可以包含1-16列或者部分列。InnoDB表的索引最大宽度为767字节或者3072字节。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-restrictions.html\">章节15.6.1.16，“InnoDB表的限制”</a>。MyISAM表的最大索引宽度为1000字节。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html\">章节16.2，“MyISAM存储引擎”</a>。可以使用Char，Varchar，Blob或者Text字段类型的前缀作为一个索引。</li>\n</ul>\n<p><strong>可连接性</strong></p>\n<ul>\n<li>客户端可以通过不同的协议连接MySQL服务：<ul>\n<li>客户端可以在任何平台上使用TCP/IP端口进行连接。</li>\n<li>在windows系统，如果服务端启用了 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe\"><code>named_pipe</code></a> 系统参数进行启动，那客户端就可以使用name pipe进行连接。如果服务端启用了 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory\"><code>shared_memory</code></a>  系统参数进行启动，那客户端也可以使用  <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory\"><code>shared_memory</code></a>  方式进行连接。客户端可以通过使用  <a href=\"https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_protocol\"><code>--protocol=memory</code></a> 选项来进行shared memory的连接。</li>\n<li>在unix系统，客户端可以使用Unix域的套接字文件来进行连接。</li>\n</ul>\n</li>\n<li>MySQL的客户端程序可以用不同的语言编写。一个C语言编写的客户端库可以用于C语言和C++编写的客户端，或者任何别的提供C语言绑定的语言。</li>\n<li> C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, 和 Tcl 的API都是可用的，使得MySQL客户端可以被多种语言编写。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html\">章节28，连接器和API</a>.</li>\n<li>连接器/ODBC（MyODBC）接口为那些使用ODBC（Open Datebase Connectivity）连接的客户端程序提供了MySQL支持。比如说，你可以使用MS Access去连接你的MySQL服务器。客户端可以运行在Windows或者Unix。连接器/ODBC源是可用的。和很多其他的功能一样，所有的ODBC2.5的功能都是被支持的。详见<a href=\"https://dev.mysql.com/doc/connector-odbc/en/\">MySQL 连接器/ODBC开发者指南</a>。</li>\n<li>连接器/J 接口为那些使用了JDBC连接器的java客户端程序提供了MySQL支持。客户端可以运行于Windows或者Unix。连接器/J 源是可用的。详见<a href=\"https://dev.mysql.com/doc/connector-j/5.1/en/\">MySQL连接器/J 5.1开发者指南</a>。</li>\n<li>MySQL连接器/NET 允许开发者创建一个要求安全和高性能数据连接MySQL的.NET应用程序。它实现了必须的ADO.NET的接口并融入进了ADO.NET的感知工具。开发者可以选择他们的.NET语言去构建应用。MySQL连接器/NET是一个完全托管的ADO.NET驱动，100%由纯粹的C#编写。详见<a href=\"https://dev.mysql.com/doc/connector-net/en/\">MySQL连接器/NET开发者指南</a>。</li>\n</ul>\n<p><strong>本地化</strong></p>\n<ul>\n<li>服务器可以提供各种语言的报错信息。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/error-message-language.html\">章节10.12，设置错误提示的语言</a>。</li>\n<li>完全支持不同的字符集，包括 <code>latin1</code> (cp1252)，<code>german</code>，<code>big5</code>，<code>ujis</code> ，几种Unicode编码，以及别的。比如， Scandinavian 的字符 “<code>å</code>”, “<code>ä</code>” 和“<code>ö</code>” 可以用在表和列的名字中。</li>\n<li>所有的数据以选定的字符集存储。</li>\n<li>根据默认的字符集和校对规则进行排序和比较。当MySQL服务运行的时候也可以对该规则进行更改(详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-server.html\">章节10.3.2，“服务器字符集和校验”</a>)。一个非常高级的排序例子，可以看下捷克的排序编码。MySQL支持多种可以在编译和运行阶段指定的字符集。</li>\n<li>服务器时区可以动态的改变，而且单独的客户端可以指定各自的时区。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html\">章节5.1.13，MySQL服务器时区支持</a>。</li>\n</ul>\n<p><strong>客户端和工具</strong></p>\n<ul>\n<li>MySQL包含多个客户端和实用程序。包括命令行程序，比如 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html\"><strong>mysqldump</strong></a> 和 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html\"><strong>mysqladmin</strong></a> ，以及图形化程序 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/workbench.html\">MySQL Workbench</a> 。</li>\n<li>MySQL服务器内置了对于SQL语句的检查，优化和表修复的支持。这些语句可以通过<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqlcheck.html\">mysqlcheck</a>客户端从命令行使用。MySQL也包含了<a href=\"https://dev.mysql.com/doc/refman/8.0/en/myisamchk.html\">myisamchk</a>工具，一个非常快速的命令行工具，用于在MyISAM表提交这些操作。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/programs.html\">章节4，MySQL程序</a>。</li>\n<li>可以调用 –help 和 -?来呼叫MySQL程序用以获取在线协助。</li>\n</ul>\n<h4 id=\"1-3-3-MySQL的历史\"><a href=\"#1-3-3-MySQL的历史\" class=\"headerlink\" title=\"1.3.3 MySQL的历史\"></a>1.3.3 MySQL的历史</h4><p>我们一开始想要用我们自己的快速，低级的引擎来使用mSQL数据库来连接我们的表。然而，经过了一些测试后，我们认为mSQL的速度和灵活性达不到我们的要求。这导致了我们的数据库的一个新的SQL接口，但是其API接口和mSQL几乎一样。该API设计为允许那些为mSQL编写的第三方代码可以很方便的移植以用于MySQL。</p>\n<p>MySQL得名于联合创建人Monty Widenius的女儿，My。</p>\n<p>MySQL的海豚（我们的logo）的名字是“Sakila”，这来自于“为海豚取名”的比赛中用户建议的庞大的名字列表里选择出来的。最后获胜的名字由来自非洲Swaziland， 一个名叫Ambrose Twebaze的开源软件开发者提供。据 Ambrose所说，这个女性化的名字Sakila出自 Swaziland 的当地语Siswati。Sakila也是坦桑尼亚的 Arusha 的一个城镇的名字，邻近 Ambrose 的原籍国乌干达。</p>\n<h3 id=\"1-4-MySQL8-0更新了什么\"><a href=\"#1-4-MySQL8-0更新了什么\" class=\"headerlink\" title=\"1.4 MySQL8.0更新了什么\"></a>1.4 MySQL8.0更新了什么</h3><p>这一节总结了在MySQL8.0中哪些被添加，启用，以及移除。随附的部分罗列了在MySQL8.0中已经被新增，启用，移除的选项和变量。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html\">章节1.5，“服务器，状态变量和选项在MySQL8.0中的添加，弃用和删除”</a>。</p>\n<span id=\"more\"></span>\n<p><strong>MySQL8.0新增的特性</strong></p>\n<p>以下特性被加入到MySQL8.0中：</p>\n<ul>\n<li><p><strong>数据字典。</strong> MySQL现在合并了一个可以存储数据库对象的事务化的数据字典。在之前的MySQL发行版中，数据字典存储在元数据文件和非事务的表。关于更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html\">章节14，MySQL数据字典</a>。</p>\n</li>\n<li><p><strong>原子数据定义语句(原子DDL)。</strong> 一个原子DDL语句包含了数据字典的升级，存储引擎的操作，以及将关联DDL操作的二进制日志写入到单独的原子事务中。要获取更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html\">章节13.1.1，“原子数据定义语句的支持”</a>。</p>\n</li>\n<li><p><strong>升级过程。</strong> 在以前，安装了一个新版本的MySQL后，MySQL服务器会在下一次启动时自动升级数据字典表，在此之后，需要DBA在mysql的schema里手动调用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 去升级系统表，也包括在别的schema比如sys schema和user schema里面的对象。</p>\n<p>对于MySQL8.0.16来说，服务器会执行先前由 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 控制的任务。在安装了新版本的MySQL之后，服务器会在下次升级时自动执行所有的升级任务，而不是依赖DBA去调用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 。而且，服务器会更新帮助表里面的内容（这是 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 没有做的）。一个新的 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_upgrade\"><code>--upgrade</code></a> 服务器参数为服务器如何自动执行数据字典和服务器升级的选项提供了控制。想要了解更多，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading-what-is-upgraded.html\">章节2.11.3，MySQL的升级流程升级了什么</a>。</p>\n</li>\n<li><p><strong>安全和账户管理</strong>。增加下列增强的功能后，可以提高安全性以及增加DBA在账户管理方面的灵活性：</p>\n<ul>\n<li><p>在mysql系统数据库中的授权表现在属于InnoDB（事务型）表。以前它们是MyISAM（非事务型）表。授权表的存储引擎的变化是伴随账户管理语句变化的基础。以前一句命名多个用户的账户管理的语句（如 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-user.html\"><code>CREATE USER</code></a> 或 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/drop-user.html\"><code>DROP USER</code></a>) ，在其中一些用户命名失败的情况下也可以对别的用户命名成功。现在，每一个语句都是事务的，且要么所有的命名用户都成功，要么其中任何一个失败之后语句都会回滚并不发生任何效果。语句如果成功会被写入二进制表中，但是在失败时不会写入；在这种情况下，会发生回滚且没有任何变化发生。想要了解更多，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html\">13.1.1“原子数据定义语句的支持”</a>。</p>\n</li>\n<li><p>一个新的 <code>caching_sha2_password</code>  认证插件已经可用。类似于 <code>sha256_password</code>  插件， caching_sha2_password 实现了 SHA-256 的密码Hash，但是在连接时用缓存来解决延迟问题。它也支持更多的连接协议，而且不需要为了基于RAS密钥对的密码交换功能和OpenSSL进行连接。</p>\n<p> caching_sha2_password 和 sha256_password 的认证方式相比 mysql_native_password 插件提供了更多的安全加密方式，而且 caching_sha2_password 的性能比sha256_password更好。由于这些 caching_sha2_password 卓越的安全和性能的特点，现在已经成为首选的认证插件，而且也是默认的认证插件，而不是  <code>mysql_native_password</code> 。想要了解这种默认插件的变化对于服务器操作和服务器与客户端及连接器之间的兼容性的信息，详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password\"> caching_sha2_password 作为首选的认证插件</a>。</p>\n</li>\n<li><p>MySQL如今支持角色，即权限集合的命名。角色可以被创建和删除。角色可以被授权和撤销权限。角色可以从用户账号中授权和删除。一个账户下的活跃的适用角色可以从账户里已授权的角色中选择，也可以在账户的登陆期间进行修改。想要了解更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/roles.html\">6.2.10，使用角色</a>。</p>\n</li>\n<li><p>MySQL现在包含了用户账号目录的概念，根据系统和普通用户区分他们是否有 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\"><code>SYSTEM_USER</code></a> 权限。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/account-categories.html\">6.2.11，账户目录</a>。</p>\n</li>\n<li><p>在以前，除非在某些schema里，否则不能授予一个全局的权限。现在只要设置 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_partial_revokes\"><code>partial_revokes</code></a>  系统参数为 enabled 就可以做到。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/partial-revokes.html\">6.2.12，使用部分撤销的权限限制</a>。</p>\n</li>\n<li><p>授权语句拥有一个可以指定额外的权限信息的用户条件去用于语句执行。这种语法在SQL层面可见， 尽管其主要目的是使在部分撤销所施加的授予者特权限制的所有节点之间实现统一复制， 通过使这些限制出现在二进制日志中。</p>\n</li>\n<li><p>MySQL现在会保留历史密码信息，限制重复使用以前的密码。DBA可以要求一些数量的密码更改或者一段时间内不可以从以前的密码中选择。可以为全局和每个账户建立密码重新使用的策略。</p>\n<p>现在可以通过指定当前要被取代的密码来验证更改密码的操作。这可以让DBA去避免那些不能提供他们知道的当前密码的用户去修改密码。可以为全局或每个账户建立密码验证策略。</p>\n<p>账户现在允许使用双重验证，这使得在复杂的多服务器系统上可以无缝的提交分阶段的密码修改，而不需要停机。</p>\n<p>这些功能为DBA提供了对密码管理的完全掌控。关于更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/password-management.html\">6.2.15，密码管理</a>。</p>\n</li>\n<li><p>MySQL现在支持FIPS模式，它使用OpenSSL编译，在运行时一个OpenSSL库和FIPS对象模式都是可用的。FIPS模式为密码相关操作强加了一些条件，比如对于可接受的加密方式的限制，或者对于密码长度的要求。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html\">6.5，FIPS支持</a>。</p>\n</li>\n<li><p>服务器现在可以在运行时重新配置服务器用于新连接的SSL上下文。该功能可能会很有用，比如，在一个MySQL服务器运行太久而SSL证书过期，可以避免去重启该服务器。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration\">加密连接的服务器端运行时配置</a>。</p>\n</li>\n<li><p>OpenSSL1.1.1支持用于加密连接的TLS1.3协议，如果服务端和客户端都用OpenSSL或更高版本来编译，那么MySQL8.0.16和更高版本下也将支持TLS1.3协议。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html\">6.3.2，加密连接TLS协议和密码</a>。</p>\n</li>\n<li><p>MySQL现在授予客户端在已命名的管道上用于windows尽量少的必要连接的访问控制。新的MySQL客户端软件可以不用任何额外配置打开命名管道连接。如果更早版本的客户端软件不能马上升级，那么新的 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe_full_access_group\"><code>named_pipe_full_access_group</code></a>系统参数可以给予windows用户组必要的权限用于打开命名管道连接。完全访问权限的用户组的成员应该是暂时的且被限制的。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>资源管理。</strong> MySQL现在支持资源组的创建和管理，并且允许跟服务器一起运行的线程分配给特定的组，以便线程根据组的可用的资源执行。组属性可以控制其资源，允许或者限制组内线程的资源消费。DBA可以根据不同的工作量来调整这些属性为合适的值。现在，CPU时间是可以管理的资源，其概念由”虚拟CPU”来表示，其包含了CPU内核，超线程，硬件线程等等。服务器在启动时决定有多少虚拟CPU可用，并且拥有相应权限的数据库管理员可以将这些CPU与资源组关联并分配线程给组。要了解更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html\">8.12.5，资源组</a>。</p>\n</li>\n<li><p><strong>表加密管理。</strong> 现在可以通过定义和强制加密默认值来全局管理表加密。default_table_encryption常量为新创建的schema和一般表空间定义了一个加密默认值。当创建一个schema时，加密默认值同时也可以用DEFAULT ENCRYPTION条款来进行定义。默认情况下，创建一个表的同时<br>会继承当前的schema或一般表空间的加密方式。设置table_encryption_privilege_check常量为可用，会强制使用加密默认值。当创建和修改一个不同于默认表加密设置的schema或表空间，或创建和修改一个不同于默认schema加密设置的表时，会发生权限检查。在table_encryption_privilege_check常量<br>为可用时，TABLE_ENCRYPTION_ADMIN权限会允许覆盖默认加密设置。想要了解更多这方面信息，查看《为Schemas和一般表空间定义一个加密默认值》章节。</p>\n</li>\n<li><p><strong>InnoDB的优化</strong> 包含以下对于InnoDB的优化：</p>\n<ul>\n<li>当前最大的自增计数器发生值改变时，会写入到redo日志，并在每一次检查点保存在私有引擎的系统表里。这个改进使得自增计数器的值在系统重启时保持不变。额外的：<ul>\n<li>服务器重启时不会取消表选项里<code>AUTO_INCREMENT=N</code>的效果。如果你重新设置了自增计数器的值，或者你将自增计数器的值修改为一个很大的值，新的值也会在服务器重启时保持不变。</li>\n<li>服务器重启时会立刻跟随一项<a href=\"https://dev.mysql.com/doc/refman/8.0/en/commit.html\">ROLLBACK</a>的操作，而不再重新使用事务回滚后的自增值。</li>\n<li>如果你将自增列的值修改为一个比当前最大自增值更大的值（比如一个update的操作），新的值会持久化，并且随之的新增操作会在这个值基础上自增。<br>更多的信息，详见15.6.1.6章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html\">InnoDB中的自增操作</a>，以及<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization\">InnoDB自增计数器的初始化</a>。</li>\n</ul>\n</li>\n<li>当索引树的损坏发生时，InnoDB会往redo日志写入一个损坏标识，这会保证损坏标识安全的销毁。InnoDB也会在每个检查点往私有引擎的系统表里写入内存崩溃的标识数据。在还原时，InnoDB在表和索引被标识为崩溃对象前会从这两个地方读取崩溃标识并合并结果内容。</li>\n<li>InnoDB缓存插件支持多种get操作（在一个缓存查询中获取多种key-value组合）和范围查询。详见15.20.4章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-multiple-get-range-query.html\">InnoDB缓存的多种get和范围查询支持</a></li>\n<li>innodb_deadlock_detect是一个新的动态变量，可以用于对不可用的死锁的监控。在高级的金融系统中，死锁监控可以缓解大量的线程等待同一个锁的情况。同时，在死锁发生时，使用在事务回滚时的innodb_lock_wait_timeout的设置并关闭死锁监控也可能是更有效的办法。</li>\n<li>新的<code>INFORMATION_SCHEMA.INNODB_CACHED_INDEXES</code>表会在InnoDB缓冲池中为每个索引记录索引页缓存的数量。</li>\n<li>现在，InnoDB的临时表会在共享的临时表空间ibtmp1中创建。</li>\n<li>InnoDB<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html\">表空间加密功能</a>支持对于redo日志和undo日志数据的加密。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-redo-log\">Redo日志加密</a>和<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-undo-log\">Undo日志加密</a>。</li>\n<li>对于<code>SELECT ... FOR SHARE</code>和<code>SELECT ... FOR UPDATE</code>这样的加锁读取语句，InnoDB支持使用<code>NOWAIT</code>和<code>SKIP LOCKED</code>选项。语句中的<code>NOWAIT</code>选项的效果是当一列被请求的行被另一个事务锁定时立刻返回结果。<code>SKIP LOCKED</code>会在结果集中移除被锁定的行。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked\">并发锁读中使用NOWAIT和SKIP LOCKED</a>。<br><code>SELECT ... FOR SHARE</code>语句取代<code>SELECT ... LOCK IN SHARE MODE</code>，但是<code>LOCK IN SHARE MODE</code>依然保持着向后的兼容性。两个语句是等效的。但是<code>FOR UPDATE</code>和<code>FOR SHARE</code>支持<code>NOWAIT&#39;，&#39;SKIP LOCKED</code>，以及<code>OF</code>之类的<code>tbl_name</code>选项。<br>详见13.2.10章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\">SELECT STATEMENT</a>。<code>OF</code>这个<code>tbl_name</code>值用于锁定对命名的表的查询(TODO)。</li>\n<li>ADD PARTITION, DROP PARTITION, COALESCE PARTITION, REORGANIZE PARTITION, and REBUILD PARTITION ALTER TABLE options are supported by native partitioning<br>in-place APIs and may be used with ALGORITHM={COPY|INPLACE} and LOCK clauses.DROP PARTITION with ALGORITHM=INPLACE deletes data stored in the partition and drops the partition. However,<br>DROP PARTITION with ALGORITHM=COPY or old_alter_table=ON rebuilds the partitioned table and attempts to move data from the dropped partition<br>to another partition with a compatible PARTITION … VALUES definition. Data that cannot be moved to another partition is deleted. </li>\n</ul>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">原文文档</a>  </p>\n<p><strong>声明</strong></p>\n<p>该文档纯粹自己手动翻译， 也许网上有更好的版本， 但是我这个属于自己学习的版本， 为了提高英语水平和对MySQL的理解， 后续不保证会持续更新，内容如有理解错误， 还请指正。</p>\n<h2 id=\"MySQL-8-0-参考手册\"><a href=\"#MySQL-8-0-参考手册\" class=\"headerlink\" title=\"MySQL 8.0 参考手册\"></a>MySQL 8.0 参考手册</h2><h3 id=\"包含MySQL-NDB集群8-0\"><a href=\"#包含MySQL-NDB集群8-0\" class=\"headerlink\" title=\"包含MySQL NDB集群8.0\"></a>包含MySQL NDB集群8.0</h3><h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><p>这是一份MySQL参考手册。 该文档分别记录了MySQL8.0到8.0.20，以及基于NDB8.0版本到NDB8.0.19版本的NDB集群发布版本。这份文档可能包括一些目前还没发布的MySQL版本的特性。想要了解哪些版本已经发布，请查看<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">MySQL8.0发布日志</a>。  </p>\n<p><strong>MySQL8.0特性</strong>。这份手册描述的特性并没有包含在所有版本的MySQL8.0中；这些特性可能不包含在你所购买的MySQL8.0版本中。如果你有任何问题是关于你的MySQL8.0版本中所包含的特性的，请参阅你的MySQL8.0许可协议或者联系你的oracle销售代表。  </p>\n<p>有关每个发布版本的变化，请查看<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">MySQL8.0发布日志</a>。  </p>\n<p>有关法律信息和许可信息，请查看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/preface.html\">前言和法律声明</a>。  </p>\n<p>在使用MySQL中需要帮助，请访问<a href=\"http://forums.mysql.com/\">MySQL论坛</a>，你可以在那里向别的MySQL用户描述你的问题。  </p>\n<p>文档创建于：2019-10-16  </p>\n<h2 id=\"1-一般信息\"><a href=\"#1-一般信息\" class=\"headerlink\" title=\"1.  一般信息\"></a>1.  一般信息</h2><p>MySQL提供了非常快速的，多线程，多用户，和健壮的SQL数据库服务。MySQL服务用于关键服务，高负荷生产的系统以及嵌入大量部署的软件。Oracle是Oracle公司及其分支机构的注册商标。MySQL是Oracle公司及其分支机构的商标，未经Oracle正式的书面许可，客户不得使用。其他的名字可能是其各自所有者的商标。  </p>\n<p>MySQL软件具有双重许可。用户可以在GNU通用公共许可 (<a href=\"http://www.fsf.org/licenses/\">http://www.fsf.org/licenses/</a>)  条款下将MySQL软件作为开源软件产品使用，或者从Oracle购买一份标准的商业许可。访问 <a href=\"http://www.mysql.com/company/legal/licensing/\">http://www.mysql.com/company/legal/licensing/</a>  以获取更多关于授权政策的信息。  </p>\n<p>下面的列表描述了一些在本手册中需要特别关注的部分：  </p>\n<ul>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/features.html\">1.3.2章节，“MySql的主要特性”</a>，讨论关于MySQL数据库服务的功能。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html\">1.4章节，“MySQL8.0更新了什么”</a>，获取关于MySQL新功能的概况。访问<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">发布日志</a>，获取关于每个版本的更新信息。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/installing.html\">2章节，安装和升级MySQL</a>，获取安装介绍。访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading.html\">章节2.11</a>，获取MySQL升级说明。  </p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/tutorial.html\">第3章节，教程</a>，获取MySQL数据库服务的教程介绍。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-administration.html\">第5章节，MySQL服务管理</a>，获取关于MySQL服务的配置和管理的信息。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/security.html\">第6章节，安全</a>，获取关于MySQL的安全信息。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication.html\">第17章节，复制</a>，获取关于设置复制服务器的信息。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-enterprise.html\">第30章节，MySQL企业版</a>，获取关于MySQL企业版的信息，商用版的MySQL会发布一些进阶的功能和管理工具。</p>\n</li>\n<li><p>访问 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/faqs.html\">附录A，MySQL8.0常见问题</a>，获取关于MySQL服务及其功能的一些常见问题的答案。</p>\n</li>\n<li><p>访问<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\">发布日志</a>，获取关于新特性和bug修复的发布信息。</p>\n<p><strong>重要</strong>  </p>\n<p>如果要报告问题或者bug，请按照<a href=\"https://dev.mysql.com/doc/refman/8.0/en/bug-reports.html\">章节17，“如何报告bug和问题”</a>的指示。如果你发现在MySQL中的一个敏感的安全性的bug，请立即发送邮件信息到&lt; <a href=\"mailto:secalert_us@oracle.com\">secalert_us@oracle.com</a> &gt;让我们知晓。例外：支持客户应该报告所有的问题，包括安全bug，发送给Oracle支持部门。  </p>\n</li>\n</ul>\n<h3 id=\"1-1-关于本手册\"><a href=\"#1-1-关于本手册\" class=\"headerlink\" title=\"1.1 关于本手册\"></a>1.1 关于本手册</h3><p>这份参考手册适用于MySQL数据库系统8.0版本到8.0.20版。在本文中关于和MySQL8.0镜像版本的区别参照了（8.0.x）的发行版本。查看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/preface.html#legalnotice\">法律声明</a>，获取许可的信息。</p>\n<p>本手册不适用于MySQL软件的更早版本，因为在MySQL8.0和更早版本之间存在着很多功能及别的方面的不同。如果你正在使用MySQL软件的早期发布版本，请参考对应的手册。比如：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/\">MySQL5.7操作手册</a>可以覆盖MySQL软件的5.7发布版本系列。</p>\n<p>由于这个手册是作为参考来使用，因此不会提供关于SQL或关联的数据库概念的一般介绍。同样也不会教你如何使用你的操作系统或命令行解释器。</p>\n<p>MySQL数据库软件在经历不断的发展，其手册同样也会不断的更新。最新版本的手册可以在 <a href=\"https://dev.mysql.com/doc/\">https://dev.mysql.com/doc/</a> 在线搜索到。其他格式也可以在这里获取，包括HTML，PDF和EPUB版本。</p>\n<p>参考手册的源文件由DocBook XML格式写成。其HTML版本和其他版本都自动生成，主要使用DocBook XSL样式表。关于DocBook的信息，详见 <a href=\"http://docbook.org/\">http://docbook.org/</a> 。</p>\n<p>MySQL的源代码包括内部文档，由Doxygen编写。已完成的Doxygen内容可以访问 <a href=\"https://dev.mysql.com/doc/index-other.html\">https://dev.mysql.com/doc/index-other.html</a> 。同样也可以按照 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/source-installation-doxygen.html\">章节2.9.10，“创建MySQL Doxygen文档内容”</a>的介绍从MySQL源分发创建本地的内容。</p>\n<p>如果你有使用MySQL的的问题，加入 <a href=\"https://mysqlcommunity.slack.com/\">MySQL开发者社区</a>，或者在我们的论坛提问；详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/forums.html\">章节1.6.2，“MySQL论坛的MySQL社区支持”</a>。如果你对本手册有补充或者更正的建议，请发送到 <a href=\"http://www.mysql.com/company/contact/%E3%80%82\">http://www.mysql.com/company/contact/。</a></p>\n<p>本手册最初由 David Axmark 和 Michael “Monty” Widenius 编写。主要由MySQL文档团队编写，成员包括 Chris Cole， Paul DuBois， Margaret Fisher， Edward Gilmore， Stefan Hinz， David Moss， Philip Olson， Daniel Price， Daniel So， 以及 Jon Stephens 。</p>\n<h3 id=\"1-2-排版和语法约定\"><a href=\"#1-2-排版和语法约定\" class=\"headerlink\" title=\"1.2  排版和语法约定\"></a>1.2  排版和语法约定</h3><p>本手册使用下列的排版约定：</p>\n<p>// TODO</p>\n<h3 id=\"1-3-MySQL数据库管理系统总览\"><a href=\"#1-3-MySQL数据库管理系统总览\" class=\"headerlink\" title=\"1.3 MySQL数据库管理系统总览\"></a>1.3 MySQL数据库管理系统总览</h3><h4 id=\"1-3-1-什么是MySQL？\"><a href=\"#1-3-1-什么是MySQL？\" class=\"headerlink\" title=\"1.3.1 什么是MySQL？\"></a>1.3.1 什么是MySQL？</h4><p>MySQL是最受欢迎的开源的SQL数据库管理系统，由Oracle公司开发，发布和支持。</p>\n<p><a href=\"http://www.mysql.com/\">MySQL官网</a>提供了MySQL软件的最新版本的信息。</p>\n<ul>\n<li><p>MySQL是一个数据库管理系统  </p>\n<p>数据库是数据的结构化集合。它可以是任何东西，从简单的购物清单，到一个图片集，或者公司网络中的海量信息。在一个计算机数据库上添加，访问和执行数据存储，你需要一个像MySQL服务器一样的数据库管理系统。由于计算机非常善于处理大量的数据，数据库管理系统就在计算机中扮演了一个中心角色，无论是作为一个独立的程序，还是别的应用的一部分。</p>\n</li>\n<li><p>MySQL数据库是关系型的</p>\n<p>一个关系型数据库将数据存储在不同的表中，而不是把所有的数据放在一个大的存储库中。数据库结构组织成物理文件以优化速度。具有对象（诸如数据库，表，视图，行和列）的逻辑模型提供了灵活的程序设计环境。你可以建立规则去管理不同字段之间的关系，比如一对一，一对多，唯一，必填或者选填，以及不同表之间的指向。数据库强制执行这些规则，所以一个良好设计的数据库，可以使你的程序避免看到不一致，重复，孤立，过期，或者缺失的数据。</p>\n<p>MySQL中的SQL代表“结构化查询语言”。SQL是用于访问数据库的最通用的标准化语言。基于你的程序设计环境，又可以直接输入SQL（比如，用于创建报表），用另一种语言把SQL注入到代码中，或者使用隐含SQL语法的特定语言的API。</p>\n<p>SQL由 ANSI/ISO 的SQL标准来定义。SQL的标准从1986年以来不断发展，存在多个不同的版本。在本手册中，“SQL-92”是指1992年发布的标准，“SQL:1999”是指在1999年发布的版本，以及“SQL:2003”，指现在的版本。我们在任何时用到“SQL标准”这个词时，都是指当前版本的SQL标准。</p>\n</li>\n<li><p>MySQL软件是开源的</p>\n<p>开源意味着对于任何人来说都可以使用和修改该软件。任何人都可以从网络上下载MySQL软件并且免费使用。你也可以按照你的意愿去学习和更改源代码以适应你的需求。MySQL软件使用<a href=\"http://www.fsf.org/licenses/\">GPL</a>)（通用公共许可），来定义你在不同情景下对软件能做的和不能做的事。如果你对GPL感到不适，或者想要将MySQL的代码注入到一个商用软件中，你可以从我们这里购买一份商用许可。访问<a href=\"http://www.mysql.com/company/legal/licensing/\">MySQL许可概览</a>以获取更多信息。</p>\n</li>\n<li><p>MySQL数据库服务快速，可靠，可拓展且易用</p>\n<p>如果你寻求的就是这个，你应该去尝试一下。MySQL服务可以在笔记本或者台式机上与其他应用，网络服务一起舒适的运行，只需要一点甚至无需额外的关注。如果你将整台机器都用于MySQL，你可以调整设置利用所有的内存，CPU功率，以及IO性能。MySQL同样可以扩大网络和机器的集群。</p>\n<p>MySQL服务最初开发用来比现有方式更快的处理数据，而且成功的应用在高要求的生产环境很多年。尽管经历了不断的发展，MySQL如今提供了一组丰富而有用的功能。其可连接性，速度以及安全性使得MySQL服务高度适合在网络上访问数据库。</p>\n</li>\n<li><p>MySQL服务运行于客户端/服务端或者嵌入式系统</p>\n<p>MySQL数据库软件是一个客户端/服务端系统，其包含了一个多线程的SQL服务器用于支持不同的后端，不同的客户端程序以及库，管理工具，以及大范围的应用程序接口。</p>\n<p>我们也提供MySQL服务作为一个嵌入的多线程库，你可以将其链接到你的应用以实现一个更小，更快，易于管理的独立产品。</p>\n</li>\n<li><p>大量捐赠的MySQL软件已经可用</p>\n<p>MySQL服务有一些使用的功能是由与我们密切合作的用户开发的。很有可能你最喜欢的应用或者语言由MySQL数据库服务支持。</p>\n</li>\n</ul>\n<p>“MySQL”的官方读法是“ My Ess Que Ell ”（而不是 “my sequel” ），但是我们不介意你把它读作“my sequel”或者别的当地的读法。</p>\n<h4 id=\"1-3-2-MySQL的主要功能\"><a href=\"#1-3-2-MySQL的主要功能\" class=\"headerlink\" title=\"1.3.2 MySQL的主要功能\"></a>1.3.2 MySQL的主要功能</h4><p>本节描述了一些MySQL数据库软件的重要特征。在大部分情况下，该路线图适用于所有版本的MySQL。想要知道在特定版本的MySQL中引入的功能，请在“In a Nutshell”章节查看对应的手册：</p>\n<ul>\n<li>MySQL8.0：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html\">章节1.4，“MySQL8.0更新了什么”</a></li>\n<li>MySQL5.7：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/mysql-nutshell.html\">MySQL5.7更新了什么</a></li>\n<li>MySQL5.6：<a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysql-nutshell.html\">MySQL5.6更新了什么</a></li>\n<li>MySQL5.5：<a href=\"https://dev.mysql.com/doc/refman/5.5/en/mysql-nutshell.html\">MySQL5.5更新了什么</a></li>\n</ul>\n<p><strong>内部实现和可移植性</strong></p>\n<ul>\n<li>由C和C++实现</li>\n<li>通过了大规模的不同编译器的测试</li>\n<li>在多个不同的平台上运行。详见<a href=\"https://www.mysql.com/support/supportedplatforms/database.html\">https://www.mysql.com/support/supportedplatforms/database.html</a></li>\n<li>关于移植，MySQL5.5及以上的版本使用CMake命令。更早的版本使用GNU Automake，Autoconf和Libtool。</li>\n<li>经过了Purify（一个商用的内存泄漏探测器）以及Valgrind（一个GPL工具）的测试。（<a href=\"http://developer.kde.org/~sewardj/%EF%BC%89\">http://developer.kde.org/~sewardj/）</a></li>\n<li>使用具有独立模块的多层服务的设计。</li>\n<li>设计为使用核心线程的多线程方式，如果多核CPU可用，则可以很容易的被使用。</li>\n<li>提供了基于事务和非事务的存储引擎。</li>\n<li>使用索引压缩的非常快速的B-tree磁盘（MyISAM）</li>\n<li>设计为可以相对简单的增加另一个存储引擎。如果你想为一个内部的数据库提供一个SQL接口，这会非常有用。</li>\n<li>使用了非常快速的基于线程的内存分配系统。</li>\n<li>使用了一种优化了的内部循环的join来非常快速的执行join。</li>\n<li>实现了在内存的hash table，其作为临时表来使用。</li>\n<li>使用了一种尽可能快的高度优化的类库来实现SQL功能。在所有的查询初始化后一般就不会再有内存分配。</li>\n<li>为使用客户端/服务端环境提供了作为单独程序的服务，作为一个库可以嵌入到独立的应用中。这种应用可以单独使用或者在网络无法访问的环境中使用。</li>\n</ul>\n<p><strong>数据类型</strong></p>\n<ul>\n<li>很多的数据类型：带符号/无符号的整数类型，1、2、3、4以及8比特的长度， <a href=\"https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html\"><code>FLOAT</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html\"><code>DOUBLE</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/char.html\"><code>CHAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/char.html\"><code>VARCHAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\"><code>BINARY</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\"><code>VARBINARY</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>TEXT</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>BLOB</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>DATE</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/time.html\"><code>TIME</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>DATETIME</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\"><code>TIMESTAMP</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/year.html\"><code>YEAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/set.html\"><code>SET</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/enum.html\"><code>ENUM</code></a> ，以及OpenGIS的空间数据类型。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-types.html\">章节11，数据类型</a>。</li>\n<li>固定长度和可变长度的字符串类型。</li>\n</ul>\n<p><strong>语句和功能</strong></p>\n<ul>\n<li><p>所有的操作符和功能支持都在Select列表和Where条件语句查询中。比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> CONCAT(first_name, <span class=\"string\">&#x27; &#x27;</span>, last_name)</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">FROM</span> citizen</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">WHERE</span> income<span class=\"operator\">/</span>dependents <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span> <span class=\"keyword\">AND</span> age <span class=\"operator\">&gt;</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>完全支持SQL中的<code>Group By</code>和<code>Order By</code>条件。提供Group的功能的支持（ <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count\"><code>COUNT()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_avg\"><code>AVG()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_std\"><code>STD()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_sum\"><code>SUM()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_max\"><code>MAX()</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_min\"><code>MIN()</code></a>, 和 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_group-concat\"><code>GROUP_CONCAT()</code></a>) ）</p>\n</li>\n<li><p>完全支持拥有SQL和ODBC语法的 <code>LEFT OUTER JOIN</code> 和 <code>RIGHT OUTER JOIN</code>  </p>\n</li>\n<li><p>支持标准SQL要求的表和列的别名。</p>\n</li>\n<li><p>支持<code>Delete</code>，<code>Insert</code>，<code>Replace</code>，以及在<code>update</code>时返回修改的数量，或者返回匹配的行数，而不是在连接服务器时设置一个标识。</p>\n</li>\n<li><p>支持MySQL特定的<code>show</code>语句，用于返回数据库，存储引擎，表，以及索引的信息。支持 <code>INFORMATION_SCHEMA</code>数据库，实现自标准SQL。</p>\n</li>\n<li><p> <a href=\"https://dev.mysql.com/doc/refman/8.0/en/explain.html\"><code>EXPLAIN</code></a> 语句会展现优化器如何处理查询语句的。</p>\n</li>\n<li><p>函数名称独立于表明和列名。比如，<code>ABS</code>是一个合法的列明。唯一的限制是在调用函数时，在函数名和(之间不能存在空格。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/keywords.html\">章节9.3，关键字和保留字</a>。</p>\n</li>\n<li><p>你可以在一个语句内指定不同数据库的表。</p>\n</li>\n</ul>\n<p><strong>安全性</strong></p>\n<ul>\n<li>权限和密码系统非常灵活和安全，并支持基于主机的认证。</li>\n<li>连接服务器时，通过对所有密码通信进行加密来实现密码安全。</li>\n</ul>\n<p><strong>可拓展性和限制</strong></p>\n<ul>\n<li>支持大型数据库。我们使用的MySQL服务拥有可以包含5000万条数据的数据库。我们也知道拥有20万张表和50亿条数据的MySQL服务器的用户。</li>\n<li>支持每张表最多64个索引。每个索引可以包含1-16列或者部分列。InnoDB表的索引最大宽度为767字节或者3072字节。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-restrictions.html\">章节15.6.1.16，“InnoDB表的限制”</a>。MyISAM表的最大索引宽度为1000字节。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html\">章节16.2，“MyISAM存储引擎”</a>。可以使用Char，Varchar，Blob或者Text字段类型的前缀作为一个索引。</li>\n</ul>\n<p><strong>可连接性</strong></p>\n<ul>\n<li>客户端可以通过不同的协议连接MySQL服务：<ul>\n<li>客户端可以在任何平台上使用TCP/IP端口进行连接。</li>\n<li>在windows系统，如果服务端启用了 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe\"><code>named_pipe</code></a> 系统参数进行启动，那客户端就可以使用name pipe进行连接。如果服务端启用了 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory\"><code>shared_memory</code></a>  系统参数进行启动，那客户端也可以使用  <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_shared_memory\"><code>shared_memory</code></a>  方式进行连接。客户端可以通过使用  <a href=\"https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_protocol\"><code>--protocol=memory</code></a> 选项来进行shared memory的连接。</li>\n<li>在unix系统，客户端可以使用Unix域的套接字文件来进行连接。</li>\n</ul>\n</li>\n<li>MySQL的客户端程序可以用不同的语言编写。一个C语言编写的客户端库可以用于C语言和C++编写的客户端，或者任何别的提供C语言绑定的语言。</li>\n<li> C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, 和 Tcl 的API都是可用的，使得MySQL客户端可以被多种语言编写。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/connectors-apis.html\">章节28，连接器和API</a>.</li>\n<li>连接器/ODBC（MyODBC）接口为那些使用ODBC（Open Datebase Connectivity）连接的客户端程序提供了MySQL支持。比如说，你可以使用MS Access去连接你的MySQL服务器。客户端可以运行在Windows或者Unix。连接器/ODBC源是可用的。和很多其他的功能一样，所有的ODBC2.5的功能都是被支持的。详见<a href=\"https://dev.mysql.com/doc/connector-odbc/en/\">MySQL 连接器/ODBC开发者指南</a>。</li>\n<li>连接器/J 接口为那些使用了JDBC连接器的java客户端程序提供了MySQL支持。客户端可以运行于Windows或者Unix。连接器/J 源是可用的。详见<a href=\"https://dev.mysql.com/doc/connector-j/5.1/en/\">MySQL连接器/J 5.1开发者指南</a>。</li>\n<li>MySQL连接器/NET 允许开发者创建一个要求安全和高性能数据连接MySQL的.NET应用程序。它实现了必须的ADO.NET的接口并融入进了ADO.NET的感知工具。开发者可以选择他们的.NET语言去构建应用。MySQL连接器/NET是一个完全托管的ADO.NET驱动，100%由纯粹的C#编写。详见<a href=\"https://dev.mysql.com/doc/connector-net/en/\">MySQL连接器/NET开发者指南</a>。</li>\n</ul>\n<p><strong>本地化</strong></p>\n<ul>\n<li>服务器可以提供各种语言的报错信息。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/error-message-language.html\">章节10.12，设置错误提示的语言</a>。</li>\n<li>完全支持不同的字符集，包括 <code>latin1</code> (cp1252)，<code>german</code>，<code>big5</code>，<code>ujis</code> ，几种Unicode编码，以及别的。比如， Scandinavian 的字符 “<code>å</code>”, “<code>ä</code>” 和“<code>ö</code>” 可以用在表和列的名字中。</li>\n<li>所有的数据以选定的字符集存储。</li>\n<li>根据默认的字符集和校对规则进行排序和比较。当MySQL服务运行的时候也可以对该规则进行更改(详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-server.html\">章节10.3.2，“服务器字符集和校验”</a>)。一个非常高级的排序例子，可以看下捷克的排序编码。MySQL支持多种可以在编译和运行阶段指定的字符集。</li>\n<li>服务器时区可以动态的改变，而且单独的客户端可以指定各自的时区。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html\">章节5.1.13，MySQL服务器时区支持</a>。</li>\n</ul>\n<p><strong>客户端和工具</strong></p>\n<ul>\n<li>MySQL包含多个客户端和实用程序。包括命令行程序，比如 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html\"><strong>mysqldump</strong></a> 和 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html\"><strong>mysqladmin</strong></a> ，以及图形化程序 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/workbench.html\">MySQL Workbench</a> 。</li>\n<li>MySQL服务器内置了对于SQL语句的检查，优化和表修复的支持。这些语句可以通过<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqlcheck.html\">mysqlcheck</a>客户端从命令行使用。MySQL也包含了<a href=\"https://dev.mysql.com/doc/refman/8.0/en/myisamchk.html\">myisamchk</a>工具，一个非常快速的命令行工具，用于在MyISAM表提交这些操作。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/programs.html\">章节4，MySQL程序</a>。</li>\n<li>可以调用 –help 和 -?来呼叫MySQL程序用以获取在线协助。</li>\n</ul>\n<h4 id=\"1-3-3-MySQL的历史\"><a href=\"#1-3-3-MySQL的历史\" class=\"headerlink\" title=\"1.3.3 MySQL的历史\"></a>1.3.3 MySQL的历史</h4><p>我们一开始想要用我们自己的快速，低级的引擎来使用mSQL数据库来连接我们的表。然而，经过了一些测试后，我们认为mSQL的速度和灵活性达不到我们的要求。这导致了我们的数据库的一个新的SQL接口，但是其API接口和mSQL几乎一样。该API设计为允许那些为mSQL编写的第三方代码可以很方便的移植以用于MySQL。</p>\n<p>MySQL得名于联合创建人Monty Widenius的女儿，My。</p>\n<p>MySQL的海豚（我们的logo）的名字是“Sakila”，这来自于“为海豚取名”的比赛中用户建议的庞大的名字列表里选择出来的。最后获胜的名字由来自非洲Swaziland， 一个名叫Ambrose Twebaze的开源软件开发者提供。据 Ambrose所说，这个女性化的名字Sakila出自 Swaziland 的当地语Siswati。Sakila也是坦桑尼亚的 Arusha 的一个城镇的名字，邻近 Ambrose 的原籍国乌干达。</p>\n<h3 id=\"1-4-MySQL8-0更新了什么\"><a href=\"#1-4-MySQL8-0更新了什么\" class=\"headerlink\" title=\"1.4 MySQL8.0更新了什么\"></a>1.4 MySQL8.0更新了什么</h3><p>这一节总结了在MySQL8.0中哪些被添加，启用，以及移除。随附的部分罗列了在MySQL8.0中已经被新增，启用，移除的选项和变量。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html\">章节1.5，“服务器，状态变量和选项在MySQL8.0中的添加，弃用和删除”</a>。</p>","more":"<p><strong>MySQL8.0新增的特性</strong></p>\n<p>以下特性被加入到MySQL8.0中：</p>\n<ul>\n<li><p><strong>数据字典。</strong> MySQL现在合并了一个可以存储数据库对象的事务化的数据字典。在之前的MySQL发行版中，数据字典存储在元数据文件和非事务的表。关于更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html\">章节14，MySQL数据字典</a>。</p>\n</li>\n<li><p><strong>原子数据定义语句(原子DDL)。</strong> 一个原子DDL语句包含了数据字典的升级，存储引擎的操作，以及将关联DDL操作的二进制日志写入到单独的原子事务中。要获取更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html\">章节13.1.1，“原子数据定义语句的支持”</a>。</p>\n</li>\n<li><p><strong>升级过程。</strong> 在以前，安装了一个新版本的MySQL后，MySQL服务器会在下一次启动时自动升级数据字典表，在此之后，需要DBA在mysql的schema里手动调用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 去升级系统表，也包括在别的schema比如sys schema和user schema里面的对象。</p>\n<p>对于MySQL8.0.16来说，服务器会执行先前由 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 控制的任务。在安装了新版本的MySQL之后，服务器会在下次升级时自动执行所有的升级任务，而不是依赖DBA去调用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 。而且，服务器会更新帮助表里面的内容（这是 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html\"><strong>mysql_upgrade</strong></a> 没有做的）。一个新的 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_upgrade\"><code>--upgrade</code></a> 服务器参数为服务器如何自动执行数据字典和服务器升级的选项提供了控制。想要了解更多，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading-what-is-upgraded.html\">章节2.11.3，MySQL的升级流程升级了什么</a>。</p>\n</li>\n<li><p><strong>安全和账户管理</strong>。增加下列增强的功能后，可以提高安全性以及增加DBA在账户管理方面的灵活性：</p>\n<ul>\n<li><p>在mysql系统数据库中的授权表现在属于InnoDB（事务型）表。以前它们是MyISAM（非事务型）表。授权表的存储引擎的变化是伴随账户管理语句变化的基础。以前一句命名多个用户的账户管理的语句（如 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-user.html\"><code>CREATE USER</code></a> 或 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/drop-user.html\"><code>DROP USER</code></a>) ，在其中一些用户命名失败的情况下也可以对别的用户命名成功。现在，每一个语句都是事务的，且要么所有的命名用户都成功，要么其中任何一个失败之后语句都会回滚并不发生任何效果。语句如果成功会被写入二进制表中，但是在失败时不会写入；在这种情况下，会发生回滚且没有任何变化发生。想要了解更多，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html\">13.1.1“原子数据定义语句的支持”</a>。</p>\n</li>\n<li><p>一个新的 <code>caching_sha2_password</code>  认证插件已经可用。类似于 <code>sha256_password</code>  插件， caching_sha2_password 实现了 SHA-256 的密码Hash，但是在连接时用缓存来解决延迟问题。它也支持更多的连接协议，而且不需要为了基于RAS密钥对的密码交换功能和OpenSSL进行连接。</p>\n<p> caching_sha2_password 和 sha256_password 的认证方式相比 mysql_native_password 插件提供了更多的安全加密方式，而且 caching_sha2_password 的性能比sha256_password更好。由于这些 caching_sha2_password 卓越的安全和性能的特点，现在已经成为首选的认证插件，而且也是默认的认证插件，而不是  <code>mysql_native_password</code> 。想要了解这种默认插件的变化对于服务器操作和服务器与客户端及连接器之间的兼容性的信息，详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password\"> caching_sha2_password 作为首选的认证插件</a>。</p>\n</li>\n<li><p>MySQL如今支持角色，即权限集合的命名。角色可以被创建和删除。角色可以被授权和撤销权限。角色可以从用户账号中授权和删除。一个账户下的活跃的适用角色可以从账户里已授权的角色中选择，也可以在账户的登陆期间进行修改。想要了解更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/roles.html\">6.2.10，使用角色</a>。</p>\n</li>\n<li><p>MySQL现在包含了用户账号目录的概念，根据系统和普通用户区分他们是否有 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\"><code>SYSTEM_USER</code></a> 权限。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/account-categories.html\">6.2.11，账户目录</a>。</p>\n</li>\n<li><p>在以前，除非在某些schema里，否则不能授予一个全局的权限。现在只要设置 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_partial_revokes\"><code>partial_revokes</code></a>  系统参数为 enabled 就可以做到。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/partial-revokes.html\">6.2.12，使用部分撤销的权限限制</a>。</p>\n</li>\n<li><p>授权语句拥有一个可以指定额外的权限信息的用户条件去用于语句执行。这种语法在SQL层面可见， 尽管其主要目的是使在部分撤销所施加的授予者特权限制的所有节点之间实现统一复制， 通过使这些限制出现在二进制日志中。</p>\n</li>\n<li><p>MySQL现在会保留历史密码信息，限制重复使用以前的密码。DBA可以要求一些数量的密码更改或者一段时间内不可以从以前的密码中选择。可以为全局和每个账户建立密码重新使用的策略。</p>\n<p>现在可以通过指定当前要被取代的密码来验证更改密码的操作。这可以让DBA去避免那些不能提供他们知道的当前密码的用户去修改密码。可以为全局或每个账户建立密码验证策略。</p>\n<p>账户现在允许使用双重验证，这使得在复杂的多服务器系统上可以无缝的提交分阶段的密码修改，而不需要停机。</p>\n<p>这些功能为DBA提供了对密码管理的完全掌控。关于更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/password-management.html\">6.2.15，密码管理</a>。</p>\n</li>\n<li><p>MySQL现在支持FIPS模式，它使用OpenSSL编译，在运行时一个OpenSSL库和FIPS对象模式都是可用的。FIPS模式为密码相关操作强加了一些条件，比如对于可接受的加密方式的限制，或者对于密码长度的要求。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html\">6.5，FIPS支持</a>。</p>\n</li>\n<li><p>服务器现在可以在运行时重新配置服务器用于新连接的SSL上下文。该功能可能会很有用，比如，在一个MySQL服务器运行太久而SSL证书过期，可以避免去重启该服务器。详见 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration\">加密连接的服务器端运行时配置</a>。</p>\n</li>\n<li><p>OpenSSL1.1.1支持用于加密连接的TLS1.3协议，如果服务端和客户端都用OpenSSL或更高版本来编译，那么MySQL8.0.16和更高版本下也将支持TLS1.3协议。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html\">6.3.2，加密连接TLS协议和密码</a>。</p>\n</li>\n<li><p>MySQL现在授予客户端在已命名的管道上用于windows尽量少的必要连接的访问控制。新的MySQL客户端软件可以不用任何额外配置打开命名管道连接。如果更早版本的客户端软件不能马上升级，那么新的 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_named_pipe_full_access_group\"><code>named_pipe_full_access_group</code></a>系统参数可以给予windows用户组必要的权限用于打开命名管道连接。完全访问权限的用户组的成员应该是暂时的且被限制的。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>资源管理。</strong> MySQL现在支持资源组的创建和管理，并且允许跟服务器一起运行的线程分配给特定的组，以便线程根据组的可用的资源执行。组属性可以控制其资源，允许或者限制组内线程的资源消费。DBA可以根据不同的工作量来调整这些属性为合适的值。现在，CPU时间是可以管理的资源，其概念由”虚拟CPU”来表示，其包含了CPU内核，超线程，硬件线程等等。服务器在启动时决定有多少虚拟CPU可用，并且拥有相应权限的数据库管理员可以将这些CPU与资源组关联并分配线程给组。要了解更多信息，详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html\">8.12.5，资源组</a>。</p>\n</li>\n<li><p><strong>表加密管理。</strong> 现在可以通过定义和强制加密默认值来全局管理表加密。default_table_encryption常量为新创建的schema和一般表空间定义了一个加密默认值。当创建一个schema时，加密默认值同时也可以用DEFAULT ENCRYPTION条款来进行定义。默认情况下，创建一个表的同时<br>会继承当前的schema或一般表空间的加密方式。设置table_encryption_privilege_check常量为可用，会强制使用加密默认值。当创建和修改一个不同于默认表加密设置的schema或表空间，或创建和修改一个不同于默认schema加密设置的表时，会发生权限检查。在table_encryption_privilege_check常量<br>为可用时，TABLE_ENCRYPTION_ADMIN权限会允许覆盖默认加密设置。想要了解更多这方面信息，查看《为Schemas和一般表空间定义一个加密默认值》章节。</p>\n</li>\n<li><p><strong>InnoDB的优化</strong> 包含以下对于InnoDB的优化：</p>\n<ul>\n<li>当前最大的自增计数器发生值改变时，会写入到redo日志，并在每一次检查点保存在私有引擎的系统表里。这个改进使得自增计数器的值在系统重启时保持不变。额外的：<ul>\n<li>服务器重启时不会取消表选项里<code>AUTO_INCREMENT=N</code>的效果。如果你重新设置了自增计数器的值，或者你将自增计数器的值修改为一个很大的值，新的值也会在服务器重启时保持不变。</li>\n<li>服务器重启时会立刻跟随一项<a href=\"https://dev.mysql.com/doc/refman/8.0/en/commit.html\">ROLLBACK</a>的操作，而不再重新使用事务回滚后的自增值。</li>\n<li>如果你将自增列的值修改为一个比当前最大自增值更大的值（比如一个update的操作），新的值会持久化，并且随之的新增操作会在这个值基础上自增。<br>更多的信息，详见15.6.1.6章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html\">InnoDB中的自增操作</a>，以及<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization\">InnoDB自增计数器的初始化</a>。</li>\n</ul>\n</li>\n<li>当索引树的损坏发生时，InnoDB会往redo日志写入一个损坏标识，这会保证损坏标识安全的销毁。InnoDB也会在每个检查点往私有引擎的系统表里写入内存崩溃的标识数据。在还原时，InnoDB在表和索引被标识为崩溃对象前会从这两个地方读取崩溃标识并合并结果内容。</li>\n<li>InnoDB缓存插件支持多种get操作（在一个缓存查询中获取多种key-value组合）和范围查询。详见15.20.4章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-multiple-get-range-query.html\">InnoDB缓存的多种get和范围查询支持</a></li>\n<li>innodb_deadlock_detect是一个新的动态变量，可以用于对不可用的死锁的监控。在高级的金融系统中，死锁监控可以缓解大量的线程等待同一个锁的情况。同时，在死锁发生时，使用在事务回滚时的innodb_lock_wait_timeout的设置并关闭死锁监控也可能是更有效的办法。</li>\n<li>新的<code>INFORMATION_SCHEMA.INNODB_CACHED_INDEXES</code>表会在InnoDB缓冲池中为每个索引记录索引页缓存的数量。</li>\n<li>现在，InnoDB的临时表会在共享的临时表空间ibtmp1中创建。</li>\n<li>InnoDB<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html\">表空间加密功能</a>支持对于redo日志和undo日志数据的加密。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-redo-log\">Redo日志加密</a>和<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-undo-log\">Undo日志加密</a>。</li>\n<li>对于<code>SELECT ... FOR SHARE</code>和<code>SELECT ... FOR UPDATE</code>这样的加锁读取语句，InnoDB支持使用<code>NOWAIT</code>和<code>SKIP LOCKED</code>选项。语句中的<code>NOWAIT</code>选项的效果是当一列被请求的行被另一个事务锁定时立刻返回结果。<code>SKIP LOCKED</code>会在结果集中移除被锁定的行。详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked\">并发锁读中使用NOWAIT和SKIP LOCKED</a>。<br><code>SELECT ... FOR SHARE</code>语句取代<code>SELECT ... LOCK IN SHARE MODE</code>，但是<code>LOCK IN SHARE MODE</code>依然保持着向后的兼容性。两个语句是等效的。但是<code>FOR UPDATE</code>和<code>FOR SHARE</code>支持<code>NOWAIT&#39;，&#39;SKIP LOCKED</code>，以及<code>OF</code>之类的<code>tbl_name</code>选项。<br>详见13.2.10章节，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\">SELECT STATEMENT</a>。<code>OF</code>这个<code>tbl_name</code>值用于锁定对命名的表的查询(TODO)。</li>\n<li>ADD PARTITION, DROP PARTITION, COALESCE PARTITION, REORGANIZE PARTITION, and REBUILD PARTITION ALTER TABLE options are supported by native partitioning<br>in-place APIs and may be used with ALGORITHM={COPY|INPLACE} and LOCK clauses.DROP PARTITION with ALGORITHM=INPLACE deletes data stored in the partition and drops the partition. However,<br>DROP PARTITION with ALGORITHM=COPY or old_alter_table=ON rebuilds the partitioned table and attempts to move data from the dropped partition<br>to another partition with a compatible PARTITION … VALUES definition. Data that cannot be moved to another partition is deleted. </li>\n</ul>\n</li>\n</ul>"},{"title":"一周文章收集-20220117","date":"2022-01-19T02:25:05.000Z","comments":1,"_content":"\n我发现逐篇翻译看到的技术博文并不是那么高效，还是像阮老师那样把一周看到的有价值的文章收集起来，作为一个归档会更加有用。\n\n---\n\n## [微软发布了自己的linux版本：CBL-Mariner](https://github.com/microsoft/CBL-Mariner)\n根据github上的介绍，CBL-Mariner 是微软为了云架构，edge的产品和服务开发的内部linux发行版。CBL-Mariner的设计是为了云设备和服务提供持久化的平台，并使得微软可以跟上linux的更新脚本。这是微软对于linux技术投入的一部分，还包括[SONiC](https://azure.microsoft.com/en-us/blog/sonic-the-networking-switch-software-that-powers-the-microsoft-global-cloud/)， [Azure Sphere OS](https://docs.microsoft.com/en-us/azure-sphere/product-overview/what-is-azure-sphere) 和 [Windows Subsystem for Linux (WSL)](https://docs.microsoft.com/en-us/windows/wsl/about)。\n\n## [程序员才懂的幽默](https://programmerhumor.io/)\n一个摸鱼网站，着实不错，里面包含了大量得具有一定开发知识才能懂的段子，是纯英文的，摸鱼的同时也能顺便提升下英文水平（并不）。\n![](programmerhumor.png)\n\n## [`权力的游戏`和`指环王`等奇幻故事里的地图](https://www.smithsonianmag.com/smart-news/explore-literary-maps-of-famous-authors-180979409/)\n这篇文章介绍了奇幻小说中的地图，这些地图的创作倾注了作者的心血和巧思，可以给读者带来沉浸的阅读感受。原文中有更多的地图介绍。\n![`奥德赛`的扉页地图](map1.png)\n\n## [13个程序员必看的博客网站](https://blog.bit.ai/programming-blogs-and-websites/)\n技术博客是程序员保持技术新鲜度非常重要的一个渠道，不仅仅是看其他的技术博客，自己维护一个博客也是很有必要。文章介绍了13个可以提升技术水平的博客网站，可以作为参考。\nP.S.后面发现里面大部分网站的质量不高，要么得收费，要么更新频率低，要么没啥有价值的文章。。。\n![](blog.jpg)\n\n## [深入详解Node.js线程池](https://betterprogramming.pub/a-deep-dive-into-the-node-js-thread-pool-a1f32a4f8628)\n这篇文章介绍了使用BigQuery这个Node插件后出现的错误，应该有点深度，以我有限的Node.js知识和英文水平，并没有怎么看懂。\nP.S.这个网站居然是收费的，一个月一篇免费博客。。。\n\n\n\n\n\n\n","source":"_posts/blog/一周技术博客收集-20210117.md","raw":"---\ntitle: 一周文章收集-20220117\ndate: 2022-01-19 10:25:05\ncomments: true\ncategories: \n- 一周文章收集\n---\n\n我发现逐篇翻译看到的技术博文并不是那么高效，还是像阮老师那样把一周看到的有价值的文章收集起来，作为一个归档会更加有用。\n\n---\n\n## [微软发布了自己的linux版本：CBL-Mariner](https://github.com/microsoft/CBL-Mariner)\n根据github上的介绍，CBL-Mariner 是微软为了云架构，edge的产品和服务开发的内部linux发行版。CBL-Mariner的设计是为了云设备和服务提供持久化的平台，并使得微软可以跟上linux的更新脚本。这是微软对于linux技术投入的一部分，还包括[SONiC](https://azure.microsoft.com/en-us/blog/sonic-the-networking-switch-software-that-powers-the-microsoft-global-cloud/)， [Azure Sphere OS](https://docs.microsoft.com/en-us/azure-sphere/product-overview/what-is-azure-sphere) 和 [Windows Subsystem for Linux (WSL)](https://docs.microsoft.com/en-us/windows/wsl/about)。\n\n## [程序员才懂的幽默](https://programmerhumor.io/)\n一个摸鱼网站，着实不错，里面包含了大量得具有一定开发知识才能懂的段子，是纯英文的，摸鱼的同时也能顺便提升下英文水平（并不）。\n![](programmerhumor.png)\n\n## [`权力的游戏`和`指环王`等奇幻故事里的地图](https://www.smithsonianmag.com/smart-news/explore-literary-maps-of-famous-authors-180979409/)\n这篇文章介绍了奇幻小说中的地图，这些地图的创作倾注了作者的心血和巧思，可以给读者带来沉浸的阅读感受。原文中有更多的地图介绍。\n![`奥德赛`的扉页地图](map1.png)\n\n## [13个程序员必看的博客网站](https://blog.bit.ai/programming-blogs-and-websites/)\n技术博客是程序员保持技术新鲜度非常重要的一个渠道，不仅仅是看其他的技术博客，自己维护一个博客也是很有必要。文章介绍了13个可以提升技术水平的博客网站，可以作为参考。\nP.S.后面发现里面大部分网站的质量不高，要么得收费，要么更新频率低，要么没啥有价值的文章。。。\n![](blog.jpg)\n\n## [深入详解Node.js线程池](https://betterprogramming.pub/a-deep-dive-into-the-node-js-thread-pool-a1f32a4f8628)\n这篇文章介绍了使用BigQuery这个Node插件后出现的错误，应该有点深度，以我有限的Node.js知识和英文水平，并没有怎么看懂。\nP.S.这个网站居然是收费的，一个月一篇免费博客。。。\n\n\n\n\n\n\n","slug":"blog/一周技术博客收集-20210117","published":1,"updated":"2022-01-25T06:51:53.000Z","_id":"cl102ztsn002ntccf6xg7ctsn","layout":"post","photos":[],"link":"","content":"<p>我发现逐篇翻译看到的技术博文并不是那么高效，还是像阮老师那样把一周看到的有价值的文章收集起来，作为一个归档会更加有用。</p>\n<hr>\n<h2 id=\"微软发布了自己的linux版本：CBL-Mariner\"><a href=\"#微软发布了自己的linux版本：CBL-Mariner\" class=\"headerlink\" title=\"微软发布了自己的linux版本：CBL-Mariner\"></a><a href=\"https://github.com/microsoft/CBL-Mariner\">微软发布了自己的linux版本：CBL-Mariner</a></h2><p>根据github上的介绍，CBL-Mariner 是微软为了云架构，edge的产品和服务开发的内部linux发行版。CBL-Mariner的设计是为了云设备和服务提供持久化的平台，并使得微软可以跟上linux的更新脚本。这是微软对于linux技术投入的一部分，还包括<a href=\"https://azure.microsoft.com/en-us/blog/sonic-the-networking-switch-software-that-powers-the-microsoft-global-cloud/\">SONiC</a>， <a href=\"https://docs.microsoft.com/en-us/azure-sphere/product-overview/what-is-azure-sphere\">Azure Sphere OS</a> 和 <a href=\"https://docs.microsoft.com/en-us/windows/wsl/about\">Windows Subsystem for Linux (WSL)</a>。</p>\n<h2 id=\"程序员才懂的幽默\"><a href=\"#程序员才懂的幽默\" class=\"headerlink\" title=\"程序员才懂的幽默\"></a><a href=\"https://programmerhumor.io/\">程序员才懂的幽默</a></h2><p>一个摸鱼网站，着实不错，里面包含了大量得具有一定开发知识才能懂的段子，是纯英文的，摸鱼的同时也能顺便提升下英文水平（并不）。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/programmerhumor.png\"></p>\n<h2 id=\"权力的游戏和指环王等奇幻故事里的地图\"><a href=\"#权力的游戏和指环王等奇幻故事里的地图\" class=\"headerlink\" title=\"权力的游戏和指环王等奇幻故事里的地图\"></a><a href=\"https://www.smithsonianmag.com/smart-news/explore-literary-maps-of-famous-authors-180979409/\"><code>权力的游戏</code>和<code>指环王</code>等奇幻故事里的地图</a></h2><p>这篇文章介绍了奇幻小说中的地图，这些地图的创作倾注了作者的心血和巧思，可以给读者带来沉浸的阅读感受。原文中有更多的地图介绍。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/map1.png\" alt=\"`奥德赛`的扉页地图\"></p>\n<h2 id=\"13个程序员必看的博客网站\"><a href=\"#13个程序员必看的博客网站\" class=\"headerlink\" title=\"13个程序员必看的博客网站\"></a><a href=\"https://blog.bit.ai/programming-blogs-and-websites/\">13个程序员必看的博客网站</a></h2><p>技术博客是程序员保持技术新鲜度非常重要的一个渠道，不仅仅是看其他的技术博客，自己维护一个博客也是很有必要。文章介绍了13个可以提升技术水平的博客网站，可以作为参考。<br>P.S.后面发现里面大部分网站的质量不高，要么得收费，要么更新频率低，要么没啥有价值的文章。。。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/blog.jpg\"></p>\n<h2 id=\"深入详解Node-js线程池\"><a href=\"#深入详解Node-js线程池\" class=\"headerlink\" title=\"深入详解Node.js线程池\"></a><a href=\"https://betterprogramming.pub/a-deep-dive-into-the-node-js-thread-pool-a1f32a4f8628\">深入详解Node.js线程池</a></h2><p>这篇文章介绍了使用BigQuery这个Node插件后出现的错误，应该有点深度，以我有限的Node.js知识和英文水平，并没有怎么看懂。<br>P.S.这个网站居然是收费的，一个月一篇免费博客。。。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p>我发现逐篇翻译看到的技术博文并不是那么高效，还是像阮老师那样把一周看到的有价值的文章收集起来，作为一个归档会更加有用。</p>\n<hr>\n<h2 id=\"微软发布了自己的linux版本：CBL-Mariner\"><a href=\"#微软发布了自己的linux版本：CBL-Mariner\" class=\"headerlink\" title=\"微软发布了自己的linux版本：CBL-Mariner\"></a><a href=\"https://github.com/microsoft/CBL-Mariner\">微软发布了自己的linux版本：CBL-Mariner</a></h2><p>根据github上的介绍，CBL-Mariner 是微软为了云架构，edge的产品和服务开发的内部linux发行版。CBL-Mariner的设计是为了云设备和服务提供持久化的平台，并使得微软可以跟上linux的更新脚本。这是微软对于linux技术投入的一部分，还包括<a href=\"https://azure.microsoft.com/en-us/blog/sonic-the-networking-switch-software-that-powers-the-microsoft-global-cloud/\">SONiC</a>， <a href=\"https://docs.microsoft.com/en-us/azure-sphere/product-overview/what-is-azure-sphere\">Azure Sphere OS</a> 和 <a href=\"https://docs.microsoft.com/en-us/windows/wsl/about\">Windows Subsystem for Linux (WSL)</a>。</p>\n<h2 id=\"程序员才懂的幽默\"><a href=\"#程序员才懂的幽默\" class=\"headerlink\" title=\"程序员才懂的幽默\"></a><a href=\"https://programmerhumor.io/\">程序员才懂的幽默</a></h2><p>一个摸鱼网站，着实不错，里面包含了大量得具有一定开发知识才能懂的段子，是纯英文的，摸鱼的同时也能顺便提升下英文水平（并不）。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/programmerhumor.png\"></p>\n<h2 id=\"权力的游戏和指环王等奇幻故事里的地图\"><a href=\"#权力的游戏和指环王等奇幻故事里的地图\" class=\"headerlink\" title=\"权力的游戏和指环王等奇幻故事里的地图\"></a><a href=\"https://www.smithsonianmag.com/smart-news/explore-literary-maps-of-famous-authors-180979409/\"><code>权力的游戏</code>和<code>指环王</code>等奇幻故事里的地图</a></h2><p>这篇文章介绍了奇幻小说中的地图，这些地图的创作倾注了作者的心血和巧思，可以给读者带来沉浸的阅读感受。原文中有更多的地图介绍。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/map1.png\" alt=\"`奥德赛`的扉页地图\"></p>\n<h2 id=\"13个程序员必看的博客网站\"><a href=\"#13个程序员必看的博客网站\" class=\"headerlink\" title=\"13个程序员必看的博客网站\"></a><a href=\"https://blog.bit.ai/programming-blogs-and-websites/\">13个程序员必看的博客网站</a></h2><p>技术博客是程序员保持技术新鲜度非常重要的一个渠道，不仅仅是看其他的技术博客，自己维护一个博客也是很有必要。文章介绍了13个可以提升技术水平的博客网站，可以作为参考。<br>P.S.后面发现里面大部分网站的质量不高，要么得收费，要么更新频率低，要么没啥有价值的文章。。。<br><img src=\"/2022/01/19/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20210117/blog.jpg\"></p>\n<h2 id=\"深入详解Node-js线程池\"><a href=\"#深入详解Node-js线程池\" class=\"headerlink\" title=\"深入详解Node.js线程池\"></a><a href=\"https://betterprogramming.pub/a-deep-dive-into-the-node-js-thread-pool-a1f32a4f8628\">深入详解Node.js线程池</a></h2><p>这篇文章介绍了使用BigQuery这个Node插件后出现的错误，应该有点深度，以我有限的Node.js知识和英文水平，并没有怎么看懂。<br>P.S.这个网站居然是收费的，一个月一篇免费博客。。。</p>\n"},{"title":"一周文章收集-20220124","date":"2022-01-25T06:52:13.000Z","comments":1,"_content":"\n## [为什么网络游戏`Wordle`病毒式的传播，来听听心理学家的解释](https://www.smithsonianmag.com/smart-news/heres-why-the-word-game-wordle-went-viral-180979439/)\n近期有个网络游戏`Wordle`在推特上及其流行，这是字谜类的游戏。规则比较简单，玩家需要猜一个5个字母组成的单词。其特别之处在于拥有社交属性，即一盘游戏是需要好几个人参与的，通过不同色块提示字母和位置的正确与否，这样每个人都能看到别人猜的进度，形成一种竞争体验。\n![](wordle.png)\n\n## [开源工具Arthas在线诊断java程序](https://arthas.aliyun.com/doc/)\n`Arthas`是Alibaba开源的Java诊断工具，可以实现在线监控执行方法，观测返回值等，在很多特殊的场景下，比如在家里无法部署开发环境却需要检查线上程序具体问题，或者需要查问题的程序只有线上包没有源代码，可以使用Arthas进行在线诊断并处理，以后将会专门写一篇关于如何使用Arthas的文章。\n\n## [如何在Debian 11安装CSF](https://vitux.com/how-to-install-config-server-firewall-csf-on-debian/)\nCSF全称是Config Server Firewall，是一套可以轻松对防火墙策略和规则进行配置的防火墙软件，适合不熟悉linux防火墙的新手使用，本文介绍了如何安装和使用CSF，以增强linux的安全性。\n\n\n\n","source":"_posts/blog/一周技术博客收集-20220124.md","raw":"---\ntitle: 一周文章收集-20220124\ndate: 2022-01-25 14:52:13\ncomments: true\ncategories: \n- 一周文章收集\n---\n\n## [为什么网络游戏`Wordle`病毒式的传播，来听听心理学家的解释](https://www.smithsonianmag.com/smart-news/heres-why-the-word-game-wordle-went-viral-180979439/)\n近期有个网络游戏`Wordle`在推特上及其流行，这是字谜类的游戏。规则比较简单，玩家需要猜一个5个字母组成的单词。其特别之处在于拥有社交属性，即一盘游戏是需要好几个人参与的，通过不同色块提示字母和位置的正确与否，这样每个人都能看到别人猜的进度，形成一种竞争体验。\n![](wordle.png)\n\n## [开源工具Arthas在线诊断java程序](https://arthas.aliyun.com/doc/)\n`Arthas`是Alibaba开源的Java诊断工具，可以实现在线监控执行方法，观测返回值等，在很多特殊的场景下，比如在家里无法部署开发环境却需要检查线上程序具体问题，或者需要查问题的程序只有线上包没有源代码，可以使用Arthas进行在线诊断并处理，以后将会专门写一篇关于如何使用Arthas的文章。\n\n## [如何在Debian 11安装CSF](https://vitux.com/how-to-install-config-server-firewall-csf-on-debian/)\nCSF全称是Config Server Firewall，是一套可以轻松对防火墙策略和规则进行配置的防火墙软件，适合不熟悉linux防火墙的新手使用，本文介绍了如何安装和使用CSF，以增强linux的安全性。\n\n\n\n","slug":"blog/一周技术博客收集-20220124","published":1,"updated":"2022-01-25T08:07:49.000Z","_id":"cl102ztwi002ptccf939p194y","layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\"><a href=\"#为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\" class=\"headerlink\" title=\"为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\"></a><a href=\"https://www.smithsonianmag.com/smart-news/heres-why-the-word-game-wordle-went-viral-180979439/\">为什么网络游戏<code>Wordle</code>病毒式的传播，来听听心理学家的解释</a></h2><p>近期有个网络游戏<code>Wordle</code>在推特上及其流行，这是字谜类的游戏。规则比较简单，玩家需要猜一个5个字母组成的单词。其特别之处在于拥有社交属性，即一盘游戏是需要好几个人参与的，通过不同色块提示字母和位置的正确与否，这样每个人都能看到别人猜的进度，形成一种竞争体验。<br><img src=\"/2022/01/25/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20220124/wordle.png\"></p>\n<h2 id=\"开源工具Arthas在线诊断java程序\"><a href=\"#开源工具Arthas在线诊断java程序\" class=\"headerlink\" title=\"开源工具Arthas在线诊断java程序\"></a><a href=\"https://arthas.aliyun.com/doc/\">开源工具Arthas在线诊断java程序</a></h2><p><code>Arthas</code>是Alibaba开源的Java诊断工具，可以实现在线监控执行方法，观测返回值等，在很多特殊的场景下，比如在家里无法部署开发环境却需要检查线上程序具体问题，或者需要查问题的程序只有线上包没有源代码，可以使用Arthas进行在线诊断并处理，以后将会专门写一篇关于如何使用Arthas的文章。</p>\n<h2 id=\"如何在Debian-11安装CSF\"><a href=\"#如何在Debian-11安装CSF\" class=\"headerlink\" title=\"如何在Debian 11安装CSF\"></a><a href=\"https://vitux.com/how-to-install-config-server-firewall-csf-on-debian/\">如何在Debian 11安装CSF</a></h2><p>CSF全称是Config Server Firewall，是一套可以轻松对防火墙策略和规则进行配置的防火墙软件，适合不熟悉linux防火墙的新手使用，本文介绍了如何安装和使用CSF，以增强linux的安全性。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\"><a href=\"#为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\" class=\"headerlink\" title=\"为什么网络游戏Wordle病毒式的传播，来听听心理学家的解释\"></a><a href=\"https://www.smithsonianmag.com/smart-news/heres-why-the-word-game-wordle-went-viral-180979439/\">为什么网络游戏<code>Wordle</code>病毒式的传播，来听听心理学家的解释</a></h2><p>近期有个网络游戏<code>Wordle</code>在推特上及其流行，这是字谜类的游戏。规则比较简单，玩家需要猜一个5个字母组成的单词。其特别之处在于拥有社交属性，即一盘游戏是需要好几个人参与的，通过不同色块提示字母和位置的正确与否，这样每个人都能看到别人猜的进度，形成一种竞争体验。<br><img src=\"/2022/01/25/blog/%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86-20220124/wordle.png\"></p>\n<h2 id=\"开源工具Arthas在线诊断java程序\"><a href=\"#开源工具Arthas在线诊断java程序\" class=\"headerlink\" title=\"开源工具Arthas在线诊断java程序\"></a><a href=\"https://arthas.aliyun.com/doc/\">开源工具Arthas在线诊断java程序</a></h2><p><code>Arthas</code>是Alibaba开源的Java诊断工具，可以实现在线监控执行方法，观测返回值等，在很多特殊的场景下，比如在家里无法部署开发环境却需要检查线上程序具体问题，或者需要查问题的程序只有线上包没有源代码，可以使用Arthas进行在线诊断并处理，以后将会专门写一篇关于如何使用Arthas的文章。</p>\n<h2 id=\"如何在Debian-11安装CSF\"><a href=\"#如何在Debian-11安装CSF\" class=\"headerlink\" title=\"如何在Debian 11安装CSF\"></a><a href=\"https://vitux.com/how-to-install-config-server-firewall-csf-on-debian/\">如何在Debian 11安装CSF</a></h2><p>CSF全称是Config Server Firewall，是一套可以轻松对防火墙策略和规则进行配置的防火墙软件，适合不熟悉linux防火墙的新手使用，本文介绍了如何安装和使用CSF，以增强linux的安全性。</p>\n"},{"title":"12例bash脚本最佳实践","date":"2022-01-18T02:18:17.000Z","comments":1,"_content":"\n**声明**\n\n翻译自[12 Best Practices for Writing Bash Scripts](https://www.faqforge.com/linux/12-best-practices-for-writing-bash-scripts/)\n翻译完发现这篇文章技术价值相当低。。。\n\n---\n\nBash shell全称Bourne Again Shell，现在作为大部分的linux发行版本的默认shell。一个Bash脚本是一个包含多行shell命令的文件，用于执行特别的命令。如果你熟知bash脚本，那这篇文章就很适合你，在这篇文章中我写了12种bash脚本的最佳实践，可以增加bash脚本的效率并使其更易读。\n\n## 注解\n注解是一段清晰代码最基础的部分，用于定义或解释复杂代码的不同部分。写脚本的时候，你可以毫不费力的看懂很早之前你写过的代码。同样也能帮助你在一个大的项目组提高工作效率，帮助你理解一个函数或方法的真实用途。\n\n## 使用函数\n一个函数是一堆命令联合之后实现一个特定的任务，可以帮助工作流模块化并使得脚本可复用，消除重复的代码。这可以让你维护的代码更加清晰和可读。\n```bash\n#!/bin/bash\n\nfunction check_root() {\n\n  echo \"function has been called\";\n\n}\n```\n\n## 对引用变量使用双引号\n使用双引号可以消除不必要的通配符，同时当引用变量包含分割字符和空格时可以将包含空格的单词进行分割。如下例子中，我们可以看出变量用不用双引号的区别。（译者：没有例子，作者估计漏了）\n\n## 出现错误时终止脚本\n有时候执行脚本的时候可能会出现一些错误。然而即使一个命令失败了，剩余的脚本也有可能继续运行，从而影响脚本中的其他命令。所以为了避免任何进一步的逻辑错误，我们需要加入`set -o errexit`或`set -e`终止错误的命令。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n```\n<!-- more -->\n## 使用未声明变量时终止脚本\n脚本执行时，如果存在未声明的变量，可能导致bash使用变量时出现逻辑错误。当bash中存在一个未声明变量时，我们可以用如下命令中止脚本：\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o nounset\n```\n\n## 声明变量\n我们必须对一个变量的数据类型和用法进行声明。当变量未声明，bash可能会因此执行失败。变量可以被声明为全局或在脚本内的本地变量。\n```bash\n#!/bin/bash\n\n# variable declaration\n\ndeclare -r -i x=30\n\nfunction my_variable(){\n\n  local -r name = ${HOME}\n\n}\n```\n\n## 使用花括号\n当使用变量关联字符串时，可以使用花括号将变量圈起来，以避免不必要的变量使用。同样也可用于对字符串的简单定义。比如：\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\n# Custom variable\n\ndata= \"${USER}_data is being used\"\n```\n\n## 命令替换\n当分配命令的输出到变量时，bash使用命令替换的特性。我们需要使用推荐的$()而不是反引号去分配输出到变量。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\n#Displaying Date\n\ndate_now = ${date}\n```\n\n## 变量命名规范\n在我们的系统中，所有的环境变量都用大写字母。所以当我们声明一个本地变量时，需要使用小写字母以避免环境变量和本地变量名之间的冲突。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\nuser_var = \"$HOME is your system's current login user.\"\n```\n\n## 声明静态变量\n如果你拥有一个在整个脚本中都不变的静态数据，你可以将值分配到一个不能被修改的静态变量上。你可以使用`readonly`命令来分配静态变量。\n```bash\n#!/bin/bash\n\n# This is nginx test host config\n\nreadonly test_conf_path = \"/etc/nginx/conf.d/test.conf\"\n```\n\n## 比较字符串\n在多数场景下字符串用`==`进行比较，但是在bash脚本中，字符串用`=`就可以完成比较。在如下例子中，我用`=`比较两个字符串。\n```bash\n#!/bin/bash\n\n# comparing two strings\n\nIf [ \"$HOME\" = \"User1\" ]; then\n\n  echo \"This is test purpose\".\n\nfi\n```\n\n## 脚本调试\n调试是鉴定问题最重要的部分。我们需要在运行脚本的时候加上`-n`命令来检查脚本语法错误。\n```bash\nbash -n script_name\n```\n同样的，我们可以使用如下命令打开脚本的debug模式。\n```bash\nbash -x script_name\n```\n\n## 总结\n这样，就是12个可以提升你脚本能力的bash脚本实践。当使用命令去完成特殊任务时，bash脚本将是更出色的那个。\n\n---\n\nrefers to 指的是；全称\ndemonstration （强烈表达）集会示威;游行示威;示范;示范表演;演示;证明;证实;论证;说明;表达\neffortless 不费力的\nmodularizing 模块化\nglobbing 通配符\nsplitting 分割\ncurly braces 大括号;花括号;大括弧;花括號\nconcatenation 串联\nsubstitution 置换;取代;代换;代入\nassigning 分配\nsyntax 语法","source":"_posts/blog/技术博客翻译-12例bash脚本最佳实践.md","raw":"---\ntitle: 12例bash脚本最佳实践\ndate: 2022-01-18 10:18:17\ntags: \n- linux\n- translate\ncomments: true\ncategories: \n- 学习\n---\n\n**声明**\n\n翻译自[12 Best Practices for Writing Bash Scripts](https://www.faqforge.com/linux/12-best-practices-for-writing-bash-scripts/)\n翻译完发现这篇文章技术价值相当低。。。\n\n---\n\nBash shell全称Bourne Again Shell，现在作为大部分的linux发行版本的默认shell。一个Bash脚本是一个包含多行shell命令的文件，用于执行特别的命令。如果你熟知bash脚本，那这篇文章就很适合你，在这篇文章中我写了12种bash脚本的最佳实践，可以增加bash脚本的效率并使其更易读。\n\n## 注解\n注解是一段清晰代码最基础的部分，用于定义或解释复杂代码的不同部分。写脚本的时候，你可以毫不费力的看懂很早之前你写过的代码。同样也能帮助你在一个大的项目组提高工作效率，帮助你理解一个函数或方法的真实用途。\n\n## 使用函数\n一个函数是一堆命令联合之后实现一个特定的任务，可以帮助工作流模块化并使得脚本可复用，消除重复的代码。这可以让你维护的代码更加清晰和可读。\n```bash\n#!/bin/bash\n\nfunction check_root() {\n\n  echo \"function has been called\";\n\n}\n```\n\n## 对引用变量使用双引号\n使用双引号可以消除不必要的通配符，同时当引用变量包含分割字符和空格时可以将包含空格的单词进行分割。如下例子中，我们可以看出变量用不用双引号的区别。（译者：没有例子，作者估计漏了）\n\n## 出现错误时终止脚本\n有时候执行脚本的时候可能会出现一些错误。然而即使一个命令失败了，剩余的脚本也有可能继续运行，从而影响脚本中的其他命令。所以为了避免任何进一步的逻辑错误，我们需要加入`set -o errexit`或`set -e`终止错误的命令。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n```\n<!-- more -->\n## 使用未声明变量时终止脚本\n脚本执行时，如果存在未声明的变量，可能导致bash使用变量时出现逻辑错误。当bash中存在一个未声明变量时，我们可以用如下命令中止脚本：\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o nounset\n```\n\n## 声明变量\n我们必须对一个变量的数据类型和用法进行声明。当变量未声明，bash可能会因此执行失败。变量可以被声明为全局或在脚本内的本地变量。\n```bash\n#!/bin/bash\n\n# variable declaration\n\ndeclare -r -i x=30\n\nfunction my_variable(){\n\n  local -r name = ${HOME}\n\n}\n```\n\n## 使用花括号\n当使用变量关联字符串时，可以使用花括号将变量圈起来，以避免不必要的变量使用。同样也可用于对字符串的简单定义。比如：\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\n# Custom variable\n\ndata= \"${USER}_data is being used\"\n```\n\n## 命令替换\n当分配命令的输出到变量时，bash使用命令替换的特性。我们需要使用推荐的$()而不是反引号去分配输出到变量。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\n#Displaying Date\n\ndate_now = ${date}\n```\n\n## 变量命名规范\n在我们的系统中，所有的环境变量都用大写字母。所以当我们声明一个本地变量时，需要使用小写字母以避免环境变量和本地变量名之间的冲突。\n```bash\n#!/bin/bash\n\n# Terminate the script on command fails\n\nset -o errexit\n\nuser_var = \"$HOME is your system's current login user.\"\n```\n\n## 声明静态变量\n如果你拥有一个在整个脚本中都不变的静态数据，你可以将值分配到一个不能被修改的静态变量上。你可以使用`readonly`命令来分配静态变量。\n```bash\n#!/bin/bash\n\n# This is nginx test host config\n\nreadonly test_conf_path = \"/etc/nginx/conf.d/test.conf\"\n```\n\n## 比较字符串\n在多数场景下字符串用`==`进行比较，但是在bash脚本中，字符串用`=`就可以完成比较。在如下例子中，我用`=`比较两个字符串。\n```bash\n#!/bin/bash\n\n# comparing two strings\n\nIf [ \"$HOME\" = \"User1\" ]; then\n\n  echo \"This is test purpose\".\n\nfi\n```\n\n## 脚本调试\n调试是鉴定问题最重要的部分。我们需要在运行脚本的时候加上`-n`命令来检查脚本语法错误。\n```bash\nbash -n script_name\n```\n同样的，我们可以使用如下命令打开脚本的debug模式。\n```bash\nbash -x script_name\n```\n\n## 总结\n这样，就是12个可以提升你脚本能力的bash脚本实践。当使用命令去完成特殊任务时，bash脚本将是更出色的那个。\n\n---\n\nrefers to 指的是；全称\ndemonstration （强烈表达）集会示威;游行示威;示范;示范表演;演示;证明;证实;论证;说明;表达\neffortless 不费力的\nmodularizing 模块化\nglobbing 通配符\nsplitting 分割\ncurly braces 大括号;花括号;大括弧;花括號\nconcatenation 串联\nsubstitution 置换;取代;代换;代入\nassigning 分配\nsyntax 语法","slug":"blog/技术博客翻译-12例bash脚本最佳实践","published":1,"updated":"2022-01-20T00:35:05.000Z","_id":"cl102zu4l002rtccff2crbbuc","layout":"post","photos":[],"link":"","content":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://www.faqforge.com/linux/12-best-practices-for-writing-bash-scripts/\">12 Best Practices for Writing Bash Scripts</a><br>翻译完发现这篇文章技术价值相当低。。。</p>\n<hr>\n<p>Bash shell全称Bourne Again Shell，现在作为大部分的linux发行版本的默认shell。一个Bash脚本是一个包含多行shell命令的文件，用于执行特别的命令。如果你熟知bash脚本，那这篇文章就很适合你，在这篇文章中我写了12种bash脚本的最佳实践，可以增加bash脚本的效率并使其更易读。</p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>注解是一段清晰代码最基础的部分，用于定义或解释复杂代码的不同部分。写脚本的时候，你可以毫不费力的看懂很早之前你写过的代码。同样也能帮助你在一个大的项目组提高工作效率，帮助你理解一个函数或方法的真实用途。</p>\n<h2 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"></a>使用函数</h2><p>一个函数是一堆命令联合之后实现一个特定的任务，可以帮助工作流模块化并使得脚本可复用，消除重复的代码。这可以让你维护的代码更加清晰和可读。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check_root</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;function has been called&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对引用变量使用双引号\"><a href=\"#对引用变量使用双引号\" class=\"headerlink\" title=\"对引用变量使用双引号\"></a>对引用变量使用双引号</h2><p>使用双引号可以消除不必要的通配符，同时当引用变量包含分割字符和空格时可以将包含空格的单词进行分割。如下例子中，我们可以看出变量用不用双引号的区别。（译者：没有例子，作者估计漏了）</p>\n<h2 id=\"出现错误时终止脚本\"><a href=\"#出现错误时终止脚本\" class=\"headerlink\" title=\"出现错误时终止脚本\"></a>出现错误时终止脚本</h2><p>有时候执行脚本的时候可能会出现一些错误。然而即使一个命令失败了，剩余的脚本也有可能继续运行，从而影响脚本中的其他命令。所以为了避免任何进一步的逻辑错误，我们需要加入<code>set -o errexit</code>或<code>set -e</code>终止错误的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"使用未声明变量时终止脚本\"><a href=\"#使用未声明变量时终止脚本\" class=\"headerlink\" title=\"使用未声明变量时终止脚本\"></a>使用未声明变量时终止脚本</h2><p>脚本执行时，如果存在未声明的变量，可能导致bash使用变量时出现逻辑错误。当bash中存在一个未声明变量时，我们可以用如下命令中止脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o nounset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h2><p>我们必须对一个变量的数据类型和用法进行声明。当变量未声明，bash可能会因此执行失败。变量可以被声明为全局或在脚本内的本地变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># variable declaration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -r -i x=30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">my_variable</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">local</span> -r name = <span class=\"variable\">$&#123;HOME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用花括号\"><a href=\"#使用花括号\" class=\"headerlink\" title=\"使用花括号\"></a>使用花括号</h2><p>当使用变量关联字符串时，可以使用花括号将变量圈起来，以避免不必要的变量使用。同样也可用于对字符串的简单定义。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Custom variable</span></span><br><span class=\"line\"></span><br><span class=\"line\">data= <span class=\"string\">&quot;<span class=\"variable\">$&#123;USER&#125;</span>_data is being used&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令替换\"><a href=\"#命令替换\" class=\"headerlink\" title=\"命令替换\"></a>命令替换</h2><p>当分配命令的输出到变量时，bash使用命令替换的特性。我们需要使用推荐的$()而不是反引号去分配输出到变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Displaying Date</span></span><br><span class=\"line\"></span><br><span class=\"line\">date_now = <span class=\"variable\">$&#123;date&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h2><p>在我们的系统中，所有的环境变量都用大写字母。所以当我们声明一个本地变量时，需要使用小写字母以避免环境变量和本地变量名之间的冲突。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">user_var = <span class=\"string\">&quot;<span class=\"variable\">$HOME</span> is your system&#x27;s current login user.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明静态变量\"><a href=\"#声明静态变量\" class=\"headerlink\" title=\"声明静态变量\"></a>声明静态变量</h2><p>如果你拥有一个在整个脚本中都不变的静态数据，你可以将值分配到一个不能被修改的静态变量上。你可以使用<code>readonly</code>命令来分配静态变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is nginx test host config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">readonly</span> test_conf_path = <span class=\"string\">&quot;/etc/nginx/conf.d/test.conf&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较字符串\"><a href=\"#比较字符串\" class=\"headerlink\" title=\"比较字符串\"></a>比较字符串</h2><p>在多数场景下字符串用<code>==</code>进行比较，但是在bash脚本中，字符串用<code>=</code>就可以完成比较。在如下例子中，我用<code>=</code>比较两个字符串。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># comparing two strings</span></span><br><span class=\"line\"></span><br><span class=\"line\">If [ <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>&quot;</span> = <span class=\"string\">&quot;User1&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This is test purpose&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"脚本调试\"><a href=\"#脚本调试\" class=\"headerlink\" title=\"脚本调试\"></a>脚本调试</h2><p>调试是鉴定问题最重要的部分。我们需要在运行脚本的时候加上<code>-n</code>命令来检查脚本语法错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -n script_name</span><br></pre></td></tr></table></figure>\n<p>同样的，我们可以使用如下命令打开脚本的debug模式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -x script_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这样，就是12个可以提升你脚本能力的bash脚本实践。当使用命令去完成特殊任务时，bash脚本将是更出色的那个。</p>\n<hr>\n<p>refers to 指的是；全称<br>demonstration （强烈表达）集会示威;游行示威;示范;示范表演;演示;证明;证实;论证;说明;表达<br>effortless 不费力的<br>modularizing 模块化<br>globbing 通配符<br>splitting 分割<br>curly braces 大括号;花括号;大括弧;花括號<br>concatenation 串联<br>substitution 置换;取代;代换;代入<br>assigning 分配<br>syntax 语法</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><strong>声明</strong></p>\n<p>翻译自<a href=\"https://www.faqforge.com/linux/12-best-practices-for-writing-bash-scripts/\">12 Best Practices for Writing Bash Scripts</a><br>翻译完发现这篇文章技术价值相当低。。。</p>\n<hr>\n<p>Bash shell全称Bourne Again Shell，现在作为大部分的linux发行版本的默认shell。一个Bash脚本是一个包含多行shell命令的文件，用于执行特别的命令。如果你熟知bash脚本，那这篇文章就很适合你，在这篇文章中我写了12种bash脚本的最佳实践，可以增加bash脚本的效率并使其更易读。</p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>注解是一段清晰代码最基础的部分，用于定义或解释复杂代码的不同部分。写脚本的时候，你可以毫不费力的看懂很早之前你写过的代码。同样也能帮助你在一个大的项目组提高工作效率，帮助你理解一个函数或方法的真实用途。</p>\n<h2 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"></a>使用函数</h2><p>一个函数是一堆命令联合之后实现一个特定的任务，可以帮助工作流模块化并使得脚本可复用，消除重复的代码。这可以让你维护的代码更加清晰和可读。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check_root</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;function has been called&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对引用变量使用双引号\"><a href=\"#对引用变量使用双引号\" class=\"headerlink\" title=\"对引用变量使用双引号\"></a>对引用变量使用双引号</h2><p>使用双引号可以消除不必要的通配符，同时当引用变量包含分割字符和空格时可以将包含空格的单词进行分割。如下例子中，我们可以看出变量用不用双引号的区别。（译者：没有例子，作者估计漏了）</p>\n<h2 id=\"出现错误时终止脚本\"><a href=\"#出现错误时终止脚本\" class=\"headerlink\" title=\"出现错误时终止脚本\"></a>出现错误时终止脚本</h2><p>有时候执行脚本的时候可能会出现一些错误。然而即使一个命令失败了，剩余的脚本也有可能继续运行，从而影响脚本中的其他命令。所以为了避免任何进一步的逻辑错误，我们需要加入<code>set -o errexit</code>或<code>set -e</code>终止错误的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"使用未声明变量时终止脚本\"><a href=\"#使用未声明变量时终止脚本\" class=\"headerlink\" title=\"使用未声明变量时终止脚本\"></a>使用未声明变量时终止脚本</h2><p>脚本执行时，如果存在未声明的变量，可能导致bash使用变量时出现逻辑错误。当bash中存在一个未声明变量时，我们可以用如下命令中止脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o nounset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h2><p>我们必须对一个变量的数据类型和用法进行声明。当变量未声明，bash可能会因此执行失败。变量可以被声明为全局或在脚本内的本地变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># variable declaration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -r -i x=30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">my_variable</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">local</span> -r name = <span class=\"variable\">$&#123;HOME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用花括号\"><a href=\"#使用花括号\" class=\"headerlink\" title=\"使用花括号\"></a>使用花括号</h2><p>当使用变量关联字符串时，可以使用花括号将变量圈起来，以避免不必要的变量使用。同样也可用于对字符串的简单定义。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Custom variable</span></span><br><span class=\"line\"></span><br><span class=\"line\">data= <span class=\"string\">&quot;<span class=\"variable\">$&#123;USER&#125;</span>_data is being used&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令替换\"><a href=\"#命令替换\" class=\"headerlink\" title=\"命令替换\"></a>命令替换</h2><p>当分配命令的输出到变量时，bash使用命令替换的特性。我们需要使用推荐的$()而不是反引号去分配输出到变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Displaying Date</span></span><br><span class=\"line\"></span><br><span class=\"line\">date_now = <span class=\"variable\">$&#123;date&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h2><p>在我们的系统中，所有的环境变量都用大写字母。所以当我们声明一个本地变量时，需要使用小写字母以避免环境变量和本地变量名之间的冲突。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminate the script on command fails</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\">user_var = <span class=\"string\">&quot;<span class=\"variable\">$HOME</span> is your system&#x27;s current login user.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明静态变量\"><a href=\"#声明静态变量\" class=\"headerlink\" title=\"声明静态变量\"></a>声明静态变量</h2><p>如果你拥有一个在整个脚本中都不变的静态数据，你可以将值分配到一个不能被修改的静态变量上。你可以使用<code>readonly</code>命令来分配静态变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is nginx test host config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">readonly</span> test_conf_path = <span class=\"string\">&quot;/etc/nginx/conf.d/test.conf&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较字符串\"><a href=\"#比较字符串\" class=\"headerlink\" title=\"比较字符串\"></a>比较字符串</h2><p>在多数场景下字符串用<code>==</code>进行比较，但是在bash脚本中，字符串用<code>=</code>就可以完成比较。在如下例子中，我用<code>=</code>比较两个字符串。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># comparing two strings</span></span><br><span class=\"line\"></span><br><span class=\"line\">If [ <span class=\"string\">&quot;<span class=\"variable\">$HOME</span>&quot;</span> = <span class=\"string\">&quot;User1&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This is test purpose&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"脚本调试\"><a href=\"#脚本调试\" class=\"headerlink\" title=\"脚本调试\"></a>脚本调试</h2><p>调试是鉴定问题最重要的部分。我们需要在运行脚本的时候加上<code>-n</code>命令来检查脚本语法错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -n script_name</span><br></pre></td></tr></table></figure>\n<p>同样的，我们可以使用如下命令打开脚本的debug模式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -x script_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这样，就是12个可以提升你脚本能力的bash脚本实践。当使用命令去完成特殊任务时，bash脚本将是更出色的那个。</p>\n<hr>\n<p>refers to 指的是；全称<br>demonstration （强烈表达）集会示威;游行示威;示范;示范表演;演示;证明;证实;论证;说明;表达<br>effortless 不费力的<br>modularizing 模块化<br>globbing 通配符<br>splitting 分割<br>curly braces 大括号;花括号;大括弧;花括號<br>concatenation 串联<br>substitution 置换;取代;代换;代入<br>assigning 分配<br>syntax 语法</p>"},{"title":"读书笔记-置身事内","date":"2022-03-14T06:25:56.000Z","comments":1,"_content":"![](1.jpg)\n\n## 第一章 地方政府的权力和事务\n\n- 第一节 政府治理的特点\n    - 五级政府管理体系：中央-省-市-县区-乡镇\n    - **四套领导班子：党委、政府、人大、政协等，在五级政府下都完全复制**\n        - 条条块块：既有垂直的上下关系，又有横向的行政区划\n        - 如县教育局受上级的市教育局管辖，又受县市政府管辖\n    - 官僚体系\n        - 官员学习和贯彻统一的意识形态\n        - 由上级任命\n        - 地方官在多地轮流任职\n- 第二节 外部性和经济规模\n    - 公共服务\n        - 覆盖区域使用人数越多越好\n        - 行政区划的范围\n        - 边远地区是否有必要建设公共服务\n    - 人口密度\n        - 云南-腾冲线：43%东边面积占了94%人口\n        - 密度高的地方区划要小，密度低的地方区划要大\n        - 政策上会对城市群进行规划，以打破交界\n        - 人为划分意图消除边界不一定有好效果，主要还是受地理因素影响\n    - 行政交界处\n        - 交界处三不管，经济一般更差\n        - 边界处交通网路会更疏\n        - 环境问题，污染排向边界处\n        - 长期看，需要进行深化的市场化改革\n        - 中短期通过行政区划调整和都市圈\n- 第三节 复杂信息\n    - **实际权威来自信息优势**\n    - 下级具有信息优势\n    - 上级只有形式权威，办事最终还是要看下级意愿\n- 第四节 激励相容\n    - 专业性较强的部门一般受垂直上下级的约束较大，如海关，工商部门等\n    - 完全受垂直上下级管理，会减弱地方监管力度，因此需要平衡\n    - 中央做好约束，同时也让地方发挥更大的自治权\n- **第二至第四节就是事权划分的三大原则**\n- 第五节 招商引资\n    - 地方政府给予企业土地开发支持\n    - 地方政府给予企业金融支持\n    - 地方政府给予补贴和税收优惠\n    - 地方政府提供招工服务\n<!-- more -->    \n\n## 第二章 财税与政府行为\n\n- 第一节 分税制改革\n    - 财政包干 1985-1993\n        - 农村土地承包，城市企业承包，政府财政承包\n        - 地方根据实际进行不同形式的承包和分账\n            - 北京确定一个增长比例，超过部分归北京所有，没超过部分和中央55分账\n            - 广州按照1987年上缴的基数，每年递增9%归中央，剩余归自己\n            - 上海定额上缴，每年缴105亿\n        - 地方比较有动力增加财政收入，促进了企业的发展\n        - 地方财政收入增长较快，但是由于承包上缴，导致中央的财政收入增长很慢，造成中央政府很穷\n        - 地方也通过各种手段帮助企业减税，进一步导致中央收入变少\n        - 影响中央对于整体经济的调控\n    - 分税制改革\n        - 分为中央税、地方税、共享税\n        - 同时分设国税、地税两套机构，与地方财政部门脱钩\n        - 中央设立税收返还机制，防止地方税收急剧下降\n        - 改革后中央收入剧增，增强了宏观调控能力\n- 第二节 土地财政\n    - 招商引资\n        - 地方财政更喜欢重资产的制造业\n            - 投资规模大\n            - 增值税在生产环节增收，跟生产规模挂钩\n            - 制造业可以吸收低技能劳动力，并带动第三产业发展\n        - 重生产而轻环保，轻民生\n    - 土地公有制\n        - 城市土地归国家所有，农村土地归集体所有\n        - 农村土地要建设，必须先转为国有\n        - 土地转让金额随着城市化进展开始大幅增加\n    - 任期内政府过度借债导致下任政府难以为继\n- 第三节 纵向不平衡和横向不平衡\n    - 基层财政\n        - 落后地区的税收收入较低，导致政府很难展开工作\n        - **三农问题：农民苦，农村穷，农业危险**\n            - 统筹城乡发展\n            - 废除农业税\n            - 农村公共服务开支纳入国家财政\n            - 转移支付制度中加入激励机制，以精简政府机构\n            - 地方财政归上一级政府统筹，乡财县管\n            - 放权给县级政府，缩小城乡差距\n        - “乡财县管”和“省直管县”改革，只适用于浙江等发达地区，不发达地区效果不佳\n    - 地区间不平等\n        - 中央转移支付，使得落后地区的平均财政支出和发达地区差不多\n        - 一般转移支付：条件少，可以自行决定用途。导致越穷的地方拿到越多，影响创收动力。\n        - 专项转移支付：项目专项资金。由于发达地区更可能做好项目，导致发达地区拿到越多。\n\n## 第三章 政府投融资与债务\n\n- 第一节 城投公司与土地金融\n    - 地方政府不能从银行贷款，因此通过成立国资企业进行融资\n        - 持有政府的土地使用权，因此可以撬动银行贷款，快速扩展\n        - 盈利状况依赖政府补贴\n        - 可以获得政府担保，融资更容易\n    - 工业园区开发\n        - 一种由国企承当，投资大，盈利低，靠后期运营来实现盈利\n        - 一种由私企承当，通过开发房地产来反哺工业区实现盈利\n- 第二节 地方政府债务\n    - 城投公司，始于国开行\n    - 城商行由地方政府控制，和国开行相比\n        - 资金多来于中短期存款，风险较大\n        - 存款来源不稳定\n    - 地方债务水平\n        - 估计占gdp六成左右，虽然不低，但和美日相比依然不算多\n        - 低一级的政府以及落后地区债务风险大\n    - 债务治理\n        - 债务置换，用地方政府的公债替换融资公司的银行贷和城投债\n        - 推动融资平台转型，剥离为政府融资的功能\n        - 约束银行和金融机构的资金流入融资平台\n        - 对过度负债终身追责\n- 第三节 招商引资中的地方官员\n    - 官员政绩\n        - 经济发展是官员的主要政绩，因此新官上任都会大兴土木，导致城市规模虽然变大，但是整体效率较低\n        - 中央强调不已gdp作为政绩考核的主要指标\n        - 除了晋升和激励，内在的道德驱动也是官员的重要动力\n    - 腐败问题\n        - 近年来的腐败多与土地开发有关\n        - 腐败与经济高速发展长期并存\n        - 官商勾连腐败，政府将项目给关系户\n            - 长期偏重投资导致资本收入增长高于老百姓收入增长\n            - 扭曲投资和信贷资源配置，把大量资金浪费在效益不高的关系户项目上，推升债务负担和风险\n            - 扩大贫富差距\n            - 形成利益集团，不利于市场发展\n\n## 第四章 工业化中的政府角色\n\n- 第一节 京东方与政府投资\n    - 20世纪90年代，液晶屏巨头们联手抬高价格，垄断市场\n    - 京东方在此背景下获得了政府大量投资\n        - 初代时购买了价格峰值的液晶面板，在低谷时生产出了成品，导致大量亏损\n        - 改用股权融资：先向地方政府筹本金，不足部分再贷款\n        - 新的融资方式获得了更多资金，同时也赶来智能手机的爆发，获得了盈利\n    - 政府帮助本土企业进入复杂度很高的行业，充分利用其中的学习效应、规模效应和技术外溢效应\n    - 新兴制造业在地理上的集聚效应很强\n    - 政府扶持也吸引了一些并无技术实力和竞争力的小企业进入该行业，引发了对产能过剩的担忧\n- 第二节 光伏发展和政府补贴\n    - 2000 - 2010年，大量光伏企业获得政府补贴，急剧扩张\n    - 随着金融危机，以及成本高于煤电，光伏企业累积了大量的债务，导致倒闭\n    - 补贴电价下调，但是企业的技术积累和成本降幅依然快于补贴降幅，使得光伏迅猛发展\n    - 政府补贴造就了光伏的需求\n    - 政府补贴有助于新技术起步时的发展\n    - 产业政策要有推出机制\n        - 政策本身要有推出机制，如光电补贴逐步降低\n        - 低效企业破产退出的渠道要畅通\n        \n## 第五章 城市化与不平衡\n\n- 第一节 房价与居民债务\n    - 土地供需\n        - 现代经济集聚效应很强，经济活动及就业越来越向大城市集中\n        - 地区房价差异的主要原因是供需失衡\n        - 中国对建设用地指标实行严格管理，每年的新增指标由中央分配到省，再由省分配到地方\n        - 建设用地指标不能在全国交易，土地使用效率很难提高\n    - 欧美房价与居民债务\n        - 二战之前，欧美自有住房比例很低，大部分为租房\n        - 欧美自有住房比例上升后\n            - 房产在居民资产中的比例上升\n            - 政府开始降低卖房门槛和按揭比例\n        - 美国出于政治选票因素，大量房贷给低收入者买房，导致坏账变多，引发次贷危机\n            - 导致房价降低\n            - 进而抑制消费\n        - 房地产常被称作“经济周期之母”\n            - 银行可以通过按揭创造无限的购买力\n            - 不可再生的城市土地供给有限\n    - 我国房价与居民债务\n        - 2008年后，房价急速上升\n            - 居民债务负担上涨3倍多，占GDP的54%\n            - 平均债务约等于居民1.6倍年收入\n        - 影响消费\n    - 房价与居民债务风险\n        - 拉大各地的资产差距\n        - 消费下滲：刺激低收入者举债消费\n        - 借贷比例上升，影响未来收入增长，导致债务负担变重\n        - 负债率高更容易受到房价下跌的影响\n        - 我国的金融危机概率低\n            - 首付比例30%，不会如美国可以低到0\n            - 信贷资产没有层层嵌套，导致风险放大\n            - 资本账户管制，限制外国资产参与我国房市\n- 第二节 不平衡与要素市场改革\n    - 低收入者到发达城市是提高收入最简单的途径\n    - 地方政府偏重投资，收入分配偏向资本，降低劳动收入占比\n    - 需要平衡人均规模，而不是总体规模\n    - 关键要让劳动力自由流动\n        - 提高城市市场规模，分工细，使得低技能者也能有高收入\n        - 低技能者服务业支撑城市生活质量\n        - 城市规模的上升也能促进地区间的分工和流动\n    - 土地流转\n        - 2008年提出城乡统一的建设用地市场与国有土地享有平等权益\n        - 2015年试点三块地改革，即农村土地征收、集体经营性建设用地入市以及宅基地制度改革\n        - 2017年在租赁住房供需矛盾突出的超大和特大城市，开展集体建设用地上建设租赁住房试点\n        - 三条底线\n            - 土地公有制性质不变\n            - 耕地红线不突破\n            - 农民利益不受损\n    - 户籍改革\n        - 逐步取消农业户口和非农业户口差别\n        - 2019年发改委提出放宽各类城市落户限制\n        - 未来方向\n            - 建立健全城乡统一的建设用地市场\n            - 深化户籍制度改革\n            - 以经常居住地登记户口制度\n            - 基本公共服务与常住人口挂钩机制，推动公共资源按常住人口规模配置\n- 第三节 经济发展与贫富差距\n    - 全球贫困人口急剧下降，主要贡献来自于中国\n    - 70后，经济快速增长使得财富继承的重要性下降，个人更看重自己的劳动收入\n    - 80，90后，房价的上涨使得财富继承重要性上升，拉大贫富差距\n    - 隧道效应：经济增长放缓，对穷人的影响更大\n\n## 第六章 债务与风险\n\n- 第一节 债务与经济衰退\n    - 债务危机的爆发和蔓延非常迅速\n        - 负债率高的经济中，资产价格下降速度也更快\n        - 资产价格下跌引起信贷收缩，导致资金链断裂\n        - 债务常常将风险集中到承受能力最弱的穷人身上\n- 第二节 欧美债务的教训\n    - 布雷顿森林体系\n        - 各国货币以固定比例与美元挂钩\n        - 美元以固定比例与黄金挂钩\n        - 各国需要充足的外汇干预市场，防止汇率波动\n        - 因此国际资本流动规模不能太大，否则会冲破某些国家的外汇储备\n        - 因此要限制国内银行放贷，这样就能限制居民的进出口消费\n    - 自由化浪潮\n        - 各国实现浮动汇率\n        - 放松了贷款限制\n        - 银行危机风险加剧，在布雷顿森林体系下，1945-1970，只发生2次银行危机，自由化浪潮下，1980-2010发生了153次银行危机\n    - 金融危机源头\n        - 银行规模大，杠杆高\n        - 银行借进来的钱很多是短期的（比如活期存款），但贷出去的钱却大都是长期的（比如企业贷款），这种负债和资产的期限不匹配会带来流动性风险。\n        - 银行信贷大都和房地产有关，常常与土地和房产价值一同起落，放大经济波动\n        - 银行很少雪中送炭，却常常晴天送伞，繁荣时慷慨解囊、助推经济过热，衰退时却捂紧口袋、加剧经济下行\n        - 银行风险会传导到其他金融部门\n    - 不平衡问题\n        - 东亚贸易不平衡使得中国1997年金融危机中美元储备不足导致经济受损，因此之后大量买入美国国债\n        - 欧洲和美国贸易平衡，但是总量大，交易规模变大后，风险也变大\n        - 富人借债给穷人，拉大贫富差距\n    - 实体企业投资不足\n        - 投资流向了发展中国家\n        - 通信技术发展，使得资产涌入非失业和服务业\n        - 大企业规模越来越大，竞争性不足\n- 第三节 中国债务与风险\n    - 相比其他发展中国家，我国债务水平较低\n    - 债务累计过程\n        - 08年为应对金融危机，出台4万亿计划\n        - 降准降息，放宽信贷\n        - 10-11年，经济过热，通胀加剧\n        - 欧债危机爆发后，国内制造业吃紧，央行继续降准降息\n        - 15年股灾后，美国量化宽松，导致资本外流，人民币汇率降低\n        - 导致央行的进一步降准降息，带动房价上涨\n    - 企业债务\n        - 地方政府投资基建，投资回报率低\n        - 国进民退问题，国企快速扩张，效率却较低，提升整体债务负担\n        - 推进改革\n            - 推进国企混改，限制地方政府干预\n            - 加强金融监管，从源头上拧紧资金的水龙头\n            - 在要素市场上推行更加全面的改革，让市场力量在资金、土地、技术、劳动力等生产要素配置中发挥更大作用\n            - 改革和完善《企业破产法》，在债务重整过程中“去行政化”，避免地方官员主导企业破产重组，损害债权人利益\n        - 房地产债务占总体债务比重较大\n        - 优质抵押物或者政府担保，可以使得银行的借贷风险降低                                                \n        - 影子银行\n            - 银行通过卖理财产品筹得钱款\n            - 筹来的钱委托给信托公司  \n            - 信托公司将钱借给公司\n            - 理财产品不算银行储蓄，委托给信托公司的钱不算银行贷款，因此摆脱对银行的监管，成了影子银行\n        - 2018年资管新规出台，打压了影子银行，同时也打压了小企业的融资渠道\n- 第四节 化解债务危机\n    - 压缩支出的方式\n        - 收入减少是连锁反应，导致经济整体下行\n        - 债务负担可能反而上升\n        - 让债权人和债务人都痛苦\n    - 增发货币\n        - 08年金融危机前的主流做法\n        - 刺激投资和消费\n        - 温和的通货膨胀\n        - 没有明显的受损方\n    - **量化宽松**\n        - 金融危机后主流做法\n        - 增发货币买入资产，维持资产价值\n        - 相当于将其他地方的负债转移到央行\n        - 理论上央行可以无限印钱，所以可以无限消化负债\n        - 不会过度通货膨胀，因为其他地方挣了钱会优先还债，支出并没有显著增加\n        - 难以刺激消费，依然帮助了富人消化债务，拉大贫富差距\n    - 赤字货币化\n        - 政府加大财政支出去刺激经济，由财政部发债融资，央行直接印钱买过来，无需其他金融机构参与也无需支付利息\n        - 用无利率的货币替代有利率的债务，以政府预算收支的数量代替金融市场的价格（即利率）来调节经济资源配置\n        - 会引发物价飞涨的恶性通货膨胀（国民党的教训）\n    - 遏制新债务\n        - 围绕供给侧结构性改革所推行的一系列重大经济金融改革\n        - 资本市场改革，改变以银行贷款为主的间接融资体系，拓展直接融资渠道，既降低债务负担，也提高资金使用效率\n        - **我国债务风险的本质不是金融投机的风险，而是财政和资源分配机制的风险**\n\n## 第七章 国内国际失衡\n\n- 第一节 低消费与产能过剩\n    - 消费不足\n        - 2018年消费占gdp比重只有44%，而美国这一比例达到70%\n        - 从1980到2010年，消费比重从65%降到50%\n        - 居民可支配收入下降\n        - 居民储蓄率上升\n    - 高储蓄率\n        - 20世纪90年代储蓄率达到了25-30%，欧美这一比例一般在10%左右\n        - 计划生育导致下一代数量减少，养儿防老不可靠，导致需要存钱应对老年\n        - 政府民生支出不足\n        - 房价上升拉低消费，提高了储蓄\n    - 地方政府推动工业化的方式加速了资本份额的上升和劳动份额的下降\n    - 国民经济分配中居民占比下降，政府和企业的占比就必然上升\n    - 经济到一定阶段后，不再是任何投资都有回报\n        - 基础设施和工业体系已经比较完善， 投资难度加大\n        - 由于老百姓收入和消费不足，无法消化投资形成的产能，很多投资不能变成有效的收入，都浪费掉了，所以债务负担越积越重，带来了一系列风险\n        - 劳动收入份额下降和资本收入份额上升，会扩大贫富差距\n        - 由于消费不足和投资过剩，过剩产能必须向国外输出，输出产能会加重全球贸易失衡，引发贸易冲突\n    - **居民收入增长快于经济增长，居民收入份额才能提高**\n    - 过多的无用投资没带来收入，虽然gdp增长了，但是债务会积累，在未来爆发\n    - 对外贸易失衡也是内部结构失衡的延续\n- 第二节 中美贸易冲突\n    - 只要全世界还信任美元的价值，美国就可以源源不断地用美元去换取他国实际的产品和资源\n    - 美国所谓的中国制造抢走美国工作并不确切\n        - 美国制造业就业本身就一直在下降\n        - 制造业gdp占比一直很稳定，事实上是机器效率提高取代了人工\n    - 民粹主义和全球化情绪爆发，引发美国人对于贸易保护的倾向\n    - 制造业和科学领域，各项指标已经开始毕竟甚至赶超美国\n    - 工业制造是科学进步的基础\n- 第三节 **再平衡与国内大循环**\n    - 要提高居民收入，就要继续推进城市化，让人口向城市尤其是大城市集聚\n    - 从目前的技术发展和发达国家的经验看，制造业的进一步发展吸纳不了更多就业\n    - 改革的关键是转变地方政府在经济中扮演的角色，遏制其投资冲动，降低其生产性支出，加大民生支出\n    - 要提高居民收入，还要扩宽居民的财产性收入，发展各种直接融资渠道，让更多人有机会分享经济增长的果实，这就涉及金融体系和资本市场的改革\n    - “双循环”战略在强调“再平衡”和扩大国内大市场的同时，也强调了要扩大对外开放\n\n## 推荐阅读\n\n- 英国史学家艾伦的《全球经济史》（2015）\n- 乔治梅森大学戈德斯通的《为什么是欧洲？世界史视角下的西方崛起》（2010）\n- 哈佛大学弗里登的《20世纪全球资本主义的兴衰》（2017）\n- 西北大学戈登的《美国增长的起落》（2018）\n- 哈佛大学教授傅高义《邓小平时代》\n-《经济落后的历史透视》（格申克龙，2012）\n-《大转型：我们时代的政治与经济起源》（波兰尼，2020）","source":"_posts/read/读书笔记-置身事内.md","raw":"---\ntitle: 读书笔记-置身事内\ndate: 2022-03-14 14:25:56\ncomments: true\ncategories: \n- 读书笔记\n---\n![](1.jpg)\n\n## 第一章 地方政府的权力和事务\n\n- 第一节 政府治理的特点\n    - 五级政府管理体系：中央-省-市-县区-乡镇\n    - **四套领导班子：党委、政府、人大、政协等，在五级政府下都完全复制**\n        - 条条块块：既有垂直的上下关系，又有横向的行政区划\n        - 如县教育局受上级的市教育局管辖，又受县市政府管辖\n    - 官僚体系\n        - 官员学习和贯彻统一的意识形态\n        - 由上级任命\n        - 地方官在多地轮流任职\n- 第二节 外部性和经济规模\n    - 公共服务\n        - 覆盖区域使用人数越多越好\n        - 行政区划的范围\n        - 边远地区是否有必要建设公共服务\n    - 人口密度\n        - 云南-腾冲线：43%东边面积占了94%人口\n        - 密度高的地方区划要小，密度低的地方区划要大\n        - 政策上会对城市群进行规划，以打破交界\n        - 人为划分意图消除边界不一定有好效果，主要还是受地理因素影响\n    - 行政交界处\n        - 交界处三不管，经济一般更差\n        - 边界处交通网路会更疏\n        - 环境问题，污染排向边界处\n        - 长期看，需要进行深化的市场化改革\n        - 中短期通过行政区划调整和都市圈\n- 第三节 复杂信息\n    - **实际权威来自信息优势**\n    - 下级具有信息优势\n    - 上级只有形式权威，办事最终还是要看下级意愿\n- 第四节 激励相容\n    - 专业性较强的部门一般受垂直上下级的约束较大，如海关，工商部门等\n    - 完全受垂直上下级管理，会减弱地方监管力度，因此需要平衡\n    - 中央做好约束，同时也让地方发挥更大的自治权\n- **第二至第四节就是事权划分的三大原则**\n- 第五节 招商引资\n    - 地方政府给予企业土地开发支持\n    - 地方政府给予企业金融支持\n    - 地方政府给予补贴和税收优惠\n    - 地方政府提供招工服务\n<!-- more -->    \n\n## 第二章 财税与政府行为\n\n- 第一节 分税制改革\n    - 财政包干 1985-1993\n        - 农村土地承包，城市企业承包，政府财政承包\n        - 地方根据实际进行不同形式的承包和分账\n            - 北京确定一个增长比例，超过部分归北京所有，没超过部分和中央55分账\n            - 广州按照1987年上缴的基数，每年递增9%归中央，剩余归自己\n            - 上海定额上缴，每年缴105亿\n        - 地方比较有动力增加财政收入，促进了企业的发展\n        - 地方财政收入增长较快，但是由于承包上缴，导致中央的财政收入增长很慢，造成中央政府很穷\n        - 地方也通过各种手段帮助企业减税，进一步导致中央收入变少\n        - 影响中央对于整体经济的调控\n    - 分税制改革\n        - 分为中央税、地方税、共享税\n        - 同时分设国税、地税两套机构，与地方财政部门脱钩\n        - 中央设立税收返还机制，防止地方税收急剧下降\n        - 改革后中央收入剧增，增强了宏观调控能力\n- 第二节 土地财政\n    - 招商引资\n        - 地方财政更喜欢重资产的制造业\n            - 投资规模大\n            - 增值税在生产环节增收，跟生产规模挂钩\n            - 制造业可以吸收低技能劳动力，并带动第三产业发展\n        - 重生产而轻环保，轻民生\n    - 土地公有制\n        - 城市土地归国家所有，农村土地归集体所有\n        - 农村土地要建设，必须先转为国有\n        - 土地转让金额随着城市化进展开始大幅增加\n    - 任期内政府过度借债导致下任政府难以为继\n- 第三节 纵向不平衡和横向不平衡\n    - 基层财政\n        - 落后地区的税收收入较低，导致政府很难展开工作\n        - **三农问题：农民苦，农村穷，农业危险**\n            - 统筹城乡发展\n            - 废除农业税\n            - 农村公共服务开支纳入国家财政\n            - 转移支付制度中加入激励机制，以精简政府机构\n            - 地方财政归上一级政府统筹，乡财县管\n            - 放权给县级政府，缩小城乡差距\n        - “乡财县管”和“省直管县”改革，只适用于浙江等发达地区，不发达地区效果不佳\n    - 地区间不平等\n        - 中央转移支付，使得落后地区的平均财政支出和发达地区差不多\n        - 一般转移支付：条件少，可以自行决定用途。导致越穷的地方拿到越多，影响创收动力。\n        - 专项转移支付：项目专项资金。由于发达地区更可能做好项目，导致发达地区拿到越多。\n\n## 第三章 政府投融资与债务\n\n- 第一节 城投公司与土地金融\n    - 地方政府不能从银行贷款，因此通过成立国资企业进行融资\n        - 持有政府的土地使用权，因此可以撬动银行贷款，快速扩展\n        - 盈利状况依赖政府补贴\n        - 可以获得政府担保，融资更容易\n    - 工业园区开发\n        - 一种由国企承当，投资大，盈利低，靠后期运营来实现盈利\n        - 一种由私企承当，通过开发房地产来反哺工业区实现盈利\n- 第二节 地方政府债务\n    - 城投公司，始于国开行\n    - 城商行由地方政府控制，和国开行相比\n        - 资金多来于中短期存款，风险较大\n        - 存款来源不稳定\n    - 地方债务水平\n        - 估计占gdp六成左右，虽然不低，但和美日相比依然不算多\n        - 低一级的政府以及落后地区债务风险大\n    - 债务治理\n        - 债务置换，用地方政府的公债替换融资公司的银行贷和城投债\n        - 推动融资平台转型，剥离为政府融资的功能\n        - 约束银行和金融机构的资金流入融资平台\n        - 对过度负债终身追责\n- 第三节 招商引资中的地方官员\n    - 官员政绩\n        - 经济发展是官员的主要政绩，因此新官上任都会大兴土木，导致城市规模虽然变大，但是整体效率较低\n        - 中央强调不已gdp作为政绩考核的主要指标\n        - 除了晋升和激励，内在的道德驱动也是官员的重要动力\n    - 腐败问题\n        - 近年来的腐败多与土地开发有关\n        - 腐败与经济高速发展长期并存\n        - 官商勾连腐败，政府将项目给关系户\n            - 长期偏重投资导致资本收入增长高于老百姓收入增长\n            - 扭曲投资和信贷资源配置，把大量资金浪费在效益不高的关系户项目上，推升债务负担和风险\n            - 扩大贫富差距\n            - 形成利益集团，不利于市场发展\n\n## 第四章 工业化中的政府角色\n\n- 第一节 京东方与政府投资\n    - 20世纪90年代，液晶屏巨头们联手抬高价格，垄断市场\n    - 京东方在此背景下获得了政府大量投资\n        - 初代时购买了价格峰值的液晶面板，在低谷时生产出了成品，导致大量亏损\n        - 改用股权融资：先向地方政府筹本金，不足部分再贷款\n        - 新的融资方式获得了更多资金，同时也赶来智能手机的爆发，获得了盈利\n    - 政府帮助本土企业进入复杂度很高的行业，充分利用其中的学习效应、规模效应和技术外溢效应\n    - 新兴制造业在地理上的集聚效应很强\n    - 政府扶持也吸引了一些并无技术实力和竞争力的小企业进入该行业，引发了对产能过剩的担忧\n- 第二节 光伏发展和政府补贴\n    - 2000 - 2010年，大量光伏企业获得政府补贴，急剧扩张\n    - 随着金融危机，以及成本高于煤电，光伏企业累积了大量的债务，导致倒闭\n    - 补贴电价下调，但是企业的技术积累和成本降幅依然快于补贴降幅，使得光伏迅猛发展\n    - 政府补贴造就了光伏的需求\n    - 政府补贴有助于新技术起步时的发展\n    - 产业政策要有推出机制\n        - 政策本身要有推出机制，如光电补贴逐步降低\n        - 低效企业破产退出的渠道要畅通\n        \n## 第五章 城市化与不平衡\n\n- 第一节 房价与居民债务\n    - 土地供需\n        - 现代经济集聚效应很强，经济活动及就业越来越向大城市集中\n        - 地区房价差异的主要原因是供需失衡\n        - 中国对建设用地指标实行严格管理，每年的新增指标由中央分配到省，再由省分配到地方\n        - 建设用地指标不能在全国交易，土地使用效率很难提高\n    - 欧美房价与居民债务\n        - 二战之前，欧美自有住房比例很低，大部分为租房\n        - 欧美自有住房比例上升后\n            - 房产在居民资产中的比例上升\n            - 政府开始降低卖房门槛和按揭比例\n        - 美国出于政治选票因素，大量房贷给低收入者买房，导致坏账变多，引发次贷危机\n            - 导致房价降低\n            - 进而抑制消费\n        - 房地产常被称作“经济周期之母”\n            - 银行可以通过按揭创造无限的购买力\n            - 不可再生的城市土地供给有限\n    - 我国房价与居民债务\n        - 2008年后，房价急速上升\n            - 居民债务负担上涨3倍多，占GDP的54%\n            - 平均债务约等于居民1.6倍年收入\n        - 影响消费\n    - 房价与居民债务风险\n        - 拉大各地的资产差距\n        - 消费下滲：刺激低收入者举债消费\n        - 借贷比例上升，影响未来收入增长，导致债务负担变重\n        - 负债率高更容易受到房价下跌的影响\n        - 我国的金融危机概率低\n            - 首付比例30%，不会如美国可以低到0\n            - 信贷资产没有层层嵌套，导致风险放大\n            - 资本账户管制，限制外国资产参与我国房市\n- 第二节 不平衡与要素市场改革\n    - 低收入者到发达城市是提高收入最简单的途径\n    - 地方政府偏重投资，收入分配偏向资本，降低劳动收入占比\n    - 需要平衡人均规模，而不是总体规模\n    - 关键要让劳动力自由流动\n        - 提高城市市场规模，分工细，使得低技能者也能有高收入\n        - 低技能者服务业支撑城市生活质量\n        - 城市规模的上升也能促进地区间的分工和流动\n    - 土地流转\n        - 2008年提出城乡统一的建设用地市场与国有土地享有平等权益\n        - 2015年试点三块地改革，即农村土地征收、集体经营性建设用地入市以及宅基地制度改革\n        - 2017年在租赁住房供需矛盾突出的超大和特大城市，开展集体建设用地上建设租赁住房试点\n        - 三条底线\n            - 土地公有制性质不变\n            - 耕地红线不突破\n            - 农民利益不受损\n    - 户籍改革\n        - 逐步取消农业户口和非农业户口差别\n        - 2019年发改委提出放宽各类城市落户限制\n        - 未来方向\n            - 建立健全城乡统一的建设用地市场\n            - 深化户籍制度改革\n            - 以经常居住地登记户口制度\n            - 基本公共服务与常住人口挂钩机制，推动公共资源按常住人口规模配置\n- 第三节 经济发展与贫富差距\n    - 全球贫困人口急剧下降，主要贡献来自于中国\n    - 70后，经济快速增长使得财富继承的重要性下降，个人更看重自己的劳动收入\n    - 80，90后，房价的上涨使得财富继承重要性上升，拉大贫富差距\n    - 隧道效应：经济增长放缓，对穷人的影响更大\n\n## 第六章 债务与风险\n\n- 第一节 债务与经济衰退\n    - 债务危机的爆发和蔓延非常迅速\n        - 负债率高的经济中，资产价格下降速度也更快\n        - 资产价格下跌引起信贷收缩，导致资金链断裂\n        - 债务常常将风险集中到承受能力最弱的穷人身上\n- 第二节 欧美债务的教训\n    - 布雷顿森林体系\n        - 各国货币以固定比例与美元挂钩\n        - 美元以固定比例与黄金挂钩\n        - 各国需要充足的外汇干预市场，防止汇率波动\n        - 因此国际资本流动规模不能太大，否则会冲破某些国家的外汇储备\n        - 因此要限制国内银行放贷，这样就能限制居民的进出口消费\n    - 自由化浪潮\n        - 各国实现浮动汇率\n        - 放松了贷款限制\n        - 银行危机风险加剧，在布雷顿森林体系下，1945-1970，只发生2次银行危机，自由化浪潮下，1980-2010发生了153次银行危机\n    - 金融危机源头\n        - 银行规模大，杠杆高\n        - 银行借进来的钱很多是短期的（比如活期存款），但贷出去的钱却大都是长期的（比如企业贷款），这种负债和资产的期限不匹配会带来流动性风险。\n        - 银行信贷大都和房地产有关，常常与土地和房产价值一同起落，放大经济波动\n        - 银行很少雪中送炭，却常常晴天送伞，繁荣时慷慨解囊、助推经济过热，衰退时却捂紧口袋、加剧经济下行\n        - 银行风险会传导到其他金融部门\n    - 不平衡问题\n        - 东亚贸易不平衡使得中国1997年金融危机中美元储备不足导致经济受损，因此之后大量买入美国国债\n        - 欧洲和美国贸易平衡，但是总量大，交易规模变大后，风险也变大\n        - 富人借债给穷人，拉大贫富差距\n    - 实体企业投资不足\n        - 投资流向了发展中国家\n        - 通信技术发展，使得资产涌入非失业和服务业\n        - 大企业规模越来越大，竞争性不足\n- 第三节 中国债务与风险\n    - 相比其他发展中国家，我国债务水平较低\n    - 债务累计过程\n        - 08年为应对金融危机，出台4万亿计划\n        - 降准降息，放宽信贷\n        - 10-11年，经济过热，通胀加剧\n        - 欧债危机爆发后，国内制造业吃紧，央行继续降准降息\n        - 15年股灾后，美国量化宽松，导致资本外流，人民币汇率降低\n        - 导致央行的进一步降准降息，带动房价上涨\n    - 企业债务\n        - 地方政府投资基建，投资回报率低\n        - 国进民退问题，国企快速扩张，效率却较低，提升整体债务负担\n        - 推进改革\n            - 推进国企混改，限制地方政府干预\n            - 加强金融监管，从源头上拧紧资金的水龙头\n            - 在要素市场上推行更加全面的改革，让市场力量在资金、土地、技术、劳动力等生产要素配置中发挥更大作用\n            - 改革和完善《企业破产法》，在债务重整过程中“去行政化”，避免地方官员主导企业破产重组，损害债权人利益\n        - 房地产债务占总体债务比重较大\n        - 优质抵押物或者政府担保，可以使得银行的借贷风险降低                                                \n        - 影子银行\n            - 银行通过卖理财产品筹得钱款\n            - 筹来的钱委托给信托公司  \n            - 信托公司将钱借给公司\n            - 理财产品不算银行储蓄，委托给信托公司的钱不算银行贷款，因此摆脱对银行的监管，成了影子银行\n        - 2018年资管新规出台，打压了影子银行，同时也打压了小企业的融资渠道\n- 第四节 化解债务危机\n    - 压缩支出的方式\n        - 收入减少是连锁反应，导致经济整体下行\n        - 债务负担可能反而上升\n        - 让债权人和债务人都痛苦\n    - 增发货币\n        - 08年金融危机前的主流做法\n        - 刺激投资和消费\n        - 温和的通货膨胀\n        - 没有明显的受损方\n    - **量化宽松**\n        - 金融危机后主流做法\n        - 增发货币买入资产，维持资产价值\n        - 相当于将其他地方的负债转移到央行\n        - 理论上央行可以无限印钱，所以可以无限消化负债\n        - 不会过度通货膨胀，因为其他地方挣了钱会优先还债，支出并没有显著增加\n        - 难以刺激消费，依然帮助了富人消化债务，拉大贫富差距\n    - 赤字货币化\n        - 政府加大财政支出去刺激经济，由财政部发债融资，央行直接印钱买过来，无需其他金融机构参与也无需支付利息\n        - 用无利率的货币替代有利率的债务，以政府预算收支的数量代替金融市场的价格（即利率）来调节经济资源配置\n        - 会引发物价飞涨的恶性通货膨胀（国民党的教训）\n    - 遏制新债务\n        - 围绕供给侧结构性改革所推行的一系列重大经济金融改革\n        - 资本市场改革，改变以银行贷款为主的间接融资体系，拓展直接融资渠道，既降低债务负担，也提高资金使用效率\n        - **我国债务风险的本质不是金融投机的风险，而是财政和资源分配机制的风险**\n\n## 第七章 国内国际失衡\n\n- 第一节 低消费与产能过剩\n    - 消费不足\n        - 2018年消费占gdp比重只有44%，而美国这一比例达到70%\n        - 从1980到2010年，消费比重从65%降到50%\n        - 居民可支配收入下降\n        - 居民储蓄率上升\n    - 高储蓄率\n        - 20世纪90年代储蓄率达到了25-30%，欧美这一比例一般在10%左右\n        - 计划生育导致下一代数量减少，养儿防老不可靠，导致需要存钱应对老年\n        - 政府民生支出不足\n        - 房价上升拉低消费，提高了储蓄\n    - 地方政府推动工业化的方式加速了资本份额的上升和劳动份额的下降\n    - 国民经济分配中居民占比下降，政府和企业的占比就必然上升\n    - 经济到一定阶段后，不再是任何投资都有回报\n        - 基础设施和工业体系已经比较完善， 投资难度加大\n        - 由于老百姓收入和消费不足，无法消化投资形成的产能，很多投资不能变成有效的收入，都浪费掉了，所以债务负担越积越重，带来了一系列风险\n        - 劳动收入份额下降和资本收入份额上升，会扩大贫富差距\n        - 由于消费不足和投资过剩，过剩产能必须向国外输出，输出产能会加重全球贸易失衡，引发贸易冲突\n    - **居民收入增长快于经济增长，居民收入份额才能提高**\n    - 过多的无用投资没带来收入，虽然gdp增长了，但是债务会积累，在未来爆发\n    - 对外贸易失衡也是内部结构失衡的延续\n- 第二节 中美贸易冲突\n    - 只要全世界还信任美元的价值，美国就可以源源不断地用美元去换取他国实际的产品和资源\n    - 美国所谓的中国制造抢走美国工作并不确切\n        - 美国制造业就业本身就一直在下降\n        - 制造业gdp占比一直很稳定，事实上是机器效率提高取代了人工\n    - 民粹主义和全球化情绪爆发，引发美国人对于贸易保护的倾向\n    - 制造业和科学领域，各项指标已经开始毕竟甚至赶超美国\n    - 工业制造是科学进步的基础\n- 第三节 **再平衡与国内大循环**\n    - 要提高居民收入，就要继续推进城市化，让人口向城市尤其是大城市集聚\n    - 从目前的技术发展和发达国家的经验看，制造业的进一步发展吸纳不了更多就业\n    - 改革的关键是转变地方政府在经济中扮演的角色，遏制其投资冲动，降低其生产性支出，加大民生支出\n    - 要提高居民收入，还要扩宽居民的财产性收入，发展各种直接融资渠道，让更多人有机会分享经济增长的果实，这就涉及金融体系和资本市场的改革\n    - “双循环”战略在强调“再平衡”和扩大国内大市场的同时，也强调了要扩大对外开放\n\n## 推荐阅读\n\n- 英国史学家艾伦的《全球经济史》（2015）\n- 乔治梅森大学戈德斯通的《为什么是欧洲？世界史视角下的西方崛起》（2010）\n- 哈佛大学弗里登的《20世纪全球资本主义的兴衰》（2017）\n- 西北大学戈登的《美国增长的起落》（2018）\n- 哈佛大学教授傅高义《邓小平时代》\n-《经济落后的历史透视》（格申克龙，2012）\n-《大转型：我们时代的政治与经济起源》（波兰尼，2020）","slug":"read/读书笔记-置身事内","published":1,"updated":"2022-03-18T06:04:48.000Z","_id":"cl103087z002vtccf1orv7ch8","layout":"post","photos":[],"link":"","content":"<p><img src=\"/2022/03/14/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/1.jpg\"></p>\n<h2 id=\"第一章-地方政府的权力和事务\"><a href=\"#第一章-地方政府的权力和事务\" class=\"headerlink\" title=\"第一章 地方政府的权力和事务\"></a>第一章 地方政府的权力和事务</h2><ul>\n<li>第一节 政府治理的特点<ul>\n<li>五级政府管理体系：中央-省-市-县区-乡镇</li>\n<li><strong>四套领导班子：党委、政府、人大、政协等，在五级政府下都完全复制</strong><ul>\n<li>条条块块：既有垂直的上下关系，又有横向的行政区划</li>\n<li>如县教育局受上级的市教育局管辖，又受县市政府管辖</li>\n</ul>\n</li>\n<li>官僚体系<ul>\n<li>官员学习和贯彻统一的意识形态</li>\n<li>由上级任命</li>\n<li>地方官在多地轮流任职</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 外部性和经济规模<ul>\n<li>公共服务<ul>\n<li>覆盖区域使用人数越多越好</li>\n<li>行政区划的范围</li>\n<li>边远地区是否有必要建设公共服务</li>\n</ul>\n</li>\n<li>人口密度<ul>\n<li>云南-腾冲线：43%东边面积占了94%人口</li>\n<li>密度高的地方区划要小，密度低的地方区划要大</li>\n<li>政策上会对城市群进行规划，以打破交界</li>\n<li>人为划分意图消除边界不一定有好效果，主要还是受地理因素影响</li>\n</ul>\n</li>\n<li>行政交界处<ul>\n<li>交界处三不管，经济一般更差</li>\n<li>边界处交通网路会更疏</li>\n<li>环境问题，污染排向边界处</li>\n<li>长期看，需要进行深化的市场化改革</li>\n<li>中短期通过行政区划调整和都市圈</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 复杂信息<ul>\n<li><strong>实际权威来自信息优势</strong></li>\n<li>下级具有信息优势</li>\n<li>上级只有形式权威，办事最终还是要看下级意愿</li>\n</ul>\n</li>\n<li>第四节 激励相容<ul>\n<li>专业性较强的部门一般受垂直上下级的约束较大，如海关，工商部门等</li>\n<li>完全受垂直上下级管理，会减弱地方监管力度，因此需要平衡</li>\n<li>中央做好约束，同时也让地方发挥更大的自治权</li>\n</ul>\n</li>\n<li><strong>第二至第四节就是事权划分的三大原则</strong></li>\n<li>第五节 招商引资<ul>\n<li>地方政府给予企业土地开发支持</li>\n<li>地方政府给予企业金融支持</li>\n<li>地方政府给予补贴和税收优惠</li>\n<li>地方政府提供招工服务<span id=\"more\"></span>    </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章-财税与政府行为\"><a href=\"#第二章-财税与政府行为\" class=\"headerlink\" title=\"第二章 财税与政府行为\"></a>第二章 财税与政府行为</h2><ul>\n<li>第一节 分税制改革<ul>\n<li>财政包干 1985-1993<ul>\n<li>农村土地承包，城市企业承包，政府财政承包</li>\n<li>地方根据实际进行不同形式的承包和分账<ul>\n<li>北京确定一个增长比例，超过部分归北京所有，没超过部分和中央55分账</li>\n<li>广州按照1987年上缴的基数，每年递增9%归中央，剩余归自己</li>\n<li>上海定额上缴，每年缴105亿</li>\n</ul>\n</li>\n<li>地方比较有动力增加财政收入，促进了企业的发展</li>\n<li>地方财政收入增长较快，但是由于承包上缴，导致中央的财政收入增长很慢，造成中央政府很穷</li>\n<li>地方也通过各种手段帮助企业减税，进一步导致中央收入变少</li>\n<li>影响中央对于整体经济的调控</li>\n</ul>\n</li>\n<li>分税制改革<ul>\n<li>分为中央税、地方税、共享税</li>\n<li>同时分设国税、地税两套机构，与地方财政部门脱钩</li>\n<li>中央设立税收返还机制，防止地方税收急剧下降</li>\n<li>改革后中央收入剧增，增强了宏观调控能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 土地财政<ul>\n<li>招商引资<ul>\n<li>地方财政更喜欢重资产的制造业<ul>\n<li>投资规模大</li>\n<li>增值税在生产环节增收，跟生产规模挂钩</li>\n<li>制造业可以吸收低技能劳动力，并带动第三产业发展</li>\n</ul>\n</li>\n<li>重生产而轻环保，轻民生</li>\n</ul>\n</li>\n<li>土地公有制<ul>\n<li>城市土地归国家所有，农村土地归集体所有</li>\n<li>农村土地要建设，必须先转为国有</li>\n<li>土地转让金额随着城市化进展开始大幅增加</li>\n</ul>\n</li>\n<li>任期内政府过度借债导致下任政府难以为继</li>\n</ul>\n</li>\n<li>第三节 纵向不平衡和横向不平衡<ul>\n<li>基层财政<ul>\n<li>落后地区的税收收入较低，导致政府很难展开工作</li>\n<li><strong>三农问题：农民苦，农村穷，农业危险</strong><ul>\n<li>统筹城乡发展</li>\n<li>废除农业税</li>\n<li>农村公共服务开支纳入国家财政</li>\n<li>转移支付制度中加入激励机制，以精简政府机构</li>\n<li>地方财政归上一级政府统筹，乡财县管</li>\n<li>放权给县级政府，缩小城乡差距</li>\n</ul>\n</li>\n<li>“乡财县管”和“省直管县”改革，只适用于浙江等发达地区，不发达地区效果不佳</li>\n</ul>\n</li>\n<li>地区间不平等<ul>\n<li>中央转移支付，使得落后地区的平均财政支出和发达地区差不多</li>\n<li>一般转移支付：条件少，可以自行决定用途。导致越穷的地方拿到越多，影响创收动力。</li>\n<li>专项转移支付：项目专项资金。由于发达地区更可能做好项目，导致发达地区拿到越多。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-政府投融资与债务\"><a href=\"#第三章-政府投融资与债务\" class=\"headerlink\" title=\"第三章 政府投融资与债务\"></a>第三章 政府投融资与债务</h2><ul>\n<li>第一节 城投公司与土地金融<ul>\n<li>地方政府不能从银行贷款，因此通过成立国资企业进行融资<ul>\n<li>持有政府的土地使用权，因此可以撬动银行贷款，快速扩展</li>\n<li>盈利状况依赖政府补贴</li>\n<li>可以获得政府担保，融资更容易</li>\n</ul>\n</li>\n<li>工业园区开发<ul>\n<li>一种由国企承当，投资大，盈利低，靠后期运营来实现盈利</li>\n<li>一种由私企承当，通过开发房地产来反哺工业区实现盈利</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 地方政府债务<ul>\n<li>城投公司，始于国开行</li>\n<li>城商行由地方政府控制，和国开行相比<ul>\n<li>资金多来于中短期存款，风险较大</li>\n<li>存款来源不稳定</li>\n</ul>\n</li>\n<li>地方债务水平<ul>\n<li>估计占gdp六成左右，虽然不低，但和美日相比依然不算多</li>\n<li>低一级的政府以及落后地区债务风险大</li>\n</ul>\n</li>\n<li>债务治理<ul>\n<li>债务置换，用地方政府的公债替换融资公司的银行贷和城投债</li>\n<li>推动融资平台转型，剥离为政府融资的功能</li>\n<li>约束银行和金融机构的资金流入融资平台</li>\n<li>对过度负债终身追责</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 招商引资中的地方官员<ul>\n<li>官员政绩<ul>\n<li>经济发展是官员的主要政绩，因此新官上任都会大兴土木，导致城市规模虽然变大，但是整体效率较低</li>\n<li>中央强调不已gdp作为政绩考核的主要指标</li>\n<li>除了晋升和激励，内在的道德驱动也是官员的重要动力</li>\n</ul>\n</li>\n<li>腐败问题<ul>\n<li>近年来的腐败多与土地开发有关</li>\n<li>腐败与经济高速发展长期并存</li>\n<li>官商勾连腐败，政府将项目给关系户<ul>\n<li>长期偏重投资导致资本收入增长高于老百姓收入增长</li>\n<li>扭曲投资和信贷资源配置，把大量资金浪费在效益不高的关系户项目上，推升债务负担和风险</li>\n<li>扩大贫富差距</li>\n<li>形成利益集团，不利于市场发展</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-工业化中的政府角色\"><a href=\"#第四章-工业化中的政府角色\" class=\"headerlink\" title=\"第四章 工业化中的政府角色\"></a>第四章 工业化中的政府角色</h2><ul>\n<li>第一节 京东方与政府投资<ul>\n<li>20世纪90年代，液晶屏巨头们联手抬高价格，垄断市场</li>\n<li>京东方在此背景下获得了政府大量投资<ul>\n<li>初代时购买了价格峰值的液晶面板，在低谷时生产出了成品，导致大量亏损</li>\n<li>改用股权融资：先向地方政府筹本金，不足部分再贷款</li>\n<li>新的融资方式获得了更多资金，同时也赶来智能手机的爆发，获得了盈利</li>\n</ul>\n</li>\n<li>政府帮助本土企业进入复杂度很高的行业，充分利用其中的学习效应、规模效应和技术外溢效应</li>\n<li>新兴制造业在地理上的集聚效应很强</li>\n<li>政府扶持也吸引了一些并无技术实力和竞争力的小企业进入该行业，引发了对产能过剩的担忧</li>\n</ul>\n</li>\n<li>第二节 光伏发展和政府补贴<ul>\n<li>2000 - 2010年，大量光伏企业获得政府补贴，急剧扩张</li>\n<li>随着金融危机，以及成本高于煤电，光伏企业累积了大量的债务，导致倒闭</li>\n<li>补贴电价下调，但是企业的技术积累和成本降幅依然快于补贴降幅，使得光伏迅猛发展</li>\n<li>政府补贴造就了光伏的需求</li>\n<li>政府补贴有助于新技术起步时的发展</li>\n<li>产业政策要有推出机制<ul>\n<li>政策本身要有推出机制，如光电补贴逐步降低</li>\n<li>低效企业破产退出的渠道要畅通</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-城市化与不平衡\"><a href=\"#第五章-城市化与不平衡\" class=\"headerlink\" title=\"第五章 城市化与不平衡\"></a>第五章 城市化与不平衡</h2><ul>\n<li>第一节 房价与居民债务<ul>\n<li>土地供需<ul>\n<li>现代经济集聚效应很强，经济活动及就业越来越向大城市集中</li>\n<li>地区房价差异的主要原因是供需失衡</li>\n<li>中国对建设用地指标实行严格管理，每年的新增指标由中央分配到省，再由省分配到地方</li>\n<li>建设用地指标不能在全国交易，土地使用效率很难提高</li>\n</ul>\n</li>\n<li>欧美房价与居民债务<ul>\n<li>二战之前，欧美自有住房比例很低，大部分为租房</li>\n<li>欧美自有住房比例上升后<ul>\n<li>房产在居民资产中的比例上升</li>\n<li>政府开始降低卖房门槛和按揭比例</li>\n</ul>\n</li>\n<li>美国出于政治选票因素，大量房贷给低收入者买房，导致坏账变多，引发次贷危机<ul>\n<li>导致房价降低</li>\n<li>进而抑制消费</li>\n</ul>\n</li>\n<li>房地产常被称作“经济周期之母”<ul>\n<li>银行可以通过按揭创造无限的购买力</li>\n<li>不可再生的城市土地供给有限</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>我国房价与居民债务<ul>\n<li>2008年后，房价急速上升<ul>\n<li>居民债务负担上涨3倍多，占GDP的54%</li>\n<li>平均债务约等于居民1.6倍年收入</li>\n</ul>\n</li>\n<li>影响消费</li>\n</ul>\n</li>\n<li>房价与居民债务风险<ul>\n<li>拉大各地的资产差距</li>\n<li>消费下滲：刺激低收入者举债消费</li>\n<li>借贷比例上升，影响未来收入增长，导致债务负担变重</li>\n<li>负债率高更容易受到房价下跌的影响</li>\n<li>我国的金融危机概率低<ul>\n<li>首付比例30%，不会如美国可以低到0</li>\n<li>信贷资产没有层层嵌套，导致风险放大</li>\n<li>资本账户管制，限制外国资产参与我国房市</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 不平衡与要素市场改革<ul>\n<li>低收入者到发达城市是提高收入最简单的途径</li>\n<li>地方政府偏重投资，收入分配偏向资本，降低劳动收入占比</li>\n<li>需要平衡人均规模，而不是总体规模</li>\n<li>关键要让劳动力自由流动<ul>\n<li>提高城市市场规模，分工细，使得低技能者也能有高收入</li>\n<li>低技能者服务业支撑城市生活质量</li>\n<li>城市规模的上升也能促进地区间的分工和流动</li>\n</ul>\n</li>\n<li>土地流转<ul>\n<li>2008年提出城乡统一的建设用地市场与国有土地享有平等权益</li>\n<li>2015年试点三块地改革，即农村土地征收、集体经营性建设用地入市以及宅基地制度改革</li>\n<li>2017年在租赁住房供需矛盾突出的超大和特大城市，开展集体建设用地上建设租赁住房试点</li>\n<li>三条底线<ul>\n<li>土地公有制性质不变</li>\n<li>耕地红线不突破</li>\n<li>农民利益不受损</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>户籍改革<ul>\n<li>逐步取消农业户口和非农业户口差别</li>\n<li>2019年发改委提出放宽各类城市落户限制</li>\n<li>未来方向<ul>\n<li>建立健全城乡统一的建设用地市场</li>\n<li>深化户籍制度改革</li>\n<li>以经常居住地登记户口制度</li>\n<li>基本公共服务与常住人口挂钩机制，推动公共资源按常住人口规模配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 经济发展与贫富差距<ul>\n<li>全球贫困人口急剧下降，主要贡献来自于中国</li>\n<li>70后，经济快速增长使得财富继承的重要性下降，个人更看重自己的劳动收入</li>\n<li>80，90后，房价的上涨使得财富继承重要性上升，拉大贫富差距</li>\n<li>隧道效应：经济增长放缓，对穷人的影响更大</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-债务与风险\"><a href=\"#第六章-债务与风险\" class=\"headerlink\" title=\"第六章 债务与风险\"></a>第六章 债务与风险</h2><ul>\n<li>第一节 债务与经济衰退<ul>\n<li>债务危机的爆发和蔓延非常迅速<ul>\n<li>负债率高的经济中，资产价格下降速度也更快</li>\n<li>资产价格下跌引起信贷收缩，导致资金链断裂</li>\n<li>债务常常将风险集中到承受能力最弱的穷人身上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 欧美债务的教训<ul>\n<li>布雷顿森林体系<ul>\n<li>各国货币以固定比例与美元挂钩</li>\n<li>美元以固定比例与黄金挂钩</li>\n<li>各国需要充足的外汇干预市场，防止汇率波动</li>\n<li>因此国际资本流动规模不能太大，否则会冲破某些国家的外汇储备</li>\n<li>因此要限制国内银行放贷，这样就能限制居民的进出口消费</li>\n</ul>\n</li>\n<li>自由化浪潮<ul>\n<li>各国实现浮动汇率</li>\n<li>放松了贷款限制</li>\n<li>银行危机风险加剧，在布雷顿森林体系下，1945-1970，只发生2次银行危机，自由化浪潮下，1980-2010发生了153次银行危机</li>\n</ul>\n</li>\n<li>金融危机源头<ul>\n<li>银行规模大，杠杆高</li>\n<li>银行借进来的钱很多是短期的（比如活期存款），但贷出去的钱却大都是长期的（比如企业贷款），这种负债和资产的期限不匹配会带来流动性风险。</li>\n<li>银行信贷大都和房地产有关，常常与土地和房产价值一同起落，放大经济波动</li>\n<li>银行很少雪中送炭，却常常晴天送伞，繁荣时慷慨解囊、助推经济过热，衰退时却捂紧口袋、加剧经济下行</li>\n<li>银行风险会传导到其他金融部门</li>\n</ul>\n</li>\n<li>不平衡问题<ul>\n<li>东亚贸易不平衡使得中国1997年金融危机中美元储备不足导致经济受损，因此之后大量买入美国国债</li>\n<li>欧洲和美国贸易平衡，但是总量大，交易规模变大后，风险也变大</li>\n<li>富人借债给穷人，拉大贫富差距</li>\n</ul>\n</li>\n<li>实体企业投资不足<ul>\n<li>投资流向了发展中国家</li>\n<li>通信技术发展，使得资产涌入非失业和服务业</li>\n<li>大企业规模越来越大，竞争性不足</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 中国债务与风险<ul>\n<li>相比其他发展中国家，我国债务水平较低</li>\n<li>债务累计过程<ul>\n<li>08年为应对金融危机，出台4万亿计划</li>\n<li>降准降息，放宽信贷</li>\n<li>10-11年，经济过热，通胀加剧</li>\n<li>欧债危机爆发后，国内制造业吃紧，央行继续降准降息</li>\n<li>15年股灾后，美国量化宽松，导致资本外流，人民币汇率降低</li>\n<li>导致央行的进一步降准降息，带动房价上涨</li>\n</ul>\n</li>\n<li>企业债务<ul>\n<li>地方政府投资基建，投资回报率低</li>\n<li>国进民退问题，国企快速扩张，效率却较低，提升整体债务负担</li>\n<li>推进改革<ul>\n<li>推进国企混改，限制地方政府干预</li>\n<li>加强金融监管，从源头上拧紧资金的水龙头</li>\n<li>在要素市场上推行更加全面的改革，让市场力量在资金、土地、技术、劳动力等生产要素配置中发挥更大作用</li>\n<li>改革和完善《企业破产法》，在债务重整过程中“去行政化”，避免地方官员主导企业破产重组，损害债权人利益</li>\n</ul>\n</li>\n<li>房地产债务占总体债务比重较大</li>\n<li>优质抵押物或者政府担保，可以使得银行的借贷风险降低                                                </li>\n<li>影子银行<ul>\n<li>银行通过卖理财产品筹得钱款</li>\n<li>筹来的钱委托给信托公司  </li>\n<li>信托公司将钱借给公司</li>\n<li>理财产品不算银行储蓄，委托给信托公司的钱不算银行贷款，因此摆脱对银行的监管，成了影子银行</li>\n</ul>\n</li>\n<li>2018年资管新规出台，打压了影子银行，同时也打压了小企业的融资渠道</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第四节 化解债务危机<ul>\n<li>压缩支出的方式<ul>\n<li>收入减少是连锁反应，导致经济整体下行</li>\n<li>债务负担可能反而上升</li>\n<li>让债权人和债务人都痛苦</li>\n</ul>\n</li>\n<li>增发货币<ul>\n<li>08年金融危机前的主流做法</li>\n<li>刺激投资和消费</li>\n<li>温和的通货膨胀</li>\n<li>没有明显的受损方</li>\n</ul>\n</li>\n<li><strong>量化宽松</strong><ul>\n<li>金融危机后主流做法</li>\n<li>增发货币买入资产，维持资产价值</li>\n<li>相当于将其他地方的负债转移到央行</li>\n<li>理论上央行可以无限印钱，所以可以无限消化负债</li>\n<li>不会过度通货膨胀，因为其他地方挣了钱会优先还债，支出并没有显著增加</li>\n<li>难以刺激消费，依然帮助了富人消化债务，拉大贫富差距</li>\n</ul>\n</li>\n<li>赤字货币化<ul>\n<li>政府加大财政支出去刺激经济，由财政部发债融资，央行直接印钱买过来，无需其他金融机构参与也无需支付利息</li>\n<li>用无利率的货币替代有利率的债务，以政府预算收支的数量代替金融市场的价格（即利率）来调节经济资源配置</li>\n<li>会引发物价飞涨的恶性通货膨胀（国民党的教训）</li>\n</ul>\n</li>\n<li>遏制新债务<ul>\n<li>围绕供给侧结构性改革所推行的一系列重大经济金融改革</li>\n<li>资本市场改革，改变以银行贷款为主的间接融资体系，拓展直接融资渠道，既降低债务负担，也提高资金使用效率</li>\n<li><strong>我国债务风险的本质不是金融投机的风险，而是财政和资源分配机制的风险</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-国内国际失衡\"><a href=\"#第七章-国内国际失衡\" class=\"headerlink\" title=\"第七章 国内国际失衡\"></a>第七章 国内国际失衡</h2><ul>\n<li>第一节 低消费与产能过剩<ul>\n<li>消费不足<ul>\n<li>2018年消费占gdp比重只有44%，而美国这一比例达到70%</li>\n<li>从1980到2010年，消费比重从65%降到50%</li>\n<li>居民可支配收入下降</li>\n<li>居民储蓄率上升</li>\n</ul>\n</li>\n<li>高储蓄率<ul>\n<li>20世纪90年代储蓄率达到了25-30%，欧美这一比例一般在10%左右</li>\n<li>计划生育导致下一代数量减少，养儿防老不可靠，导致需要存钱应对老年</li>\n<li>政府民生支出不足</li>\n<li>房价上升拉低消费，提高了储蓄</li>\n</ul>\n</li>\n<li>地方政府推动工业化的方式加速了资本份额的上升和劳动份额的下降</li>\n<li>国民经济分配中居民占比下降，政府和企业的占比就必然上升</li>\n<li>经济到一定阶段后，不再是任何投资都有回报<ul>\n<li>基础设施和工业体系已经比较完善， 投资难度加大</li>\n<li>由于老百姓收入和消费不足，无法消化投资形成的产能，很多投资不能变成有效的收入，都浪费掉了，所以债务负担越积越重，带来了一系列风险</li>\n<li>劳动收入份额下降和资本收入份额上升，会扩大贫富差距</li>\n<li>由于消费不足和投资过剩，过剩产能必须向国外输出，输出产能会加重全球贸易失衡，引发贸易冲突</li>\n</ul>\n</li>\n<li><strong>居民收入增长快于经济增长，居民收入份额才能提高</strong></li>\n<li>过多的无用投资没带来收入，虽然gdp增长了，但是债务会积累，在未来爆发</li>\n<li>对外贸易失衡也是内部结构失衡的延续</li>\n</ul>\n</li>\n<li>第二节 中美贸易冲突<ul>\n<li>只要全世界还信任美元的价值，美国就可以源源不断地用美元去换取他国实际的产品和资源</li>\n<li>美国所谓的中国制造抢走美国工作并不确切<ul>\n<li>美国制造业就业本身就一直在下降</li>\n<li>制造业gdp占比一直很稳定，事实上是机器效率提高取代了人工</li>\n</ul>\n</li>\n<li>民粹主义和全球化情绪爆发，引发美国人对于贸易保护的倾向</li>\n<li>制造业和科学领域，各项指标已经开始毕竟甚至赶超美国</li>\n<li>工业制造是科学进步的基础</li>\n</ul>\n</li>\n<li>第三节 <strong>再平衡与国内大循环</strong><ul>\n<li>要提高居民收入，就要继续推进城市化，让人口向城市尤其是大城市集聚</li>\n<li>从目前的技术发展和发达国家的经验看，制造业的进一步发展吸纳不了更多就业</li>\n<li>改革的关键是转变地方政府在经济中扮演的角色，遏制其投资冲动，降低其生产性支出，加大民生支出</li>\n<li>要提高居民收入，还要扩宽居民的财产性收入，发展各种直接融资渠道，让更多人有机会分享经济增长的果实，这就涉及金融体系和资本市场的改革</li>\n<li>“双循环”战略在强调“再平衡”和扩大国内大市场的同时，也强调了要扩大对外开放</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li>英国史学家艾伦的《全球经济史》（2015）</li>\n<li>乔治梅森大学戈德斯通的《为什么是欧洲？世界史视角下的西方崛起》（2010）</li>\n<li>哈佛大学弗里登的《20世纪全球资本主义的兴衰》（2017）</li>\n<li>西北大学戈登的《美国增长的起落》（2018）</li>\n<li>哈佛大学教授傅高义《邓小平时代》</li>\n<li>《经济落后的历史透视》（格申克龙，2012）</li>\n<li>《大转型：我们时代的政治与经济起源》（波兰尼，2020）</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p><img src=\"/2022/03/14/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85/1.jpg\"></p>\n<h2 id=\"第一章-地方政府的权力和事务\"><a href=\"#第一章-地方政府的权力和事务\" class=\"headerlink\" title=\"第一章 地方政府的权力和事务\"></a>第一章 地方政府的权力和事务</h2><ul>\n<li>第一节 政府治理的特点<ul>\n<li>五级政府管理体系：中央-省-市-县区-乡镇</li>\n<li><strong>四套领导班子：党委、政府、人大、政协等，在五级政府下都完全复制</strong><ul>\n<li>条条块块：既有垂直的上下关系，又有横向的行政区划</li>\n<li>如县教育局受上级的市教育局管辖，又受县市政府管辖</li>\n</ul>\n</li>\n<li>官僚体系<ul>\n<li>官员学习和贯彻统一的意识形态</li>\n<li>由上级任命</li>\n<li>地方官在多地轮流任职</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 外部性和经济规模<ul>\n<li>公共服务<ul>\n<li>覆盖区域使用人数越多越好</li>\n<li>行政区划的范围</li>\n<li>边远地区是否有必要建设公共服务</li>\n</ul>\n</li>\n<li>人口密度<ul>\n<li>云南-腾冲线：43%东边面积占了94%人口</li>\n<li>密度高的地方区划要小，密度低的地方区划要大</li>\n<li>政策上会对城市群进行规划，以打破交界</li>\n<li>人为划分意图消除边界不一定有好效果，主要还是受地理因素影响</li>\n</ul>\n</li>\n<li>行政交界处<ul>\n<li>交界处三不管，经济一般更差</li>\n<li>边界处交通网路会更疏</li>\n<li>环境问题，污染排向边界处</li>\n<li>长期看，需要进行深化的市场化改革</li>\n<li>中短期通过行政区划调整和都市圈</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 复杂信息<ul>\n<li><strong>实际权威来自信息优势</strong></li>\n<li>下级具有信息优势</li>\n<li>上级只有形式权威，办事最终还是要看下级意愿</li>\n</ul>\n</li>\n<li>第四节 激励相容<ul>\n<li>专业性较强的部门一般受垂直上下级的约束较大，如海关，工商部门等</li>\n<li>完全受垂直上下级管理，会减弱地方监管力度，因此需要平衡</li>\n<li>中央做好约束，同时也让地方发挥更大的自治权</li>\n</ul>\n</li>\n<li><strong>第二至第四节就是事权划分的三大原则</strong></li>\n<li>第五节 招商引资<ul>\n<li>地方政府给予企业土地开发支持</li>\n<li>地方政府给予企业金融支持</li>\n<li>地方政府给予补贴和税收优惠</li>\n<li>地方政府提供招工服务","more":"</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章-财税与政府行为\"><a href=\"#第二章-财税与政府行为\" class=\"headerlink\" title=\"第二章 财税与政府行为\"></a>第二章 财税与政府行为</h2><ul>\n<li>第一节 分税制改革<ul>\n<li>财政包干 1985-1993<ul>\n<li>农村土地承包，城市企业承包，政府财政承包</li>\n<li>地方根据实际进行不同形式的承包和分账<ul>\n<li>北京确定一个增长比例，超过部分归北京所有，没超过部分和中央55分账</li>\n<li>广州按照1987年上缴的基数，每年递增9%归中央，剩余归自己</li>\n<li>上海定额上缴，每年缴105亿</li>\n</ul>\n</li>\n<li>地方比较有动力增加财政收入，促进了企业的发展</li>\n<li>地方财政收入增长较快，但是由于承包上缴，导致中央的财政收入增长很慢，造成中央政府很穷</li>\n<li>地方也通过各种手段帮助企业减税，进一步导致中央收入变少</li>\n<li>影响中央对于整体经济的调控</li>\n</ul>\n</li>\n<li>分税制改革<ul>\n<li>分为中央税、地方税、共享税</li>\n<li>同时分设国税、地税两套机构，与地方财政部门脱钩</li>\n<li>中央设立税收返还机制，防止地方税收急剧下降</li>\n<li>改革后中央收入剧增，增强了宏观调控能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 土地财政<ul>\n<li>招商引资<ul>\n<li>地方财政更喜欢重资产的制造业<ul>\n<li>投资规模大</li>\n<li>增值税在生产环节增收，跟生产规模挂钩</li>\n<li>制造业可以吸收低技能劳动力，并带动第三产业发展</li>\n</ul>\n</li>\n<li>重生产而轻环保，轻民生</li>\n</ul>\n</li>\n<li>土地公有制<ul>\n<li>城市土地归国家所有，农村土地归集体所有</li>\n<li>农村土地要建设，必须先转为国有</li>\n<li>土地转让金额随着城市化进展开始大幅增加</li>\n</ul>\n</li>\n<li>任期内政府过度借债导致下任政府难以为继</li>\n</ul>\n</li>\n<li>第三节 纵向不平衡和横向不平衡<ul>\n<li>基层财政<ul>\n<li>落后地区的税收收入较低，导致政府很难展开工作</li>\n<li><strong>三农问题：农民苦，农村穷，农业危险</strong><ul>\n<li>统筹城乡发展</li>\n<li>废除农业税</li>\n<li>农村公共服务开支纳入国家财政</li>\n<li>转移支付制度中加入激励机制，以精简政府机构</li>\n<li>地方财政归上一级政府统筹，乡财县管</li>\n<li>放权给县级政府，缩小城乡差距</li>\n</ul>\n</li>\n<li>“乡财县管”和“省直管县”改革，只适用于浙江等发达地区，不发达地区效果不佳</li>\n</ul>\n</li>\n<li>地区间不平等<ul>\n<li>中央转移支付，使得落后地区的平均财政支出和发达地区差不多</li>\n<li>一般转移支付：条件少，可以自行决定用途。导致越穷的地方拿到越多，影响创收动力。</li>\n<li>专项转移支付：项目专项资金。由于发达地区更可能做好项目，导致发达地区拿到越多。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-政府投融资与债务\"><a href=\"#第三章-政府投融资与债务\" class=\"headerlink\" title=\"第三章 政府投融资与债务\"></a>第三章 政府投融资与债务</h2><ul>\n<li>第一节 城投公司与土地金融<ul>\n<li>地方政府不能从银行贷款，因此通过成立国资企业进行融资<ul>\n<li>持有政府的土地使用权，因此可以撬动银行贷款，快速扩展</li>\n<li>盈利状况依赖政府补贴</li>\n<li>可以获得政府担保，融资更容易</li>\n</ul>\n</li>\n<li>工业园区开发<ul>\n<li>一种由国企承当，投资大，盈利低，靠后期运营来实现盈利</li>\n<li>一种由私企承当，通过开发房地产来反哺工业区实现盈利</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 地方政府债务<ul>\n<li>城投公司，始于国开行</li>\n<li>城商行由地方政府控制，和国开行相比<ul>\n<li>资金多来于中短期存款，风险较大</li>\n<li>存款来源不稳定</li>\n</ul>\n</li>\n<li>地方债务水平<ul>\n<li>估计占gdp六成左右，虽然不低，但和美日相比依然不算多</li>\n<li>低一级的政府以及落后地区债务风险大</li>\n</ul>\n</li>\n<li>债务治理<ul>\n<li>债务置换，用地方政府的公债替换融资公司的银行贷和城投债</li>\n<li>推动融资平台转型，剥离为政府融资的功能</li>\n<li>约束银行和金融机构的资金流入融资平台</li>\n<li>对过度负债终身追责</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 招商引资中的地方官员<ul>\n<li>官员政绩<ul>\n<li>经济发展是官员的主要政绩，因此新官上任都会大兴土木，导致城市规模虽然变大，但是整体效率较低</li>\n<li>中央强调不已gdp作为政绩考核的主要指标</li>\n<li>除了晋升和激励，内在的道德驱动也是官员的重要动力</li>\n</ul>\n</li>\n<li>腐败问题<ul>\n<li>近年来的腐败多与土地开发有关</li>\n<li>腐败与经济高速发展长期并存</li>\n<li>官商勾连腐败，政府将项目给关系户<ul>\n<li>长期偏重投资导致资本收入增长高于老百姓收入增长</li>\n<li>扭曲投资和信贷资源配置，把大量资金浪费在效益不高的关系户项目上，推升债务负担和风险</li>\n<li>扩大贫富差距</li>\n<li>形成利益集团，不利于市场发展</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-工业化中的政府角色\"><a href=\"#第四章-工业化中的政府角色\" class=\"headerlink\" title=\"第四章 工业化中的政府角色\"></a>第四章 工业化中的政府角色</h2><ul>\n<li>第一节 京东方与政府投资<ul>\n<li>20世纪90年代，液晶屏巨头们联手抬高价格，垄断市场</li>\n<li>京东方在此背景下获得了政府大量投资<ul>\n<li>初代时购买了价格峰值的液晶面板，在低谷时生产出了成品，导致大量亏损</li>\n<li>改用股权融资：先向地方政府筹本金，不足部分再贷款</li>\n<li>新的融资方式获得了更多资金，同时也赶来智能手机的爆发，获得了盈利</li>\n</ul>\n</li>\n<li>政府帮助本土企业进入复杂度很高的行业，充分利用其中的学习效应、规模效应和技术外溢效应</li>\n<li>新兴制造业在地理上的集聚效应很强</li>\n<li>政府扶持也吸引了一些并无技术实力和竞争力的小企业进入该行业，引发了对产能过剩的担忧</li>\n</ul>\n</li>\n<li>第二节 光伏发展和政府补贴<ul>\n<li>2000 - 2010年，大量光伏企业获得政府补贴，急剧扩张</li>\n<li>随着金融危机，以及成本高于煤电，光伏企业累积了大量的债务，导致倒闭</li>\n<li>补贴电价下调，但是企业的技术积累和成本降幅依然快于补贴降幅，使得光伏迅猛发展</li>\n<li>政府补贴造就了光伏的需求</li>\n<li>政府补贴有助于新技术起步时的发展</li>\n<li>产业政策要有推出机制<ul>\n<li>政策本身要有推出机制，如光电补贴逐步降低</li>\n<li>低效企业破产退出的渠道要畅通</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-城市化与不平衡\"><a href=\"#第五章-城市化与不平衡\" class=\"headerlink\" title=\"第五章 城市化与不平衡\"></a>第五章 城市化与不平衡</h2><ul>\n<li>第一节 房价与居民债务<ul>\n<li>土地供需<ul>\n<li>现代经济集聚效应很强，经济活动及就业越来越向大城市集中</li>\n<li>地区房价差异的主要原因是供需失衡</li>\n<li>中国对建设用地指标实行严格管理，每年的新增指标由中央分配到省，再由省分配到地方</li>\n<li>建设用地指标不能在全国交易，土地使用效率很难提高</li>\n</ul>\n</li>\n<li>欧美房价与居民债务<ul>\n<li>二战之前，欧美自有住房比例很低，大部分为租房</li>\n<li>欧美自有住房比例上升后<ul>\n<li>房产在居民资产中的比例上升</li>\n<li>政府开始降低卖房门槛和按揭比例</li>\n</ul>\n</li>\n<li>美国出于政治选票因素，大量房贷给低收入者买房，导致坏账变多，引发次贷危机<ul>\n<li>导致房价降低</li>\n<li>进而抑制消费</li>\n</ul>\n</li>\n<li>房地产常被称作“经济周期之母”<ul>\n<li>银行可以通过按揭创造无限的购买力</li>\n<li>不可再生的城市土地供给有限</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>我国房价与居民债务<ul>\n<li>2008年后，房价急速上升<ul>\n<li>居民债务负担上涨3倍多，占GDP的54%</li>\n<li>平均债务约等于居民1.6倍年收入</li>\n</ul>\n</li>\n<li>影响消费</li>\n</ul>\n</li>\n<li>房价与居民债务风险<ul>\n<li>拉大各地的资产差距</li>\n<li>消费下滲：刺激低收入者举债消费</li>\n<li>借贷比例上升，影响未来收入增长，导致债务负担变重</li>\n<li>负债率高更容易受到房价下跌的影响</li>\n<li>我国的金融危机概率低<ul>\n<li>首付比例30%，不会如美国可以低到0</li>\n<li>信贷资产没有层层嵌套，导致风险放大</li>\n<li>资本账户管制，限制外国资产参与我国房市</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 不平衡与要素市场改革<ul>\n<li>低收入者到发达城市是提高收入最简单的途径</li>\n<li>地方政府偏重投资，收入分配偏向资本，降低劳动收入占比</li>\n<li>需要平衡人均规模，而不是总体规模</li>\n<li>关键要让劳动力自由流动<ul>\n<li>提高城市市场规模，分工细，使得低技能者也能有高收入</li>\n<li>低技能者服务业支撑城市生活质量</li>\n<li>城市规模的上升也能促进地区间的分工和流动</li>\n</ul>\n</li>\n<li>土地流转<ul>\n<li>2008年提出城乡统一的建设用地市场与国有土地享有平等权益</li>\n<li>2015年试点三块地改革，即农村土地征收、集体经营性建设用地入市以及宅基地制度改革</li>\n<li>2017年在租赁住房供需矛盾突出的超大和特大城市，开展集体建设用地上建设租赁住房试点</li>\n<li>三条底线<ul>\n<li>土地公有制性质不变</li>\n<li>耕地红线不突破</li>\n<li>农民利益不受损</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>户籍改革<ul>\n<li>逐步取消农业户口和非农业户口差别</li>\n<li>2019年发改委提出放宽各类城市落户限制</li>\n<li>未来方向<ul>\n<li>建立健全城乡统一的建设用地市场</li>\n<li>深化户籍制度改革</li>\n<li>以经常居住地登记户口制度</li>\n<li>基本公共服务与常住人口挂钩机制，推动公共资源按常住人口规模配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 经济发展与贫富差距<ul>\n<li>全球贫困人口急剧下降，主要贡献来自于中国</li>\n<li>70后，经济快速增长使得财富继承的重要性下降，个人更看重自己的劳动收入</li>\n<li>80，90后，房价的上涨使得财富继承重要性上升，拉大贫富差距</li>\n<li>隧道效应：经济增长放缓，对穷人的影响更大</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-债务与风险\"><a href=\"#第六章-债务与风险\" class=\"headerlink\" title=\"第六章 债务与风险\"></a>第六章 债务与风险</h2><ul>\n<li>第一节 债务与经济衰退<ul>\n<li>债务危机的爆发和蔓延非常迅速<ul>\n<li>负债率高的经济中，资产价格下降速度也更快</li>\n<li>资产价格下跌引起信贷收缩，导致资金链断裂</li>\n<li>债务常常将风险集中到承受能力最弱的穷人身上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二节 欧美债务的教训<ul>\n<li>布雷顿森林体系<ul>\n<li>各国货币以固定比例与美元挂钩</li>\n<li>美元以固定比例与黄金挂钩</li>\n<li>各国需要充足的外汇干预市场，防止汇率波动</li>\n<li>因此国际资本流动规模不能太大，否则会冲破某些国家的外汇储备</li>\n<li>因此要限制国内银行放贷，这样就能限制居民的进出口消费</li>\n</ul>\n</li>\n<li>自由化浪潮<ul>\n<li>各国实现浮动汇率</li>\n<li>放松了贷款限制</li>\n<li>银行危机风险加剧，在布雷顿森林体系下，1945-1970，只发生2次银行危机，自由化浪潮下，1980-2010发生了153次银行危机</li>\n</ul>\n</li>\n<li>金融危机源头<ul>\n<li>银行规模大，杠杆高</li>\n<li>银行借进来的钱很多是短期的（比如活期存款），但贷出去的钱却大都是长期的（比如企业贷款），这种负债和资产的期限不匹配会带来流动性风险。</li>\n<li>银行信贷大都和房地产有关，常常与土地和房产价值一同起落，放大经济波动</li>\n<li>银行很少雪中送炭，却常常晴天送伞，繁荣时慷慨解囊、助推经济过热，衰退时却捂紧口袋、加剧经济下行</li>\n<li>银行风险会传导到其他金融部门</li>\n</ul>\n</li>\n<li>不平衡问题<ul>\n<li>东亚贸易不平衡使得中国1997年金融危机中美元储备不足导致经济受损，因此之后大量买入美国国债</li>\n<li>欧洲和美国贸易平衡，但是总量大，交易规模变大后，风险也变大</li>\n<li>富人借债给穷人，拉大贫富差距</li>\n</ul>\n</li>\n<li>实体企业投资不足<ul>\n<li>投资流向了发展中国家</li>\n<li>通信技术发展，使得资产涌入非失业和服务业</li>\n<li>大企业规模越来越大，竞争性不足</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三节 中国债务与风险<ul>\n<li>相比其他发展中国家，我国债务水平较低</li>\n<li>债务累计过程<ul>\n<li>08年为应对金融危机，出台4万亿计划</li>\n<li>降准降息，放宽信贷</li>\n<li>10-11年，经济过热，通胀加剧</li>\n<li>欧债危机爆发后，国内制造业吃紧，央行继续降准降息</li>\n<li>15年股灾后，美国量化宽松，导致资本外流，人民币汇率降低</li>\n<li>导致央行的进一步降准降息，带动房价上涨</li>\n</ul>\n</li>\n<li>企业债务<ul>\n<li>地方政府投资基建，投资回报率低</li>\n<li>国进民退问题，国企快速扩张，效率却较低，提升整体债务负担</li>\n<li>推进改革<ul>\n<li>推进国企混改，限制地方政府干预</li>\n<li>加强金融监管，从源头上拧紧资金的水龙头</li>\n<li>在要素市场上推行更加全面的改革，让市场力量在资金、土地、技术、劳动力等生产要素配置中发挥更大作用</li>\n<li>改革和完善《企业破产法》，在债务重整过程中“去行政化”，避免地方官员主导企业破产重组，损害债权人利益</li>\n</ul>\n</li>\n<li>房地产债务占总体债务比重较大</li>\n<li>优质抵押物或者政府担保，可以使得银行的借贷风险降低                                                </li>\n<li>影子银行<ul>\n<li>银行通过卖理财产品筹得钱款</li>\n<li>筹来的钱委托给信托公司  </li>\n<li>信托公司将钱借给公司</li>\n<li>理财产品不算银行储蓄，委托给信托公司的钱不算银行贷款，因此摆脱对银行的监管，成了影子银行</li>\n</ul>\n</li>\n<li>2018年资管新规出台，打压了影子银行，同时也打压了小企业的融资渠道</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第四节 化解债务危机<ul>\n<li>压缩支出的方式<ul>\n<li>收入减少是连锁反应，导致经济整体下行</li>\n<li>债务负担可能反而上升</li>\n<li>让债权人和债务人都痛苦</li>\n</ul>\n</li>\n<li>增发货币<ul>\n<li>08年金融危机前的主流做法</li>\n<li>刺激投资和消费</li>\n<li>温和的通货膨胀</li>\n<li>没有明显的受损方</li>\n</ul>\n</li>\n<li><strong>量化宽松</strong><ul>\n<li>金融危机后主流做法</li>\n<li>增发货币买入资产，维持资产价值</li>\n<li>相当于将其他地方的负债转移到央行</li>\n<li>理论上央行可以无限印钱，所以可以无限消化负债</li>\n<li>不会过度通货膨胀，因为其他地方挣了钱会优先还债，支出并没有显著增加</li>\n<li>难以刺激消费，依然帮助了富人消化债务，拉大贫富差距</li>\n</ul>\n</li>\n<li>赤字货币化<ul>\n<li>政府加大财政支出去刺激经济，由财政部发债融资，央行直接印钱买过来，无需其他金融机构参与也无需支付利息</li>\n<li>用无利率的货币替代有利率的债务，以政府预算收支的数量代替金融市场的价格（即利率）来调节经济资源配置</li>\n<li>会引发物价飞涨的恶性通货膨胀（国民党的教训）</li>\n</ul>\n</li>\n<li>遏制新债务<ul>\n<li>围绕供给侧结构性改革所推行的一系列重大经济金融改革</li>\n<li>资本市场改革，改变以银行贷款为主的间接融资体系，拓展直接融资渠道，既降低债务负担，也提高资金使用效率</li>\n<li><strong>我国债务风险的本质不是金融投机的风险，而是财政和资源分配机制的风险</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-国内国际失衡\"><a href=\"#第七章-国内国际失衡\" class=\"headerlink\" title=\"第七章 国内国际失衡\"></a>第七章 国内国际失衡</h2><ul>\n<li>第一节 低消费与产能过剩<ul>\n<li>消费不足<ul>\n<li>2018年消费占gdp比重只有44%，而美国这一比例达到70%</li>\n<li>从1980到2010年，消费比重从65%降到50%</li>\n<li>居民可支配收入下降</li>\n<li>居民储蓄率上升</li>\n</ul>\n</li>\n<li>高储蓄率<ul>\n<li>20世纪90年代储蓄率达到了25-30%，欧美这一比例一般在10%左右</li>\n<li>计划生育导致下一代数量减少，养儿防老不可靠，导致需要存钱应对老年</li>\n<li>政府民生支出不足</li>\n<li>房价上升拉低消费，提高了储蓄</li>\n</ul>\n</li>\n<li>地方政府推动工业化的方式加速了资本份额的上升和劳动份额的下降</li>\n<li>国民经济分配中居民占比下降，政府和企业的占比就必然上升</li>\n<li>经济到一定阶段后，不再是任何投资都有回报<ul>\n<li>基础设施和工业体系已经比较完善， 投资难度加大</li>\n<li>由于老百姓收入和消费不足，无法消化投资形成的产能，很多投资不能变成有效的收入，都浪费掉了，所以债务负担越积越重，带来了一系列风险</li>\n<li>劳动收入份额下降和资本收入份额上升，会扩大贫富差距</li>\n<li>由于消费不足和投资过剩，过剩产能必须向国外输出，输出产能会加重全球贸易失衡，引发贸易冲突</li>\n</ul>\n</li>\n<li><strong>居民收入增长快于经济增长，居民收入份额才能提高</strong></li>\n<li>过多的无用投资没带来收入，虽然gdp增长了，但是债务会积累，在未来爆发</li>\n<li>对外贸易失衡也是内部结构失衡的延续</li>\n</ul>\n</li>\n<li>第二节 中美贸易冲突<ul>\n<li>只要全世界还信任美元的价值，美国就可以源源不断地用美元去换取他国实际的产品和资源</li>\n<li>美国所谓的中国制造抢走美国工作并不确切<ul>\n<li>美国制造业就业本身就一直在下降</li>\n<li>制造业gdp占比一直很稳定，事实上是机器效率提高取代了人工</li>\n</ul>\n</li>\n<li>民粹主义和全球化情绪爆发，引发美国人对于贸易保护的倾向</li>\n<li>制造业和科学领域，各项指标已经开始毕竟甚至赶超美国</li>\n<li>工业制造是科学进步的基础</li>\n</ul>\n</li>\n<li>第三节 <strong>再平衡与国内大循环</strong><ul>\n<li>要提高居民收入，就要继续推进城市化，让人口向城市尤其是大城市集聚</li>\n<li>从目前的技术发展和发达国家的经验看，制造业的进一步发展吸纳不了更多就业</li>\n<li>改革的关键是转变地方政府在经济中扮演的角色，遏制其投资冲动，降低其生产性支出，加大民生支出</li>\n<li>要提高居民收入，还要扩宽居民的财产性收入，发展各种直接融资渠道，让更多人有机会分享经济增长的果实，这就涉及金融体系和资本市场的改革</li>\n<li>“双循环”战略在强调“再平衡”和扩大国内大市场的同时，也强调了要扩大对外开放</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li>英国史学家艾伦的《全球经济史》（2015）</li>\n<li>乔治梅森大学戈德斯通的《为什么是欧洲？世界史视角下的西方崛起》（2010）</li>\n<li>哈佛大学弗里登的《20世纪全球资本主义的兴衰》（2017）</li>\n<li>西北大学戈登的《美国增长的起落》（2018）</li>\n<li>哈佛大学教授傅高义《邓小平时代》</li>\n<li>《经济落后的历史透视》（格申克龙，2012）</li>\n<li>《大转型：我们时代的政治与经济起源》（波兰尼，2020）</li>\n</ul>"},{"title":"读书笔记-数据结构和算法图解","date":"2022-03-21T05:45:25.000Z","comments":1,"_content":"![](1.jpg)\n\n## 第一章 数据结构为何重要\n\n- **操作的速度，并不按时间计算，而是按步数计算。理解这个观点**，因为不同机器其实运行速度都会有差异，真正决定效率的是一个操作的步数。\n- 读取是一步到位，意味着是读取数组的索引\n    - 计算机的内存可以看成一堆格子，内存的格子是地址连续的\n    - 声明数组时，是在内存中划分出一些连续的格子\n    - 查找任意索引，最多都是只需要1步\n- 查找意味着从数组中寻找是否存在某个值\n    - 计算机需要从索引0开始寻找，即线性查找\n    - 查找任意内容，最多步骤为数组的索引长度N\n- 计算机知道数组的索引开始位置和结束位置\n    - 插入末尾只需要一步，直接在末尾插入即可\n    - 开头或中间的位置，需要先移动其他元素的位置，再进行插入\n    - 最复杂的插入，是在数组开头插入，意味着需要将N个元素都右移，再将元素插入，即N+1步\n- 删除任意元素都需要将右边的元素左移，以保持数组的连续性和完整性\n- 最复杂的删除是删除开头元素，删除为1步，之后将N-1个元素左移，最终为N步\n- 集合是一种不允许元素重复的数据结构\n    - 读取，查找，删除和数组的效率是一致的\n    - 插入的效率和数组不同\n        - 需要先确定这个元素在不在集合内，因此需要先查找一遍，如前文所诉，最多需要N步\n        - 确定要插入的元素不在集合内后，进行插入，和数组一样，最多需要N+1步\n        - 因此集合的插入最终的复杂度为2N+1步\n<!-- more -->\n\n## 第二章 算法为何重要\n\n- 和数组的区别就在于里面的元素是按照规则排序的。读取和删除跟数组效率一样。\n- 插入元素\n    - 首先需要根据排序规则，从索引0的位置开始遍历，找到这个元素在有序数组中的位置，最多N步\n    - 将该位置的元素右移，然后插入，这是2步，因此最多N+2步。\n- 查找元素\n    - 有序数组的查找比数组的查找效率更高，因为排列有序，所以如果某个元素比查找元素要大，那就可以停止查找。\n- 二分查找的前提是有序数组\n- 数组长度每次翻倍，二分查找的操作步数只会+1。而线性查找却会跟着一起翻倍。\n\n## 第三章 大O记法\n\n- 无论数组多大，操作都只要一步，记为O(1)\n- 数组长度为N，操作需要用N步，记为O(N)\n- 当数据增长时，步数如何变化？\n    - O(N) 被称为线性时间，随着数组长度增长，步数每次+1\n    - O(1) 被称为常数时间，表示随着数组长度增长，步数不变\n- 线性查找的最好情况是O(1)，最坏情况是O(N)。\n- 二分查找的复杂度记为O(log N)\n\n## 第四章 利用大O给代码提速\n\n- 冒泡排序\n    - 基本步骤\n        - 指针首先指向头两个元素，比较大小，如果左边大于右边，则交换位置\n        - 将指针右移一位，重复第一步\n        - 到列表末尾，重新到列表头部重复第一二步\n        - 直到顺序正确，退出循环\n    - 按照最复杂的情况看，也就是完全倒序的列表进行冒泡排序的话，复杂度为O(N^2)\n```java\npublic static void bubbleSort(int[] nums) {\n    for (int i = 0; i < nums.length - 1; i++) {\n        for (int j = nums.length - 1; j > i; j--) {\n            if (nums[j] < nums[j-1]) {\n                int temp = nums[j];\n                nums[j] = nums[j-1];\n                nums[j-1] = temp;\n            }\n        }\n    }\n}\n```\n\n- 二次问题\n    - 解决一个数组中是否存在重复元素的问题\n    - 时间复杂度为O(N^2)的解决办法：\n```javascript\nfunction hasDuplicateValue(array) {\n    for(vari=0;i<array.length;i++) {\n        for(varj=0;j<array.length;j++){\n            if(i!==j&&array[i]==array[j]){\n                return true}\n        }\n    }\n    return false\n}\n```\n    - 时间复杂度为O(N)的解决办法：\n```javascript\nfunction hasDuplicateValue(array) {\n    var existingNumbers=[];\n    for(vari=0;i<array.length;i++){\n        // 将元素成员作为下标\n        if(existingNumbers[array[i]]===undefined){\n            existingNumbers[array[i]]=1;\n        } else {\n            returntrue;\n        } \n    }\n    return false;\n}\n```\n\n## 第五章 用或不用大O来优化代码\n       \n- 选择排序\n    - 基本步骤\n        - 从索引0开始，遍历数组，找到最小的数，将其和索引0的数字调换位置\n        - 第二次循环从索引1开始，找到最小数，和索引1的数字调换位置\n        - 如此循环，到最后一个数时就完成了排序\n    - 和冒泡排序一样，时间复杂度都表示为O(N^2)，但是实际效率比冒泡排序快一倍，也就是虽然更高效，但是没有指数上的差别\n    - **从这个角度说，性能调优不应该盲目只看大O记法所表示的复杂度，如果不能有数量级的差别，也应该具体分析后进行同一数量级的调优**\n```java\npublic static void selectionSort(int[] nums) {\n    int minIndex = 0;\n    for (int i = 0; i < nums.length - 1; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (nums[minIndex] > nums[j]) {\n                minIndex = j; // 获取最小的数\n            }\n        }\n        int temp = nums[i];\n        nums[i] = nums[minIndex];\n        nums[minIndex] = temp;\n    }\n}\n```\n\n## 第六章 乐观地调优\n\n- 假设排序数组并不是按照最差的情况进行排序，则总是会有更好更高效的方式进行排序\n- 插入排序\n    - 基本步骤\n        - 从索引1开始，将索引1的数字取出作为一个对比数字，然后从索引0开始，直到索引1结束，比较数字和对比数字的大小\n        - 遇到比它大的往右移动一位，遇到比它小的数字，或者索引左边的所有数字都右移了就停止这次循环\n        - 从索引2开始，重复1，2步骤    \n```python\ndef insertion_sort(array):\n    for index in range(1,len(array)):\n        position = index\n        temp_value = array[index]\n        while position > 0 and array[position-1] > temp_value:\n            array[position] = array[position-1]\n            position = position - 1 \n        array[position] = temp_value\n```\n- 实际时间复杂度为O(N^2 + 2N - 2)，忽略常数和只看最高次的N，则还是O(N^2)\n- **看似时间复杂度一样，但是在平均情况下，插入排序的效率是更高的**\n\n## 第七章 查找迅速的散列表\n\n- 散列表即map，或称字典，映射，关联数组\n- 查找效率为O(1)\n- 简单原理：暂且把散列中的键值对应关系视为乘法关系，如BAD值，转为字母表中的214，对应键为8\n- 散列值计算过程（简化）\n    - 散列表可以看成是一行能够存储数据的格子，就像数组那样。每个格子都有对应的编号\n    - 函数对键进行计算，如BAD=2*1*4=8\n    - 将BAD存到第8个格子上\n    - 当需要查找BAD对应的值时，计算机计算键BAD的散列值=8，因此直接找到第8个位置的值，复杂度为O(1)\n- 冲突解决\n    - 如上所诉的过程，如果又要存储DAB的值，算出来的散列值也是8，也要存到同一个位置上\n    - 将8的位置换成一个数组，即8这个位置可以存储多个键值对\n    - DAB的查找过程就变成，先计算散列值为8，然后找到8这个位置的数组，再用线性查找遍历数组，找到DAB\n    - 为了减少冲突，散列表的设计需要减少这种冲突，因此实际设计中散列值的计算要复杂很多\n- 散列表的效率决定因素\n    - 要存多少数据\n    - 有多少可用的格子\n    - 用什么样的散列函数\n    - 要避免冲突，就要增加存储空间，需要找到平衡\n\n## 第八章 用栈和队列来构造灵巧的代码\n       \n- 栈 LIFO（lastin，firstout）后进先出。\n    - 只在末尾插入数据\n    - 只能读取末尾数据\n    - 只能一处末尾数据\n    - **栈的末尾叫栈顶，栈的开头成为栈尾**\n    - 往栈里插入数据，称为**压栈**\n    - 从栈顶移出数据，称为**出栈**\n    - 一般来说，栈都是用来实现某些特殊算法（当数据的处理顺序要与接收顺序相反时），而不会用于存储数据\n- 队列 先进先出\n    - 只能在末尾插入数据（这跟栈一样）\n    - 只能读取开头的数据（这跟栈相反）\n    - 只能移除开头的数据（这也跟栈相反）\n    - 可用于处理网络数据接收处理等任务\n\n## 第九章 递归\n\n- 递归必需设置基准情形，即结束递归的条件\n- 计算机是用栈来记录每个调用中的函数。这个栈就叫作调用栈，也就是在递归场景中，按照321顺序调用，123顺序完成\n- 递归十分适用于那些无法预估计算深度的问题\n\n## 第十章 飞快的递归算法\n\n- 快速排序\n    - 基本步骤\n        - 首先找一个基准数，比如找最右边的数\n        - 两个指针分别指向数组开头和结尾（排除基准数之外）\n        - 两个指针每次都向中间各移动一步，左指针遇到大于等于基准数的数值时就停止移动，右指针遇到小于等于基准数的数值时停止移动\n        - 两指针所在数值的位置互换\n        - 重复2-4步骤，直到两个指针重合\n        - 将基准数与左指针指向的数值互换\n    - 以上步骤是以基准数为中心，将数组分为比基准数大的分区和比基准数小的分区，并没有完成最终排序\n    - **结合递归，在每个分区内再分别进行快速排序，最终就可以完成排序**\n    - **可以近似看作长度为N的数组，要进行N个分区的二分查找，二分查找的效率为logN，所以快速排序的效率近似为O(NlogN)**\n    - 大部分情况下都是表现最好的排序方式，因此多数语言内置排序都以快速排序实现\n```java\npublic static void quickSort(int a[], int left, int right) {\n    int i, j, t, temp;\n    if (left > right)\n        return;\n\n    temp = a[left]; // temp中存的就是基准数\n    i = left;\n    j = right;\n    while (i != j) {\n        // 顺序很重要，要先从右边开始找\n        while (a[j] >= temp && i < j)\n            j--;\n        // 再找左边的\n        while (a[i] <= temp && i < j)\n            i++;\n        // 交换两个数在数组中的位置\n        if (i < j) {\n            t = a[i];\n            a[i] = a[j];\n            a[j] = t;\n        }\n    }\n    // 最终将基准数归位\n    a[left] = a[i];\n    a[i] = temp;\n\n    quickSort(a, left, i - 1);// 继续处理左边的，这里是一个递归的过程\n    quickSort(a, i + 1, right);// 继续处理右边的 ，这里是一个递归的过程\n}\n```\n- 快速选择\n    - 用于查找无序数组中指定大小的数字，比如长度为10的数组中查找第二小的数字\n    - 结合快速排序和二分法，先用快速排序对数组进行分区，每次分完区之后，基准数落下的位置就是这个数组中第几大的数字\n    - 根据这个方法，快速选择可以用O(N)的复杂度获取到需要的数字\n\n## 第十一章 基于结点的数据结构\n\n- 链表\n    - 和数组不同的是，链表中的各个元素不是连续的，这种不相邻的格子叫做**结点**\n    - 每个结点存储数据以及下一个结点的地址来实现链表，这些存储下个结点地址的额外数据就是**链**\n    - 链表的好处是不需要内存分配连续的空间\n    - 读取\n        - 不像连续数组，计算机不知道某个结点的地址，只知道开头结点的地址，因此需要遍历\n        - 读取的复杂度为O(N)\n    - 查找：读取一样，需要从链表开头进行逐一遍历，复杂度为O(N)\n    - 插入\n        - 链表的插入需要先找到插入的位置，如前所述，这个过程的时间复杂度为O(N)\n        - 随后将插入位置的上一个结点指向的地址改为当前结点的地址，复杂度为O(1)\n        - 和有序列表相反的是，在表头插入数据步骤是最少的，在最后一位插入步骤是最多的\n    - 删除：大致上和插入的原理差不多，时间复杂度同样为O(N)\n- **为什么用链表**\n    - 从上述分析看，链表增删改查的效率并没有比数组快\n    - 但在某些业务场景下，比如从一堆数组中删除指定条件的无效数据\n        - 数组的操作过程是，每次找到一条无效数据后，先进行删除，然后将右边的数据进行左移，如果在最坏的情况下，无效数据都在数组开头，那每次删除都相当于要移动一遍整个数组\n        - 链表的操作过程，省略了每次删除后左移的过程，只需遍历一次数组即可\n        - 增加数据也是同理\n    - 因此，相比数组，链表的增删效率更高\n- 双向链表\n    - 即每个结点除了存储下个结点的地址，还会存储上一个结点的地址\n    - 增删改查可以从头部或者尾部开始\n    - 这种特性可以使双向链表作为队列的底层实现，这样增删复杂度都是O(1)\n\n## 第十二章 二叉树\n\n- 前文提到，有序列表的查找(二分法 O(logN))和读取 (O(1))非常快，但是插入和删除效率较低(O(N))；而散列表的查找，插入和删除效率较高(O(1))，但却是无序的\n![](tree.png)\n- 二叉树\n    - 每个结点链接着另外两个结点\n    - 最上面的那一结点（此例中的“j”）被称为**根**\n    - 此例中，“j”是“m”和“b”的**父结点**，反过来，“m”和“b”是“j”的**子结点**。“m”又是“q”和“z”的父结点，“q”和“z”是“m”的子结点\n    - 树可以分**层**。此例中的树有3层\n    - 每个结点的子结点数量可为0、1、2\n    - 如果有两个子结点，**则其中一个子结点的值必须小于父结点，另一个子结点的值必须大于父结点**\n- 二叉树查找的原理类似于二分法，因此复杂度为O(logN)\n- 插入同样也是O(logN)，因为找到需要插入的结点即可，无需像有序数组那样移动\n- **需要乱序生成的二叉树才能高效，原理看图可知**\n![](tree2.png)\n![](tree3.png)\n- 二叉树的删除\n    - 规则较多，如果是删除最底下的子结点复杂度为O(logN)，但是如果删除某个父结点，需要考虑\n    - 如果要删除的结点有一个子结点，那删掉它之后，还要将子结点填到被删除结点的位置上\n    - 如果要删除的结点有两个子结点，则从其子结点中选取后继结点。后继结点的选取规则是，所有比被删除结点大的子结点中，最小的那个。下图例子中就是将61作为替换\n    ![](tree4.png)\n    ![](tree5.png)\n    - 查找后继结点的方法：跳到被删除结点的右子结点，然后一路只往左子结点上跳，直到没有左子结点为止，则所停留的结点就是被删除节点的后继结\n        - 如果后继结点带有右子结点，则在后继结点填补被删除结点以后，用此右子结点替代后继结点的父节点的左子结点\n        ![](tree6.png)\n        ![](tree7.png)\n        ![](tree8.png)\n    - 尽管看起来规则复杂，然而这些额外步骤都是寥寥几步就可以完成，删除的主要过程依然是查找结点的过程，所以复杂度还是O(logN)\n    \n## 第十三章 连接万物的图\n\n![](graph.png)\n- 每个结点都是一个**顶点**，每条线段都是一条**边**。当两个顶点通过一条边联系在一起时，我们会说这两个顶点是相邻的。\n- 以Facebook和twitter为例，facebook是双向的关系，而twitter是单向的\n![](graph2.png)\n- 可用散列表来实现图\n- 广度优先搜索\n    - 需要用队列记录后续要处理哪些顶点\n    - 找出当前顶点的所有邻接点。如果有哪个是没访问过的，就把它标为“已访问”，并且将它入队。（尽管该顶点并未作为“当前顶点”被访问过。）\n    - 如果当前顶点没有未访问的邻接点，且队列不为空，那就再从队列中移出一个顶点作为当前顶点。\n    - 如果当前顶点没有未访问的邻接点，且队列里也没有其他顶点，那么算法完成。\n    - 简单点说就是每次只处理下一层的数据\n\n      \n      \n      \n      \n      \n\n  \n    \n\n    \n        \n    \n\n\n    \n\n","source":"_posts/read/读书笔记-数据结构和算法图解.md","raw":"---\ntitle: 读书笔记-数据结构和算法图解\ndate: 2022-03-21 13:45:25\ncomments: true\ncategories: \n- 读书笔记\n---\n![](1.jpg)\n\n## 第一章 数据结构为何重要\n\n- **操作的速度，并不按时间计算，而是按步数计算。理解这个观点**，因为不同机器其实运行速度都会有差异，真正决定效率的是一个操作的步数。\n- 读取是一步到位，意味着是读取数组的索引\n    - 计算机的内存可以看成一堆格子，内存的格子是地址连续的\n    - 声明数组时，是在内存中划分出一些连续的格子\n    - 查找任意索引，最多都是只需要1步\n- 查找意味着从数组中寻找是否存在某个值\n    - 计算机需要从索引0开始寻找，即线性查找\n    - 查找任意内容，最多步骤为数组的索引长度N\n- 计算机知道数组的索引开始位置和结束位置\n    - 插入末尾只需要一步，直接在末尾插入即可\n    - 开头或中间的位置，需要先移动其他元素的位置，再进行插入\n    - 最复杂的插入，是在数组开头插入，意味着需要将N个元素都右移，再将元素插入，即N+1步\n- 删除任意元素都需要将右边的元素左移，以保持数组的连续性和完整性\n- 最复杂的删除是删除开头元素，删除为1步，之后将N-1个元素左移，最终为N步\n- 集合是一种不允许元素重复的数据结构\n    - 读取，查找，删除和数组的效率是一致的\n    - 插入的效率和数组不同\n        - 需要先确定这个元素在不在集合内，因此需要先查找一遍，如前文所诉，最多需要N步\n        - 确定要插入的元素不在集合内后，进行插入，和数组一样，最多需要N+1步\n        - 因此集合的插入最终的复杂度为2N+1步\n<!-- more -->\n\n## 第二章 算法为何重要\n\n- 和数组的区别就在于里面的元素是按照规则排序的。读取和删除跟数组效率一样。\n- 插入元素\n    - 首先需要根据排序规则，从索引0的位置开始遍历，找到这个元素在有序数组中的位置，最多N步\n    - 将该位置的元素右移，然后插入，这是2步，因此最多N+2步。\n- 查找元素\n    - 有序数组的查找比数组的查找效率更高，因为排列有序，所以如果某个元素比查找元素要大，那就可以停止查找。\n- 二分查找的前提是有序数组\n- 数组长度每次翻倍，二分查找的操作步数只会+1。而线性查找却会跟着一起翻倍。\n\n## 第三章 大O记法\n\n- 无论数组多大，操作都只要一步，记为O(1)\n- 数组长度为N，操作需要用N步，记为O(N)\n- 当数据增长时，步数如何变化？\n    - O(N) 被称为线性时间，随着数组长度增长，步数每次+1\n    - O(1) 被称为常数时间，表示随着数组长度增长，步数不变\n- 线性查找的最好情况是O(1)，最坏情况是O(N)。\n- 二分查找的复杂度记为O(log N)\n\n## 第四章 利用大O给代码提速\n\n- 冒泡排序\n    - 基本步骤\n        - 指针首先指向头两个元素，比较大小，如果左边大于右边，则交换位置\n        - 将指针右移一位，重复第一步\n        - 到列表末尾，重新到列表头部重复第一二步\n        - 直到顺序正确，退出循环\n    - 按照最复杂的情况看，也就是完全倒序的列表进行冒泡排序的话，复杂度为O(N^2)\n```java\npublic static void bubbleSort(int[] nums) {\n    for (int i = 0; i < nums.length - 1; i++) {\n        for (int j = nums.length - 1; j > i; j--) {\n            if (nums[j] < nums[j-1]) {\n                int temp = nums[j];\n                nums[j] = nums[j-1];\n                nums[j-1] = temp;\n            }\n        }\n    }\n}\n```\n\n- 二次问题\n    - 解决一个数组中是否存在重复元素的问题\n    - 时间复杂度为O(N^2)的解决办法：\n```javascript\nfunction hasDuplicateValue(array) {\n    for(vari=0;i<array.length;i++) {\n        for(varj=0;j<array.length;j++){\n            if(i!==j&&array[i]==array[j]){\n                return true}\n        }\n    }\n    return false\n}\n```\n    - 时间复杂度为O(N)的解决办法：\n```javascript\nfunction hasDuplicateValue(array) {\n    var existingNumbers=[];\n    for(vari=0;i<array.length;i++){\n        // 将元素成员作为下标\n        if(existingNumbers[array[i]]===undefined){\n            existingNumbers[array[i]]=1;\n        } else {\n            returntrue;\n        } \n    }\n    return false;\n}\n```\n\n## 第五章 用或不用大O来优化代码\n       \n- 选择排序\n    - 基本步骤\n        - 从索引0开始，遍历数组，找到最小的数，将其和索引0的数字调换位置\n        - 第二次循环从索引1开始，找到最小数，和索引1的数字调换位置\n        - 如此循环，到最后一个数时就完成了排序\n    - 和冒泡排序一样，时间复杂度都表示为O(N^2)，但是实际效率比冒泡排序快一倍，也就是虽然更高效，但是没有指数上的差别\n    - **从这个角度说，性能调优不应该盲目只看大O记法所表示的复杂度，如果不能有数量级的差别，也应该具体分析后进行同一数量级的调优**\n```java\npublic static void selectionSort(int[] nums) {\n    int minIndex = 0;\n    for (int i = 0; i < nums.length - 1; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (nums[minIndex] > nums[j]) {\n                minIndex = j; // 获取最小的数\n            }\n        }\n        int temp = nums[i];\n        nums[i] = nums[minIndex];\n        nums[minIndex] = temp;\n    }\n}\n```\n\n## 第六章 乐观地调优\n\n- 假设排序数组并不是按照最差的情况进行排序，则总是会有更好更高效的方式进行排序\n- 插入排序\n    - 基本步骤\n        - 从索引1开始，将索引1的数字取出作为一个对比数字，然后从索引0开始，直到索引1结束，比较数字和对比数字的大小\n        - 遇到比它大的往右移动一位，遇到比它小的数字，或者索引左边的所有数字都右移了就停止这次循环\n        - 从索引2开始，重复1，2步骤    \n```python\ndef insertion_sort(array):\n    for index in range(1,len(array)):\n        position = index\n        temp_value = array[index]\n        while position > 0 and array[position-1] > temp_value:\n            array[position] = array[position-1]\n            position = position - 1 \n        array[position] = temp_value\n```\n- 实际时间复杂度为O(N^2 + 2N - 2)，忽略常数和只看最高次的N，则还是O(N^2)\n- **看似时间复杂度一样，但是在平均情况下，插入排序的效率是更高的**\n\n## 第七章 查找迅速的散列表\n\n- 散列表即map，或称字典，映射，关联数组\n- 查找效率为O(1)\n- 简单原理：暂且把散列中的键值对应关系视为乘法关系，如BAD值，转为字母表中的214，对应键为8\n- 散列值计算过程（简化）\n    - 散列表可以看成是一行能够存储数据的格子，就像数组那样。每个格子都有对应的编号\n    - 函数对键进行计算，如BAD=2*1*4=8\n    - 将BAD存到第8个格子上\n    - 当需要查找BAD对应的值时，计算机计算键BAD的散列值=8，因此直接找到第8个位置的值，复杂度为O(1)\n- 冲突解决\n    - 如上所诉的过程，如果又要存储DAB的值，算出来的散列值也是8，也要存到同一个位置上\n    - 将8的位置换成一个数组，即8这个位置可以存储多个键值对\n    - DAB的查找过程就变成，先计算散列值为8，然后找到8这个位置的数组，再用线性查找遍历数组，找到DAB\n    - 为了减少冲突，散列表的设计需要减少这种冲突，因此实际设计中散列值的计算要复杂很多\n- 散列表的效率决定因素\n    - 要存多少数据\n    - 有多少可用的格子\n    - 用什么样的散列函数\n    - 要避免冲突，就要增加存储空间，需要找到平衡\n\n## 第八章 用栈和队列来构造灵巧的代码\n       \n- 栈 LIFO（lastin，firstout）后进先出。\n    - 只在末尾插入数据\n    - 只能读取末尾数据\n    - 只能一处末尾数据\n    - **栈的末尾叫栈顶，栈的开头成为栈尾**\n    - 往栈里插入数据，称为**压栈**\n    - 从栈顶移出数据，称为**出栈**\n    - 一般来说，栈都是用来实现某些特殊算法（当数据的处理顺序要与接收顺序相反时），而不会用于存储数据\n- 队列 先进先出\n    - 只能在末尾插入数据（这跟栈一样）\n    - 只能读取开头的数据（这跟栈相反）\n    - 只能移除开头的数据（这也跟栈相反）\n    - 可用于处理网络数据接收处理等任务\n\n## 第九章 递归\n\n- 递归必需设置基准情形，即结束递归的条件\n- 计算机是用栈来记录每个调用中的函数。这个栈就叫作调用栈，也就是在递归场景中，按照321顺序调用，123顺序完成\n- 递归十分适用于那些无法预估计算深度的问题\n\n## 第十章 飞快的递归算法\n\n- 快速排序\n    - 基本步骤\n        - 首先找一个基准数，比如找最右边的数\n        - 两个指针分别指向数组开头和结尾（排除基准数之外）\n        - 两个指针每次都向中间各移动一步，左指针遇到大于等于基准数的数值时就停止移动，右指针遇到小于等于基准数的数值时停止移动\n        - 两指针所在数值的位置互换\n        - 重复2-4步骤，直到两个指针重合\n        - 将基准数与左指针指向的数值互换\n    - 以上步骤是以基准数为中心，将数组分为比基准数大的分区和比基准数小的分区，并没有完成最终排序\n    - **结合递归，在每个分区内再分别进行快速排序，最终就可以完成排序**\n    - **可以近似看作长度为N的数组，要进行N个分区的二分查找，二分查找的效率为logN，所以快速排序的效率近似为O(NlogN)**\n    - 大部分情况下都是表现最好的排序方式，因此多数语言内置排序都以快速排序实现\n```java\npublic static void quickSort(int a[], int left, int right) {\n    int i, j, t, temp;\n    if (left > right)\n        return;\n\n    temp = a[left]; // temp中存的就是基准数\n    i = left;\n    j = right;\n    while (i != j) {\n        // 顺序很重要，要先从右边开始找\n        while (a[j] >= temp && i < j)\n            j--;\n        // 再找左边的\n        while (a[i] <= temp && i < j)\n            i++;\n        // 交换两个数在数组中的位置\n        if (i < j) {\n            t = a[i];\n            a[i] = a[j];\n            a[j] = t;\n        }\n    }\n    // 最终将基准数归位\n    a[left] = a[i];\n    a[i] = temp;\n\n    quickSort(a, left, i - 1);// 继续处理左边的，这里是一个递归的过程\n    quickSort(a, i + 1, right);// 继续处理右边的 ，这里是一个递归的过程\n}\n```\n- 快速选择\n    - 用于查找无序数组中指定大小的数字，比如长度为10的数组中查找第二小的数字\n    - 结合快速排序和二分法，先用快速排序对数组进行分区，每次分完区之后，基准数落下的位置就是这个数组中第几大的数字\n    - 根据这个方法，快速选择可以用O(N)的复杂度获取到需要的数字\n\n## 第十一章 基于结点的数据结构\n\n- 链表\n    - 和数组不同的是，链表中的各个元素不是连续的，这种不相邻的格子叫做**结点**\n    - 每个结点存储数据以及下一个结点的地址来实现链表，这些存储下个结点地址的额外数据就是**链**\n    - 链表的好处是不需要内存分配连续的空间\n    - 读取\n        - 不像连续数组，计算机不知道某个结点的地址，只知道开头结点的地址，因此需要遍历\n        - 读取的复杂度为O(N)\n    - 查找：读取一样，需要从链表开头进行逐一遍历，复杂度为O(N)\n    - 插入\n        - 链表的插入需要先找到插入的位置，如前所述，这个过程的时间复杂度为O(N)\n        - 随后将插入位置的上一个结点指向的地址改为当前结点的地址，复杂度为O(1)\n        - 和有序列表相反的是，在表头插入数据步骤是最少的，在最后一位插入步骤是最多的\n    - 删除：大致上和插入的原理差不多，时间复杂度同样为O(N)\n- **为什么用链表**\n    - 从上述分析看，链表增删改查的效率并没有比数组快\n    - 但在某些业务场景下，比如从一堆数组中删除指定条件的无效数据\n        - 数组的操作过程是，每次找到一条无效数据后，先进行删除，然后将右边的数据进行左移，如果在最坏的情况下，无效数据都在数组开头，那每次删除都相当于要移动一遍整个数组\n        - 链表的操作过程，省略了每次删除后左移的过程，只需遍历一次数组即可\n        - 增加数据也是同理\n    - 因此，相比数组，链表的增删效率更高\n- 双向链表\n    - 即每个结点除了存储下个结点的地址，还会存储上一个结点的地址\n    - 增删改查可以从头部或者尾部开始\n    - 这种特性可以使双向链表作为队列的底层实现，这样增删复杂度都是O(1)\n\n## 第十二章 二叉树\n\n- 前文提到，有序列表的查找(二分法 O(logN))和读取 (O(1))非常快，但是插入和删除效率较低(O(N))；而散列表的查找，插入和删除效率较高(O(1))，但却是无序的\n![](tree.png)\n- 二叉树\n    - 每个结点链接着另外两个结点\n    - 最上面的那一结点（此例中的“j”）被称为**根**\n    - 此例中，“j”是“m”和“b”的**父结点**，反过来，“m”和“b”是“j”的**子结点**。“m”又是“q”和“z”的父结点，“q”和“z”是“m”的子结点\n    - 树可以分**层**。此例中的树有3层\n    - 每个结点的子结点数量可为0、1、2\n    - 如果有两个子结点，**则其中一个子结点的值必须小于父结点，另一个子结点的值必须大于父结点**\n- 二叉树查找的原理类似于二分法，因此复杂度为O(logN)\n- 插入同样也是O(logN)，因为找到需要插入的结点即可，无需像有序数组那样移动\n- **需要乱序生成的二叉树才能高效，原理看图可知**\n![](tree2.png)\n![](tree3.png)\n- 二叉树的删除\n    - 规则较多，如果是删除最底下的子结点复杂度为O(logN)，但是如果删除某个父结点，需要考虑\n    - 如果要删除的结点有一个子结点，那删掉它之后，还要将子结点填到被删除结点的位置上\n    - 如果要删除的结点有两个子结点，则从其子结点中选取后继结点。后继结点的选取规则是，所有比被删除结点大的子结点中，最小的那个。下图例子中就是将61作为替换\n    ![](tree4.png)\n    ![](tree5.png)\n    - 查找后继结点的方法：跳到被删除结点的右子结点，然后一路只往左子结点上跳，直到没有左子结点为止，则所停留的结点就是被删除节点的后继结\n        - 如果后继结点带有右子结点，则在后继结点填补被删除结点以后，用此右子结点替代后继结点的父节点的左子结点\n        ![](tree6.png)\n        ![](tree7.png)\n        ![](tree8.png)\n    - 尽管看起来规则复杂，然而这些额外步骤都是寥寥几步就可以完成，删除的主要过程依然是查找结点的过程，所以复杂度还是O(logN)\n    \n## 第十三章 连接万物的图\n\n![](graph.png)\n- 每个结点都是一个**顶点**，每条线段都是一条**边**。当两个顶点通过一条边联系在一起时，我们会说这两个顶点是相邻的。\n- 以Facebook和twitter为例，facebook是双向的关系，而twitter是单向的\n![](graph2.png)\n- 可用散列表来实现图\n- 广度优先搜索\n    - 需要用队列记录后续要处理哪些顶点\n    - 找出当前顶点的所有邻接点。如果有哪个是没访问过的，就把它标为“已访问”，并且将它入队。（尽管该顶点并未作为“当前顶点”被访问过。）\n    - 如果当前顶点没有未访问的邻接点，且队列不为空，那就再从队列中移出一个顶点作为当前顶点。\n    - 如果当前顶点没有未访问的邻接点，且队列里也没有其他顶点，那么算法完成。\n    - 简单点说就是每次只处理下一层的数据\n\n      \n      \n      \n      \n      \n\n  \n    \n\n    \n        \n    \n\n\n    \n\n","slug":"read/读书笔记-数据结构和算法图解","published":1,"updated":"2022-03-24T00:55:41.000Z","_id":"cl11x5xgk00000acfc0xj0how","layout":"post","photos":[],"link":"","content":"<p><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/1.jpg\"></p>\n<h2 id=\"第一章-数据结构为何重要\"><a href=\"#第一章-数据结构为何重要\" class=\"headerlink\" title=\"第一章 数据结构为何重要\"></a>第一章 数据结构为何重要</h2><ul>\n<li><strong>操作的速度，并不按时间计算，而是按步数计算。理解这个观点</strong>，因为不同机器其实运行速度都会有差异，真正决定效率的是一个操作的步数。</li>\n<li>读取是一步到位，意味着是读取数组的索引<ul>\n<li>计算机的内存可以看成一堆格子，内存的格子是地址连续的</li>\n<li>声明数组时，是在内存中划分出一些连续的格子</li>\n<li>查找任意索引，最多都是只需要1步</li>\n</ul>\n</li>\n<li>查找意味着从数组中寻找是否存在某个值<ul>\n<li>计算机需要从索引0开始寻找，即线性查找</li>\n<li>查找任意内容，最多步骤为数组的索引长度N</li>\n</ul>\n</li>\n<li>计算机知道数组的索引开始位置和结束位置<ul>\n<li>插入末尾只需要一步，直接在末尾插入即可</li>\n<li>开头或中间的位置，需要先移动其他元素的位置，再进行插入</li>\n<li>最复杂的插入，是在数组开头插入，意味着需要将N个元素都右移，再将元素插入，即N+1步</li>\n</ul>\n</li>\n<li>删除任意元素都需要将右边的元素左移，以保持数组的连续性和完整性</li>\n<li>最复杂的删除是删除开头元素，删除为1步，之后将N-1个元素左移，最终为N步</li>\n<li>集合是一种不允许元素重复的数据结构<ul>\n<li>读取，查找，删除和数组的效率是一致的</li>\n<li>插入的效率和数组不同<ul>\n<li>需要先确定这个元素在不在集合内，因此需要先查找一遍，如前文所诉，最多需要N步</li>\n<li>确定要插入的元素不在集合内后，进行插入，和数组一样，最多需要N+1步</li>\n<li>因此集合的插入最终的复杂度为2N+1步<span id=\"more\"></span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章-算法为何重要\"><a href=\"#第二章-算法为何重要\" class=\"headerlink\" title=\"第二章 算法为何重要\"></a>第二章 算法为何重要</h2><ul>\n<li>和数组的区别就在于里面的元素是按照规则排序的。读取和删除跟数组效率一样。</li>\n<li>插入元素<ul>\n<li>首先需要根据排序规则，从索引0的位置开始遍历，找到这个元素在有序数组中的位置，最多N步</li>\n<li>将该位置的元素右移，然后插入，这是2步，因此最多N+2步。</li>\n</ul>\n</li>\n<li>查找元素<ul>\n<li>有序数组的查找比数组的查找效率更高，因为排列有序，所以如果某个元素比查找元素要大，那就可以停止查找。</li>\n</ul>\n</li>\n<li>二分查找的前提是有序数组</li>\n<li>数组长度每次翻倍，二分查找的操作步数只会+1。而线性查找却会跟着一起翻倍。</li>\n</ul>\n<h2 id=\"第三章-大O记法\"><a href=\"#第三章-大O记法\" class=\"headerlink\" title=\"第三章 大O记法\"></a>第三章 大O记法</h2><ul>\n<li>无论数组多大，操作都只要一步，记为O(1)</li>\n<li>数组长度为N，操作需要用N步，记为O(N)</li>\n<li>当数据增长时，步数如何变化？<ul>\n<li>O(N) 被称为线性时间，随着数组长度增长，步数每次+1</li>\n<li>O(1) 被称为常数时间，表示随着数组长度增长，步数不变</li>\n</ul>\n</li>\n<li>线性查找的最好情况是O(1)，最坏情况是O(N)。</li>\n<li>二分查找的复杂度记为O(log N)</li>\n</ul>\n<h2 id=\"第四章-利用大O给代码提速\"><a href=\"#第四章-利用大O给代码提速\" class=\"headerlink\" title=\"第四章 利用大O给代码提速\"></a>第四章 利用大O给代码提速</h2><ul>\n<li><p>冒泡排序</p>\n<ul>\n<li>基本步骤<ul>\n<li>指针首先指向头两个元素，比较大小，如果左边大于右边，则交换位置</li>\n<li>将指针右移一位，重复第一步</li>\n<li>到列表末尾，重新到列表头部重复第一二步</li>\n<li>直到顺序正确，退出循环</li>\n</ul>\n</li>\n<li>按照最复杂的情况看，也就是完全倒序的列表进行冒泡排序的话，复杂度为O(N^2)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = nums.length - <span class=\"number\">1</span>; j &gt; i; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] &lt; nums[j-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = nums[j];</span><br><span class=\"line\">                nums[j] = nums[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                nums[j-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>二次问题</p>\n<ul>\n<li>解决一个数组中是否存在重复元素的问题</li>\n<li>时间复杂度为O(N^2)的解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasDuplicateValue</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(vari=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(varj=<span class=\"number\">0</span>;j&lt;array.length;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!==j&amp;&amp;array[i]==array[j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>时间复杂度为O(N)的解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasDuplicateValue</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingNumbers=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(vari=<span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将元素成员作为下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(existingNumbers[array[i]]===<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            existingNumbers[array[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            returntrue;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-用或不用大O来优化代码\"><a href=\"#第五章-用或不用大O来优化代码\" class=\"headerlink\" title=\"第五章 用或不用大O来优化代码\"></a>第五章 用或不用大O来优化代码</h2><ul>\n<li>选择排序<ul>\n<li>基本步骤<ul>\n<li>从索引0开始，遍历数组，找到最小的数，将其和索引0的数字调换位置</li>\n<li>第二次循环从索引1开始，找到最小数，和索引1的数字调换位置</li>\n<li>如此循环，到最后一个数时就完成了排序</li>\n</ul>\n</li>\n<li>和冒泡排序一样，时间复杂度都表示为O(N^2)，但是实际效率比冒泡排序快一倍，也就是虽然更高效，但是没有指数上的差别</li>\n<li><strong>从这个角度说，性能调优不应该盲目只看大O记法所表示的复杂度，如果不能有数量级的差别，也应该具体分析后进行同一数量级的调优</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[minIndex] &gt; nums[j]) &#123;</span><br><span class=\"line\">                minIndex = j; <span class=\"comment\">// 获取最小的数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[minIndex];</span><br><span class=\"line\">        nums[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-乐观地调优\"><a href=\"#第六章-乐观地调优\" class=\"headerlink\" title=\"第六章 乐观地调优\"></a>第六章 乐观地调优</h2><ul>\n<li>假设排序数组并不是按照最差的情况进行排序，则总是会有更好更高效的方式进行排序</li>\n<li>插入排序<ul>\n<li>基本步骤<ul>\n<li>从索引1开始，将索引1的数字取出作为一个对比数字，然后从索引0开始，直到索引1结束，比较数字和对比数字的大小</li>\n<li>遇到比它大的往右移动一位，遇到比它小的数字，或者索引左边的所有数字都右移了就停止这次循环</li>\n<li>从索引2开始，重复1，2步骤    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertion_sort</span>(<span class=\"params\">array</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(array)):</span><br><span class=\"line\">        position = index</span><br><span class=\"line\">        temp_value = array[index]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> position &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> array[position-<span class=\"number\">1</span>] &gt; temp_value:</span><br><span class=\"line\">            array[position] = array[position-<span class=\"number\">1</span>]</span><br><span class=\"line\">            position = position - <span class=\"number\">1</span> </span><br><span class=\"line\">        array[position] = temp_value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实际时间复杂度为O(N^2 + 2N - 2)，忽略常数和只看最高次的N，则还是O(N^2)</li>\n<li><strong>看似时间复杂度一样，但是在平均情况下，插入排序的效率是更高的</strong></li>\n</ul>\n<h2 id=\"第七章-查找迅速的散列表\"><a href=\"#第七章-查找迅速的散列表\" class=\"headerlink\" title=\"第七章 查找迅速的散列表\"></a>第七章 查找迅速的散列表</h2><ul>\n<li>散列表即map，或称字典，映射，关联数组</li>\n<li>查找效率为O(1)</li>\n<li>简单原理：暂且把散列中的键值对应关系视为乘法关系，如BAD值，转为字母表中的214，对应键为8</li>\n<li>散列值计算过程（简化）<ul>\n<li>散列表可以看成是一行能够存储数据的格子，就像数组那样。每个格子都有对应的编号</li>\n<li>函数对键进行计算，如BAD=2<em>1</em>4=8</li>\n<li>将BAD存到第8个格子上</li>\n<li>当需要查找BAD对应的值时，计算机计算键BAD的散列值=8，因此直接找到第8个位置的值，复杂度为O(1)</li>\n</ul>\n</li>\n<li>冲突解决<ul>\n<li>如上所诉的过程，如果又要存储DAB的值，算出来的散列值也是8，也要存到同一个位置上</li>\n<li>将8的位置换成一个数组，即8这个位置可以存储多个键值对</li>\n<li>DAB的查找过程就变成，先计算散列值为8，然后找到8这个位置的数组，再用线性查找遍历数组，找到DAB</li>\n<li>为了减少冲突，散列表的设计需要减少这种冲突，因此实际设计中散列值的计算要复杂很多</li>\n</ul>\n</li>\n<li>散列表的效率决定因素<ul>\n<li>要存多少数据</li>\n<li>有多少可用的格子</li>\n<li>用什么样的散列函数</li>\n<li>要避免冲突，就要增加存储空间，需要找到平衡</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第八章-用栈和队列来构造灵巧的代码\"><a href=\"#第八章-用栈和队列来构造灵巧的代码\" class=\"headerlink\" title=\"第八章 用栈和队列来构造灵巧的代码\"></a>第八章 用栈和队列来构造灵巧的代码</h2><ul>\n<li>栈 LIFO（lastin，firstout）后进先出。<ul>\n<li>只在末尾插入数据</li>\n<li>只能读取末尾数据</li>\n<li>只能一处末尾数据</li>\n<li><strong>栈的末尾叫栈顶，栈的开头成为栈尾</strong></li>\n<li>往栈里插入数据，称为<strong>压栈</strong></li>\n<li>从栈顶移出数据，称为<strong>出栈</strong></li>\n<li>一般来说，栈都是用来实现某些特殊算法（当数据的处理顺序要与接收顺序相反时），而不会用于存储数据</li>\n</ul>\n</li>\n<li>队列 先进先出<ul>\n<li>只能在末尾插入数据（这跟栈一样）</li>\n<li>只能读取开头的数据（这跟栈相反）</li>\n<li>只能移除开头的数据（这也跟栈相反）</li>\n<li>可用于处理网络数据接收处理等任务</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第九章-递归\"><a href=\"#第九章-递归\" class=\"headerlink\" title=\"第九章 递归\"></a>第九章 递归</h2><ul>\n<li>递归必需设置基准情形，即结束递归的条件</li>\n<li>计算机是用栈来记录每个调用中的函数。这个栈就叫作调用栈，也就是在递归场景中，按照321顺序调用，123顺序完成</li>\n<li>递归十分适用于那些无法预估计算深度的问题</li>\n</ul>\n<h2 id=\"第十章-飞快的递归算法\"><a href=\"#第十章-飞快的递归算法\" class=\"headerlink\" title=\"第十章 飞快的递归算法\"></a>第十章 飞快的递归算法</h2><ul>\n<li>快速排序<ul>\n<li>基本步骤<ul>\n<li>首先找一个基准数，比如找最右边的数</li>\n<li>两个指针分别指向数组开头和结尾（排除基准数之外）</li>\n<li>两个指针每次都向中间各移动一步，左指针遇到大于等于基准数的数值时就停止移动，右指针遇到小于等于基准数的数值时停止移动</li>\n<li>两指针所在数值的位置互换</li>\n<li>重复2-4步骤，直到两个指针重合</li>\n<li>将基准数与左指针指向的数值互换</li>\n</ul>\n</li>\n<li>以上步骤是以基准数为中心，将数组分为比基准数大的分区和比基准数小的分区，并没有完成最终排序</li>\n<li><strong>结合递归，在每个分区内再分别进行快速排序，最终就可以完成排序</strong></li>\n<li><strong>可以近似看作长度为N的数组，要进行N个分区的二分查找，二分查找的效率为logN，所以快速排序的效率近似为O(NlogN)</strong></li>\n<li>大部分情况下都是表现最好的排序方式，因此多数语言内置排序都以快速排序实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, t, temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    temp = a[left]; <span class=\"comment\">// temp中存的就是基准数</span></span><br><span class=\"line\">    i = left;</span><br><span class=\"line\">    j = right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i != j) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序很重要，要先从右边开始找</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"comment\">// 再找左边的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"comment\">// 交换两个数在数组中的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">            t = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最终将基准数归位</span></span><br><span class=\"line\">    a[left] = a[i];</span><br><span class=\"line\">    a[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    quickSort(a, left, i - <span class=\"number\">1</span>);<span class=\"comment\">// 继续处理左边的，这里是一个递归的过程</span></span><br><span class=\"line\">    quickSort(a, i + <span class=\"number\">1</span>, right);<span class=\"comment\">// 继续处理右边的 ，这里是一个递归的过程</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>快速选择<ul>\n<li>用于查找无序数组中指定大小的数字，比如长度为10的数组中查找第二小的数字</li>\n<li>结合快速排序和二分法，先用快速排序对数组进行分区，每次分完区之后，基准数落下的位置就是这个数组中第几大的数字</li>\n<li>根据这个方法，快速选择可以用O(N)的复杂度获取到需要的数字</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十一章-基于结点的数据结构\"><a href=\"#第十一章-基于结点的数据结构\" class=\"headerlink\" title=\"第十一章 基于结点的数据结构\"></a>第十一章 基于结点的数据结构</h2><ul>\n<li>链表<ul>\n<li>和数组不同的是，链表中的各个元素不是连续的，这种不相邻的格子叫做<strong>结点</strong></li>\n<li>每个结点存储数据以及下一个结点的地址来实现链表，这些存储下个结点地址的额外数据就是<strong>链</strong></li>\n<li>链表的好处是不需要内存分配连续的空间</li>\n<li>读取<ul>\n<li>不像连续数组，计算机不知道某个结点的地址，只知道开头结点的地址，因此需要遍历</li>\n<li>读取的复杂度为O(N)</li>\n</ul>\n</li>\n<li>查找：读取一样，需要从链表开头进行逐一遍历，复杂度为O(N)</li>\n<li>插入<ul>\n<li>链表的插入需要先找到插入的位置，如前所述，这个过程的时间复杂度为O(N)</li>\n<li>随后将插入位置的上一个结点指向的地址改为当前结点的地址，复杂度为O(1)</li>\n<li>和有序列表相反的是，在表头插入数据步骤是最少的，在最后一位插入步骤是最多的</li>\n</ul>\n</li>\n<li>删除：大致上和插入的原理差不多，时间复杂度同样为O(N)</li>\n</ul>\n</li>\n<li><strong>为什么用链表</strong><ul>\n<li>从上述分析看，链表增删改查的效率并没有比数组快</li>\n<li>但在某些业务场景下，比如从一堆数组中删除指定条件的无效数据<ul>\n<li>数组的操作过程是，每次找到一条无效数据后，先进行删除，然后将右边的数据进行左移，如果在最坏的情况下，无效数据都在数组开头，那每次删除都相当于要移动一遍整个数组</li>\n<li>链表的操作过程，省略了每次删除后左移的过程，只需遍历一次数组即可</li>\n<li>增加数据也是同理</li>\n</ul>\n</li>\n<li>因此，相比数组，链表的增删效率更高</li>\n</ul>\n</li>\n<li>双向链表<ul>\n<li>即每个结点除了存储下个结点的地址，还会存储上一个结点的地址</li>\n<li>增删改查可以从头部或者尾部开始</li>\n<li>这种特性可以使双向链表作为队列的底层实现，这样增删复杂度都是O(1)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十二章-二叉树\"><a href=\"#第十二章-二叉树\" class=\"headerlink\" title=\"第十二章 二叉树\"></a>第十二章 二叉树</h2><ul>\n<li>前文提到，有序列表的查找(二分法 O(logN))和读取 (O(1))非常快，但是插入和删除效率较低(O(N))；而散列表的查找，插入和删除效率较高(O(1))，但却是无序的<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree.png\"></li>\n<li>二叉树<ul>\n<li>每个结点链接着另外两个结点</li>\n<li>最上面的那一结点（此例中的“j”）被称为<strong>根</strong></li>\n<li>此例中，“j”是“m”和“b”的<strong>父结点</strong>，反过来，“m”和“b”是“j”的<strong>子结点</strong>。“m”又是“q”和“z”的父结点，“q”和“z”是“m”的子结点</li>\n<li>树可以分<strong>层</strong>。此例中的树有3层</li>\n<li>每个结点的子结点数量可为0、1、2</li>\n<li>如果有两个子结点，<strong>则其中一个子结点的值必须小于父结点，另一个子结点的值必须大于父结点</strong></li>\n</ul>\n</li>\n<li>二叉树查找的原理类似于二分法，因此复杂度为O(logN)</li>\n<li>插入同样也是O(logN)，因为找到需要插入的结点即可，无需像有序数组那样移动</li>\n<li><strong>需要乱序生成的二叉树才能高效，原理看图可知</strong><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree2.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree3.png\"></li>\n<li>二叉树的删除<ul>\n<li>规则较多，如果是删除最底下的子结点复杂度为O(logN)，但是如果删除某个父结点，需要考虑</li>\n<li>如果要删除的结点有一个子结点，那删掉它之后，还要将子结点填到被删除结点的位置上</li>\n<li>如果要删除的结点有两个子结点，则从其子结点中选取后继结点。后继结点的选取规则是，所有比被删除结点大的子结点中，最小的那个。下图例子中就是将61作为替换<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree4.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree5.png\"></li>\n<li>查找后继结点的方法：跳到被删除结点的右子结点，然后一路只往左子结点上跳，直到没有左子结点为止，则所停留的结点就是被删除节点的后继结<ul>\n<li>如果后继结点带有右子结点，则在后继结点填补被删除结点以后，用此右子结点替代后继结点的父节点的左子结点<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree6.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree7.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree8.png\"></li>\n</ul>\n</li>\n<li>尽管看起来规则复杂，然而这些额外步骤都是寥寥几步就可以完成，删除的主要过程依然是查找结点的过程，所以复杂度还是O(logN)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十三章-连接万物的图\"><a href=\"#第十三章-连接万物的图\" class=\"headerlink\" title=\"第十三章 连接万物的图\"></a>第十三章 连接万物的图</h2><p><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/graph.png\"></p>\n<ul>\n<li>每个结点都是一个<strong>顶点</strong>，每条线段都是一条<strong>边</strong>。当两个顶点通过一条边联系在一起时，我们会说这两个顶点是相邻的。</li>\n<li>以Facebook和twitter为例，facebook是双向的关系，而twitter是单向的<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/graph2.png\"></li>\n<li>可用散列表来实现图</li>\n<li>广度优先搜索<ul>\n<li>需要用队列记录后续要处理哪些顶点</li>\n<li>找出当前顶点的所有邻接点。如果有哪个是没访问过的，就把它标为“已访问”，并且将它入队。（尽管该顶点并未作为“当前顶点”被访问过。）</li>\n<li>如果当前顶点没有未访问的邻接点，且队列不为空，那就再从队列中移出一个顶点作为当前顶点。</li>\n<li>如果当前顶点没有未访问的邻接点，且队列里也没有其他顶点，那么算法完成。</li>\n<li>简单点说就是每次只处理下一层的数据</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/1.jpg\"></p>\n<h2 id=\"第一章-数据结构为何重要\"><a href=\"#第一章-数据结构为何重要\" class=\"headerlink\" title=\"第一章 数据结构为何重要\"></a>第一章 数据结构为何重要</h2><ul>\n<li><strong>操作的速度，并不按时间计算，而是按步数计算。理解这个观点</strong>，因为不同机器其实运行速度都会有差异，真正决定效率的是一个操作的步数。</li>\n<li>读取是一步到位，意味着是读取数组的索引<ul>\n<li>计算机的内存可以看成一堆格子，内存的格子是地址连续的</li>\n<li>声明数组时，是在内存中划分出一些连续的格子</li>\n<li>查找任意索引，最多都是只需要1步</li>\n</ul>\n</li>\n<li>查找意味着从数组中寻找是否存在某个值<ul>\n<li>计算机需要从索引0开始寻找，即线性查找</li>\n<li>查找任意内容，最多步骤为数组的索引长度N</li>\n</ul>\n</li>\n<li>计算机知道数组的索引开始位置和结束位置<ul>\n<li>插入末尾只需要一步，直接在末尾插入即可</li>\n<li>开头或中间的位置，需要先移动其他元素的位置，再进行插入</li>\n<li>最复杂的插入，是在数组开头插入，意味着需要将N个元素都右移，再将元素插入，即N+1步</li>\n</ul>\n</li>\n<li>删除任意元素都需要将右边的元素左移，以保持数组的连续性和完整性</li>\n<li>最复杂的删除是删除开头元素，删除为1步，之后将N-1个元素左移，最终为N步</li>\n<li>集合是一种不允许元素重复的数据结构<ul>\n<li>读取，查找，删除和数组的效率是一致的</li>\n<li>插入的效率和数组不同<ul>\n<li>需要先确定这个元素在不在集合内，因此需要先查找一遍，如前文所诉，最多需要N步</li>\n<li>确定要插入的元素不在集合内后，进行插入，和数组一样，最多需要N+1步</li>\n<li>因此集合的插入最终的复杂度为2N+1步","more":"</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章-算法为何重要\"><a href=\"#第二章-算法为何重要\" class=\"headerlink\" title=\"第二章 算法为何重要\"></a>第二章 算法为何重要</h2><ul>\n<li>和数组的区别就在于里面的元素是按照规则排序的。读取和删除跟数组效率一样。</li>\n<li>插入元素<ul>\n<li>首先需要根据排序规则，从索引0的位置开始遍历，找到这个元素在有序数组中的位置，最多N步</li>\n<li>将该位置的元素右移，然后插入，这是2步，因此最多N+2步。</li>\n</ul>\n</li>\n<li>查找元素<ul>\n<li>有序数组的查找比数组的查找效率更高，因为排列有序，所以如果某个元素比查找元素要大，那就可以停止查找。</li>\n</ul>\n</li>\n<li>二分查找的前提是有序数组</li>\n<li>数组长度每次翻倍，二分查找的操作步数只会+1。而线性查找却会跟着一起翻倍。</li>\n</ul>\n<h2 id=\"第三章-大O记法\"><a href=\"#第三章-大O记法\" class=\"headerlink\" title=\"第三章 大O记法\"></a>第三章 大O记法</h2><ul>\n<li>无论数组多大，操作都只要一步，记为O(1)</li>\n<li>数组长度为N，操作需要用N步，记为O(N)</li>\n<li>当数据增长时，步数如何变化？<ul>\n<li>O(N) 被称为线性时间，随着数组长度增长，步数每次+1</li>\n<li>O(1) 被称为常数时间，表示随着数组长度增长，步数不变</li>\n</ul>\n</li>\n<li>线性查找的最好情况是O(1)，最坏情况是O(N)。</li>\n<li>二分查找的复杂度记为O(log N)</li>\n</ul>\n<h2 id=\"第四章-利用大O给代码提速\"><a href=\"#第四章-利用大O给代码提速\" class=\"headerlink\" title=\"第四章 利用大O给代码提速\"></a>第四章 利用大O给代码提速</h2><ul>\n<li><p>冒泡排序</p>\n<ul>\n<li>基本步骤<ul>\n<li>指针首先指向头两个元素，比较大小，如果左边大于右边，则交换位置</li>\n<li>将指针右移一位，重复第一步</li>\n<li>到列表末尾，重新到列表头部重复第一二步</li>\n<li>直到顺序正确，退出循环</li>\n</ul>\n</li>\n<li>按照最复杂的情况看，也就是完全倒序的列表进行冒泡排序的话，复杂度为O(N^2)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = nums.length - <span class=\"number\">1</span>; j &gt; i; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] &lt; nums[j-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = nums[j];</span><br><span class=\"line\">                nums[j] = nums[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                nums[j-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>二次问题</p>\n<ul>\n<li>解决一个数组中是否存在重复元素的问题</li>\n<li>时间复杂度为O(N^2)的解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasDuplicateValue</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(vari=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(varj=<span class=\"number\">0</span>;j&lt;array.length;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!==j&amp;&amp;array[i]==array[j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>时间复杂度为O(N)的解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasDuplicateValue</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingNumbers=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(vari=<span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将元素成员作为下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(existingNumbers[array[i]]===<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            existingNumbers[array[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            returntrue;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-用或不用大O来优化代码\"><a href=\"#第五章-用或不用大O来优化代码\" class=\"headerlink\" title=\"第五章 用或不用大O来优化代码\"></a>第五章 用或不用大O来优化代码</h2><ul>\n<li>选择排序<ul>\n<li>基本步骤<ul>\n<li>从索引0开始，遍历数组，找到最小的数，将其和索引0的数字调换位置</li>\n<li>第二次循环从索引1开始，找到最小数，和索引1的数字调换位置</li>\n<li>如此循环，到最后一个数时就完成了排序</li>\n</ul>\n</li>\n<li>和冒泡排序一样，时间复杂度都表示为O(N^2)，但是实际效率比冒泡排序快一倍，也就是虽然更高效，但是没有指数上的差别</li>\n<li><strong>从这个角度说，性能调优不应该盲目只看大O记法所表示的复杂度，如果不能有数量级的差别，也应该具体分析后进行同一数量级的调优</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[minIndex] &gt; nums[j]) &#123;</span><br><span class=\"line\">                minIndex = j; <span class=\"comment\">// 获取最小的数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[minIndex];</span><br><span class=\"line\">        nums[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-乐观地调优\"><a href=\"#第六章-乐观地调优\" class=\"headerlink\" title=\"第六章 乐观地调优\"></a>第六章 乐观地调优</h2><ul>\n<li>假设排序数组并不是按照最差的情况进行排序，则总是会有更好更高效的方式进行排序</li>\n<li>插入排序<ul>\n<li>基本步骤<ul>\n<li>从索引1开始，将索引1的数字取出作为一个对比数字，然后从索引0开始，直到索引1结束，比较数字和对比数字的大小</li>\n<li>遇到比它大的往右移动一位，遇到比它小的数字，或者索引左边的所有数字都右移了就停止这次循环</li>\n<li>从索引2开始，重复1，2步骤    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertion_sort</span>(<span class=\"params\">array</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(array)):</span><br><span class=\"line\">        position = index</span><br><span class=\"line\">        temp_value = array[index]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> position &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> array[position-<span class=\"number\">1</span>] &gt; temp_value:</span><br><span class=\"line\">            array[position] = array[position-<span class=\"number\">1</span>]</span><br><span class=\"line\">            position = position - <span class=\"number\">1</span> </span><br><span class=\"line\">        array[position] = temp_value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实际时间复杂度为O(N^2 + 2N - 2)，忽略常数和只看最高次的N，则还是O(N^2)</li>\n<li><strong>看似时间复杂度一样，但是在平均情况下，插入排序的效率是更高的</strong></li>\n</ul>\n<h2 id=\"第七章-查找迅速的散列表\"><a href=\"#第七章-查找迅速的散列表\" class=\"headerlink\" title=\"第七章 查找迅速的散列表\"></a>第七章 查找迅速的散列表</h2><ul>\n<li>散列表即map，或称字典，映射，关联数组</li>\n<li>查找效率为O(1)</li>\n<li>简单原理：暂且把散列中的键值对应关系视为乘法关系，如BAD值，转为字母表中的214，对应键为8</li>\n<li>散列值计算过程（简化）<ul>\n<li>散列表可以看成是一行能够存储数据的格子，就像数组那样。每个格子都有对应的编号</li>\n<li>函数对键进行计算，如BAD=2<em>1</em>4=8</li>\n<li>将BAD存到第8个格子上</li>\n<li>当需要查找BAD对应的值时，计算机计算键BAD的散列值=8，因此直接找到第8个位置的值，复杂度为O(1)</li>\n</ul>\n</li>\n<li>冲突解决<ul>\n<li>如上所诉的过程，如果又要存储DAB的值，算出来的散列值也是8，也要存到同一个位置上</li>\n<li>将8的位置换成一个数组，即8这个位置可以存储多个键值对</li>\n<li>DAB的查找过程就变成，先计算散列值为8，然后找到8这个位置的数组，再用线性查找遍历数组，找到DAB</li>\n<li>为了减少冲突，散列表的设计需要减少这种冲突，因此实际设计中散列值的计算要复杂很多</li>\n</ul>\n</li>\n<li>散列表的效率决定因素<ul>\n<li>要存多少数据</li>\n<li>有多少可用的格子</li>\n<li>用什么样的散列函数</li>\n<li>要避免冲突，就要增加存储空间，需要找到平衡</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第八章-用栈和队列来构造灵巧的代码\"><a href=\"#第八章-用栈和队列来构造灵巧的代码\" class=\"headerlink\" title=\"第八章 用栈和队列来构造灵巧的代码\"></a>第八章 用栈和队列来构造灵巧的代码</h2><ul>\n<li>栈 LIFO（lastin，firstout）后进先出。<ul>\n<li>只在末尾插入数据</li>\n<li>只能读取末尾数据</li>\n<li>只能一处末尾数据</li>\n<li><strong>栈的末尾叫栈顶，栈的开头成为栈尾</strong></li>\n<li>往栈里插入数据，称为<strong>压栈</strong></li>\n<li>从栈顶移出数据，称为<strong>出栈</strong></li>\n<li>一般来说，栈都是用来实现某些特殊算法（当数据的处理顺序要与接收顺序相反时），而不会用于存储数据</li>\n</ul>\n</li>\n<li>队列 先进先出<ul>\n<li>只能在末尾插入数据（这跟栈一样）</li>\n<li>只能读取开头的数据（这跟栈相反）</li>\n<li>只能移除开头的数据（这也跟栈相反）</li>\n<li>可用于处理网络数据接收处理等任务</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第九章-递归\"><a href=\"#第九章-递归\" class=\"headerlink\" title=\"第九章 递归\"></a>第九章 递归</h2><ul>\n<li>递归必需设置基准情形，即结束递归的条件</li>\n<li>计算机是用栈来记录每个调用中的函数。这个栈就叫作调用栈，也就是在递归场景中，按照321顺序调用，123顺序完成</li>\n<li>递归十分适用于那些无法预估计算深度的问题</li>\n</ul>\n<h2 id=\"第十章-飞快的递归算法\"><a href=\"#第十章-飞快的递归算法\" class=\"headerlink\" title=\"第十章 飞快的递归算法\"></a>第十章 飞快的递归算法</h2><ul>\n<li>快速排序<ul>\n<li>基本步骤<ul>\n<li>首先找一个基准数，比如找最右边的数</li>\n<li>两个指针分别指向数组开头和结尾（排除基准数之外）</li>\n<li>两个指针每次都向中间各移动一步，左指针遇到大于等于基准数的数值时就停止移动，右指针遇到小于等于基准数的数值时停止移动</li>\n<li>两指针所在数值的位置互换</li>\n<li>重复2-4步骤，直到两个指针重合</li>\n<li>将基准数与左指针指向的数值互换</li>\n</ul>\n</li>\n<li>以上步骤是以基准数为中心，将数组分为比基准数大的分区和比基准数小的分区，并没有完成最终排序</li>\n<li><strong>结合递归，在每个分区内再分别进行快速排序，最终就可以完成排序</strong></li>\n<li><strong>可以近似看作长度为N的数组，要进行N个分区的二分查找，二分查找的效率为logN，所以快速排序的效率近似为O(NlogN)</strong></li>\n<li>大部分情况下都是表现最好的排序方式，因此多数语言内置排序都以快速排序实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, t, temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    temp = a[left]; <span class=\"comment\">// temp中存的就是基准数</span></span><br><span class=\"line\">    i = left;</span><br><span class=\"line\">    j = right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i != j) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序很重要，要先从右边开始找</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"comment\">// 再找左边的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"comment\">// 交换两个数在数组中的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">            t = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最终将基准数归位</span></span><br><span class=\"line\">    a[left] = a[i];</span><br><span class=\"line\">    a[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    quickSort(a, left, i - <span class=\"number\">1</span>);<span class=\"comment\">// 继续处理左边的，这里是一个递归的过程</span></span><br><span class=\"line\">    quickSort(a, i + <span class=\"number\">1</span>, right);<span class=\"comment\">// 继续处理右边的 ，这里是一个递归的过程</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>快速选择<ul>\n<li>用于查找无序数组中指定大小的数字，比如长度为10的数组中查找第二小的数字</li>\n<li>结合快速排序和二分法，先用快速排序对数组进行分区，每次分完区之后，基准数落下的位置就是这个数组中第几大的数字</li>\n<li>根据这个方法，快速选择可以用O(N)的复杂度获取到需要的数字</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十一章-基于结点的数据结构\"><a href=\"#第十一章-基于结点的数据结构\" class=\"headerlink\" title=\"第十一章 基于结点的数据结构\"></a>第十一章 基于结点的数据结构</h2><ul>\n<li>链表<ul>\n<li>和数组不同的是，链表中的各个元素不是连续的，这种不相邻的格子叫做<strong>结点</strong></li>\n<li>每个结点存储数据以及下一个结点的地址来实现链表，这些存储下个结点地址的额外数据就是<strong>链</strong></li>\n<li>链表的好处是不需要内存分配连续的空间</li>\n<li>读取<ul>\n<li>不像连续数组，计算机不知道某个结点的地址，只知道开头结点的地址，因此需要遍历</li>\n<li>读取的复杂度为O(N)</li>\n</ul>\n</li>\n<li>查找：读取一样，需要从链表开头进行逐一遍历，复杂度为O(N)</li>\n<li>插入<ul>\n<li>链表的插入需要先找到插入的位置，如前所述，这个过程的时间复杂度为O(N)</li>\n<li>随后将插入位置的上一个结点指向的地址改为当前结点的地址，复杂度为O(1)</li>\n<li>和有序列表相反的是，在表头插入数据步骤是最少的，在最后一位插入步骤是最多的</li>\n</ul>\n</li>\n<li>删除：大致上和插入的原理差不多，时间复杂度同样为O(N)</li>\n</ul>\n</li>\n<li><strong>为什么用链表</strong><ul>\n<li>从上述分析看，链表增删改查的效率并没有比数组快</li>\n<li>但在某些业务场景下，比如从一堆数组中删除指定条件的无效数据<ul>\n<li>数组的操作过程是，每次找到一条无效数据后，先进行删除，然后将右边的数据进行左移，如果在最坏的情况下，无效数据都在数组开头，那每次删除都相当于要移动一遍整个数组</li>\n<li>链表的操作过程，省略了每次删除后左移的过程，只需遍历一次数组即可</li>\n<li>增加数据也是同理</li>\n</ul>\n</li>\n<li>因此，相比数组，链表的增删效率更高</li>\n</ul>\n</li>\n<li>双向链表<ul>\n<li>即每个结点除了存储下个结点的地址，还会存储上一个结点的地址</li>\n<li>增删改查可以从头部或者尾部开始</li>\n<li>这种特性可以使双向链表作为队列的底层实现，这样增删复杂度都是O(1)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十二章-二叉树\"><a href=\"#第十二章-二叉树\" class=\"headerlink\" title=\"第十二章 二叉树\"></a>第十二章 二叉树</h2><ul>\n<li>前文提到，有序列表的查找(二分法 O(logN))和读取 (O(1))非常快，但是插入和删除效率较低(O(N))；而散列表的查找，插入和删除效率较高(O(1))，但却是无序的<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree.png\"></li>\n<li>二叉树<ul>\n<li>每个结点链接着另外两个结点</li>\n<li>最上面的那一结点（此例中的“j”）被称为<strong>根</strong></li>\n<li>此例中，“j”是“m”和“b”的<strong>父结点</strong>，反过来，“m”和“b”是“j”的<strong>子结点</strong>。“m”又是“q”和“z”的父结点，“q”和“z”是“m”的子结点</li>\n<li>树可以分<strong>层</strong>。此例中的树有3层</li>\n<li>每个结点的子结点数量可为0、1、2</li>\n<li>如果有两个子结点，<strong>则其中一个子结点的值必须小于父结点，另一个子结点的值必须大于父结点</strong></li>\n</ul>\n</li>\n<li>二叉树查找的原理类似于二分法，因此复杂度为O(logN)</li>\n<li>插入同样也是O(logN)，因为找到需要插入的结点即可，无需像有序数组那样移动</li>\n<li><strong>需要乱序生成的二叉树才能高效，原理看图可知</strong><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree2.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree3.png\"></li>\n<li>二叉树的删除<ul>\n<li>规则较多，如果是删除最底下的子结点复杂度为O(logN)，但是如果删除某个父结点，需要考虑</li>\n<li>如果要删除的结点有一个子结点，那删掉它之后，还要将子结点填到被删除结点的位置上</li>\n<li>如果要删除的结点有两个子结点，则从其子结点中选取后继结点。后继结点的选取规则是，所有比被删除结点大的子结点中，最小的那个。下图例子中就是将61作为替换<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree4.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree5.png\"></li>\n<li>查找后继结点的方法：跳到被删除结点的右子结点，然后一路只往左子结点上跳，直到没有左子结点为止，则所停留的结点就是被删除节点的后继结<ul>\n<li>如果后继结点带有右子结点，则在后继结点填补被删除结点以后，用此右子结点替代后继结点的父节点的左子结点<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree6.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree7.png\"><br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/tree8.png\"></li>\n</ul>\n</li>\n<li>尽管看起来规则复杂，然而这些额外步骤都是寥寥几步就可以完成，删除的主要过程依然是查找结点的过程，所以复杂度还是O(logN)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十三章-连接万物的图\"><a href=\"#第十三章-连接万物的图\" class=\"headerlink\" title=\"第十三章 连接万物的图\"></a>第十三章 连接万物的图</h2><p><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/graph.png\"></p>\n<ul>\n<li>每个结点都是一个<strong>顶点</strong>，每条线段都是一条<strong>边</strong>。当两个顶点通过一条边联系在一起时，我们会说这两个顶点是相邻的。</li>\n<li>以Facebook和twitter为例，facebook是双向的关系，而twitter是单向的<br><img src=\"/2022/03/21/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/graph2.png\"></li>\n<li>可用散列表来实现图</li>\n<li>广度优先搜索<ul>\n<li>需要用队列记录后续要处理哪些顶点</li>\n<li>找出当前顶点的所有邻接点。如果有哪个是没访问过的，就把它标为“已访问”，并且将它入队。（尽管该顶点并未作为“当前顶点”被访问过。）</li>\n<li>如果当前顶点没有未访问的邻接点，且队列不为空，那就再从队列中移出一个顶点作为当前顶点。</li>\n<li>如果当前顶点没有未访问的邻接点，且队列里也没有其他顶点，那么算法完成。</li>\n<li>简单点说就是每次只处理下一层的数据</li>\n</ul>\n</li>\n</ul>"},{"title":"读书笔记-人类简史","date":"2022-03-24T06:29:21.000Z","comments":1,"_content":"![](humanhistory.jpg)\n\n## 认知革命\n\n### 人类：一种没什么特别的动物\n- 在历史的路上，有三大重要革命：\n    - 大约7万年前，“认知革命”（CognitiveRevolution）让历史正式启动\n    - 大约12000年前，“农业革命”（AgriculturalRevolution）让历史加速发展\n    - 而到了大约不过是500年前，“科学革命”（ScientificRevolution）可以说是让历史画下句点而另创新局\n- 从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）\n    - 生物学家用拉丁文为生物命名，每个名字由两个词组成，第一个词是属名，第二个词则是种名\n    - 例如狮子就称为“Pantheraleo”，指的是豹属（Panthera）的狮种（leo）\n- 许多属还能再归类为同一科（family）\n- 最早的人类是从大约250万年前的东非开始演化，祖先是一种更早的猿属“Australopithecus”（南方古猿）\n    - 在欧洲和西亚的人类成了“Homoneanderthalensis”，意为“来自尼安德谷（NeanderValley）的人”，一般简称为“尼安德特人”（Neanderthals）\n    - 在东方的亚洲，住的则是“Homoerectus”（直立人），一共存续了将近200万年，是目前所知存续最久的人类物种\n    - 在印度尼西亚的爪哇岛，则住着“Homosoloensis”（梭罗人，拉丁文意为“来自梭罗谷的人”）\n    - 人类的摇篮继续养育着许多新品种，例如“Homorudolfensis”（鲁道夫人，“来自鲁道夫湖的人”）、“Homoergaster”（匠人，“工作的人”）\n    - 而我们也颇为厚颜地把自己命名为“Homosapiens”（智人，“明智的人”）\n- 人类不是线性发展的，在某一个时期同时存在多种人中，智人也是其中之一\n    - 大脑容量大\n        - 大脑结构脆弱，不利于活动\n        - 能耗很大，只占重量2%，却要消耗25%的能量\n        - 令人困惑的是，在接近200万年的时间里，大脑并没有带来显著的优势，却一直偏执的在这条路上进化\n    - 直立行走\n        - 手解放出来做更精细的事\n        - 促进了神经系统的进化\n        - 导致背痛，颈脖部位的酸痛\n    - 人类都是早产儿\n        - 促使人类成为强社交生物，因为需要群体帮助照顾幼儿\n    - 用火\n        - 一些本无法消化的食物变为主食（如小麦，水稻，马铃薯等）\n        - 食物中的病菌和寄生虫被杀死\n        - 咀嚼和消化时间大幅缩减\n        - 缩小牙齿、减少肠的长度\n            - 一种说法认为，这减少了消化时所需的能量，从而使得大脑得到发育的空间\n- 长久以来，智人一直只是稳定位于食物链的中间位置，直到最近才有改变\n    - 在先前长达数百万年的时间里，人类会猎杀小动物、采集种种能得到的食物，但同时也会遭到较大型肉食动物猎杀\n    - 一直要到40万年前，有几种人种才开始固定追捕大型猎物，而要到10万年前智人崛起，人类才一跃而居于食物链顶端\n    - 人类转眼就登上顶端，不仅让生态系统猝不及防，就连人类自己也不知所措\n- 智人如何成为唯一存活的人种\n    - 混种繁衍理论，即智人是和其他人种互通繁衍，从而融合为同一人种\n    - 替代理论，即除了智人之外的其他人种灭绝了\n        - 这种理论更加政治正确，毕竟世界上的人都有同样的祖先比较不会引起种族方面的讨论\n        - 然而目前，已经找到证据证明各个地区的人身上携带者不同远古人种的DNA\n    - **智人胜出的根本原因很可能是因为有独特的语言**\n\n<!-- more -->\n    \n### 知善恶树\n- 大约就是在距今7万到3万年前，出现了新的思维和沟通方式，这也正是所谓的**认知革命**\n    - 智人的语言并不是世界上的第一种语言。每种动物都有着某种语言。\n    - 最常见的理论，认为人类语言最为灵活\n    - 第二种理论，也同意人类语言是沟通关于世界的信息的方式。然而，最重要的信息不是关于狮子和野牛，而是关于人类自己。**我们的语言发展成了一种八卦的工具**\n    - 只有智人能够表达关于从来没有看过、碰过、耳闻过的事物，而且讲得煞有其事。**讨论虚构的事物”正是智人语言最独特的功能**\n- 社会学研究指出，借由八卦来维持的最大“自然”团体大约是150人\n    - 在这个规模下，只需要靠人际关系就可以维持正常运作，而不需要什么特定的纪律约束\n    - 超过这个规模，就需要依靠虚构的故事。例如宗教，国家历史，法律故事等\n- **所谓“想象的现实”指的是某件事人人都相信，而且只要这项共同的信念仍然存在，力量就足以影响世界**\n- 自从认知革命之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“**文化演化**”的快速道路，而不再停留在“基因演化”这条总是堵车的道路上\n    - 在认知革命之后，虽然智人的基因和环境都没什么改变，但智人还是能够迅速改变行为，并将新的行为方式传给下一代\n    - 最典型的例子，就是人类社会总会出现不生育的精英阶层\n    - 过去远古人类的行为模式可能维持几万年不变，但对现代智人来说，只要十几二十年，就可能改变整个社会结构、人际交往关系和经济活动\n![](human1.png)   \n\n### 亚当和夏娃的一天\n\n- 演化心理学\n    - 这个领域的学者认为，即使到了现在，我们的大脑和心灵都还是以狩猎和采集的生活方式在思维\n    - 比如爱吃甜食和高热量食物来自于祖先一辈缺乏这种摄入，因此看到这些食物就得大量摄入以免失去机会\n    - 一夫一妻制和\"远古公社\"都存在于人类社会\n- 远古的采集生活与后来的农业和工业生活相比，最明显的区别在于极少使用人造物品\n    - 无法光靠现存的文物来了解远古狩猎采集生活\n    - 即使是在类似的生态、同样的基因组成下出现的人类，也能够创造出非常不同的想象现实，表现出来就成了不同的规范和价值观\n    - 从认知革命之后，智人的“自然生活方式”从来就不止一种。真正存在的只有“**文化选择**”\n- 在个人层面上，远古的采集者则是有史以来最具备多样知识和技能的人类\n    - 等到农业和工业时代开展，人类开始能靠着别人的技能生存下来，就算是低能的人也开始有了生存空间\n    - 采集经济，能让大多数人都过着比在农业或工业社会中更有趣的生活\n    - 采集者之所以能够免受饥饿或营养不良的困扰，秘诀就在于多样化的饮食。相较之下，之后农民的饮食往往种类极少，而且不均衡。\n    - 远古采集者也比较少碰到传染病的问题\n- 多数学者都同意，远古的采集者普遍信奉泛神论的信仰（animism，源自拉丁文的“anima”，意义“灵魂”或“精神”）\n    - 泛神论相信，几乎任何一个地点、任何一只动物、任何一株植物、任何一种自然现象，都有其意识和情感，并且能与人类直接沟通\n    - 泛神论者认为，人类和其他的灵之间并没有障碍，可以直接通过言语、歌曲、舞蹈和仪式来沟通\n- 我们已经看到，采集社会可能有许多不同的宗教和社会结构，可以预测他们也同样有不同的暴力倾向。可能在某些时期，某些地区一片平静祥和，但在其他地区却是动乱不断。\n- 整个动物界从古至今，最重要也最具破坏性的力量，就是这群四处游荡、讲着故事的智人\n\n### 毁天灭地的人类洪水\n\n- 在历史上，人类首次抵达澳大利亚绝对算是大事一件，重要性不亚于哥伦布抵达美洲或是阿波罗11号登上月球\n- 智人灭绝澳大利亚大型动物的证据\n    - 大多数动物在智人来之前都活过了多次冰河期，但却基本都在智人登陆后灭绝\n    - 同样是在澳大利亚，在那里的海洋生物却没有什么灭绝的变化\n    - 这种灭绝现象，出现的时间点基本都是智人登陆的时间点\n- 智人如何造成澳大利亚的生物灭绝\n    - 大型动物的繁衍周期较长，即使智人只是几个月捕杀一只，也会超过大型动物的生殖速度，使得在几千年时间内缓慢灭绝\n    - 火耕技术改变了地貌，彻底改变生态\n    - 气候变迁加上人类狩猎\n- 智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫\n    - 在认知革命发生的时候，地球上大约有200属体重超过50公斤的大型陆生哺乳动物\n    - 等到农业革命的时候，只剩下大约100属\n    - 远在人类还没有发明轮子、文字和铁器之前，智人就已经让全球大约一半的大型兽类魂归西天、就此灭绝\n\n## 农业革命\n\n","source":"_posts/read/读书笔记-人类简史.md","raw":"---\ntitle: 读书笔记-人类简史\ndate: 2022-03-24 14:29:21\ncomments: true\ncategories: \n- 读书笔记\n---\n![](humanhistory.jpg)\n\n## 认知革命\n\n### 人类：一种没什么特别的动物\n- 在历史的路上，有三大重要革命：\n    - 大约7万年前，“认知革命”（CognitiveRevolution）让历史正式启动\n    - 大约12000年前，“农业革命”（AgriculturalRevolution）让历史加速发展\n    - 而到了大约不过是500年前，“科学革命”（ScientificRevolution）可以说是让历史画下句点而另创新局\n- 从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）\n    - 生物学家用拉丁文为生物命名，每个名字由两个词组成，第一个词是属名，第二个词则是种名\n    - 例如狮子就称为“Pantheraleo”，指的是豹属（Panthera）的狮种（leo）\n- 许多属还能再归类为同一科（family）\n- 最早的人类是从大约250万年前的东非开始演化，祖先是一种更早的猿属“Australopithecus”（南方古猿）\n    - 在欧洲和西亚的人类成了“Homoneanderthalensis”，意为“来自尼安德谷（NeanderValley）的人”，一般简称为“尼安德特人”（Neanderthals）\n    - 在东方的亚洲，住的则是“Homoerectus”（直立人），一共存续了将近200万年，是目前所知存续最久的人类物种\n    - 在印度尼西亚的爪哇岛，则住着“Homosoloensis”（梭罗人，拉丁文意为“来自梭罗谷的人”）\n    - 人类的摇篮继续养育着许多新品种，例如“Homorudolfensis”（鲁道夫人，“来自鲁道夫湖的人”）、“Homoergaster”（匠人，“工作的人”）\n    - 而我们也颇为厚颜地把自己命名为“Homosapiens”（智人，“明智的人”）\n- 人类不是线性发展的，在某一个时期同时存在多种人中，智人也是其中之一\n    - 大脑容量大\n        - 大脑结构脆弱，不利于活动\n        - 能耗很大，只占重量2%，却要消耗25%的能量\n        - 令人困惑的是，在接近200万年的时间里，大脑并没有带来显著的优势，却一直偏执的在这条路上进化\n    - 直立行走\n        - 手解放出来做更精细的事\n        - 促进了神经系统的进化\n        - 导致背痛，颈脖部位的酸痛\n    - 人类都是早产儿\n        - 促使人类成为强社交生物，因为需要群体帮助照顾幼儿\n    - 用火\n        - 一些本无法消化的食物变为主食（如小麦，水稻，马铃薯等）\n        - 食物中的病菌和寄生虫被杀死\n        - 咀嚼和消化时间大幅缩减\n        - 缩小牙齿、减少肠的长度\n            - 一种说法认为，这减少了消化时所需的能量，从而使得大脑得到发育的空间\n- 长久以来，智人一直只是稳定位于食物链的中间位置，直到最近才有改变\n    - 在先前长达数百万年的时间里，人类会猎杀小动物、采集种种能得到的食物，但同时也会遭到较大型肉食动物猎杀\n    - 一直要到40万年前，有几种人种才开始固定追捕大型猎物，而要到10万年前智人崛起，人类才一跃而居于食物链顶端\n    - 人类转眼就登上顶端，不仅让生态系统猝不及防，就连人类自己也不知所措\n- 智人如何成为唯一存活的人种\n    - 混种繁衍理论，即智人是和其他人种互通繁衍，从而融合为同一人种\n    - 替代理论，即除了智人之外的其他人种灭绝了\n        - 这种理论更加政治正确，毕竟世界上的人都有同样的祖先比较不会引起种族方面的讨论\n        - 然而目前，已经找到证据证明各个地区的人身上携带者不同远古人种的DNA\n    - **智人胜出的根本原因很可能是因为有独特的语言**\n\n<!-- more -->\n    \n### 知善恶树\n- 大约就是在距今7万到3万年前，出现了新的思维和沟通方式，这也正是所谓的**认知革命**\n    - 智人的语言并不是世界上的第一种语言。每种动物都有着某种语言。\n    - 最常见的理论，认为人类语言最为灵活\n    - 第二种理论，也同意人类语言是沟通关于世界的信息的方式。然而，最重要的信息不是关于狮子和野牛，而是关于人类自己。**我们的语言发展成了一种八卦的工具**\n    - 只有智人能够表达关于从来没有看过、碰过、耳闻过的事物，而且讲得煞有其事。**讨论虚构的事物”正是智人语言最独特的功能**\n- 社会学研究指出，借由八卦来维持的最大“自然”团体大约是150人\n    - 在这个规模下，只需要靠人际关系就可以维持正常运作，而不需要什么特定的纪律约束\n    - 超过这个规模，就需要依靠虚构的故事。例如宗教，国家历史，法律故事等\n- **所谓“想象的现实”指的是某件事人人都相信，而且只要这项共同的信念仍然存在，力量就足以影响世界**\n- 自从认知革命之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“**文化演化**”的快速道路，而不再停留在“基因演化”这条总是堵车的道路上\n    - 在认知革命之后，虽然智人的基因和环境都没什么改变，但智人还是能够迅速改变行为，并将新的行为方式传给下一代\n    - 最典型的例子，就是人类社会总会出现不生育的精英阶层\n    - 过去远古人类的行为模式可能维持几万年不变，但对现代智人来说，只要十几二十年，就可能改变整个社会结构、人际交往关系和经济活动\n![](human1.png)   \n\n### 亚当和夏娃的一天\n\n- 演化心理学\n    - 这个领域的学者认为，即使到了现在，我们的大脑和心灵都还是以狩猎和采集的生活方式在思维\n    - 比如爱吃甜食和高热量食物来自于祖先一辈缺乏这种摄入，因此看到这些食物就得大量摄入以免失去机会\n    - 一夫一妻制和\"远古公社\"都存在于人类社会\n- 远古的采集生活与后来的农业和工业生活相比，最明显的区别在于极少使用人造物品\n    - 无法光靠现存的文物来了解远古狩猎采集生活\n    - 即使是在类似的生态、同样的基因组成下出现的人类，也能够创造出非常不同的想象现实，表现出来就成了不同的规范和价值观\n    - 从认知革命之后，智人的“自然生活方式”从来就不止一种。真正存在的只有“**文化选择**”\n- 在个人层面上，远古的采集者则是有史以来最具备多样知识和技能的人类\n    - 等到农业和工业时代开展，人类开始能靠着别人的技能生存下来，就算是低能的人也开始有了生存空间\n    - 采集经济，能让大多数人都过着比在农业或工业社会中更有趣的生活\n    - 采集者之所以能够免受饥饿或营养不良的困扰，秘诀就在于多样化的饮食。相较之下，之后农民的饮食往往种类极少，而且不均衡。\n    - 远古采集者也比较少碰到传染病的问题\n- 多数学者都同意，远古的采集者普遍信奉泛神论的信仰（animism，源自拉丁文的“anima”，意义“灵魂”或“精神”）\n    - 泛神论相信，几乎任何一个地点、任何一只动物、任何一株植物、任何一种自然现象，都有其意识和情感，并且能与人类直接沟通\n    - 泛神论者认为，人类和其他的灵之间并没有障碍，可以直接通过言语、歌曲、舞蹈和仪式来沟通\n- 我们已经看到，采集社会可能有许多不同的宗教和社会结构，可以预测他们也同样有不同的暴力倾向。可能在某些时期，某些地区一片平静祥和，但在其他地区却是动乱不断。\n- 整个动物界从古至今，最重要也最具破坏性的力量，就是这群四处游荡、讲着故事的智人\n\n### 毁天灭地的人类洪水\n\n- 在历史上，人类首次抵达澳大利亚绝对算是大事一件，重要性不亚于哥伦布抵达美洲或是阿波罗11号登上月球\n- 智人灭绝澳大利亚大型动物的证据\n    - 大多数动物在智人来之前都活过了多次冰河期，但却基本都在智人登陆后灭绝\n    - 同样是在澳大利亚，在那里的海洋生物却没有什么灭绝的变化\n    - 这种灭绝现象，出现的时间点基本都是智人登陆的时间点\n- 智人如何造成澳大利亚的生物灭绝\n    - 大型动物的繁衍周期较长，即使智人只是几个月捕杀一只，也会超过大型动物的生殖速度，使得在几千年时间内缓慢灭绝\n    - 火耕技术改变了地貌，彻底改变生态\n    - 气候变迁加上人类狩猎\n- 智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫\n    - 在认知革命发生的时候，地球上大约有200属体重超过50公斤的大型陆生哺乳动物\n    - 等到农业革命的时候，只剩下大约100属\n    - 远在人类还没有发明轮子、文字和铁器之前，智人就已经让全球大约一半的大型兽类魂归西天、就此灭绝\n\n## 农业革命\n\n","slug":"read/读书笔记-人类简史","published":1,"updated":"2022-03-25T01:19:33.000Z","_id":"cl14r9i1l0000bocf47to21ws","layout":"post","photos":[],"link":"","content":"<p><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/humanhistory.jpg\"></p>\n<h2 id=\"认知革命\"><a href=\"#认知革命\" class=\"headerlink\" title=\"认知革命\"></a>认知革命</h2><h3 id=\"人类：一种没什么特别的动物\"><a href=\"#人类：一种没什么特别的动物\" class=\"headerlink\" title=\"人类：一种没什么特别的动物\"></a>人类：一种没什么特别的动物</h3><ul>\n<li>在历史的路上，有三大重要革命：<ul>\n<li>大约7万年前，“认知革命”（CognitiveRevolution）让历史正式启动</li>\n<li>大约12000年前，“农业革命”（AgriculturalRevolution）让历史加速发展</li>\n<li>而到了大约不过是500年前，“科学革命”（ScientificRevolution）可以说是让历史画下句点而另创新局</li>\n</ul>\n</li>\n<li>从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）<ul>\n<li>生物学家用拉丁文为生物命名，每个名字由两个词组成，第一个词是属名，第二个词则是种名</li>\n<li>例如狮子就称为“Pantheraleo”，指的是豹属（Panthera）的狮种（leo）</li>\n</ul>\n</li>\n<li>许多属还能再归类为同一科（family）</li>\n<li>最早的人类是从大约250万年前的东非开始演化，祖先是一种更早的猿属“Australopithecus”（南方古猿）<ul>\n<li>在欧洲和西亚的人类成了“Homoneanderthalensis”，意为“来自尼安德谷（NeanderValley）的人”，一般简称为“尼安德特人”（Neanderthals）</li>\n<li>在东方的亚洲，住的则是“Homoerectus”（直立人），一共存续了将近200万年，是目前所知存续最久的人类物种</li>\n<li>在印度尼西亚的爪哇岛，则住着“Homosoloensis”（梭罗人，拉丁文意为“来自梭罗谷的人”）</li>\n<li>人类的摇篮继续养育着许多新品种，例如“Homorudolfensis”（鲁道夫人，“来自鲁道夫湖的人”）、“Homoergaster”（匠人，“工作的人”）</li>\n<li>而我们也颇为厚颜地把自己命名为“Homosapiens”（智人，“明智的人”）</li>\n</ul>\n</li>\n<li>人类不是线性发展的，在某一个时期同时存在多种人中，智人也是其中之一<ul>\n<li>大脑容量大<ul>\n<li>大脑结构脆弱，不利于活动</li>\n<li>能耗很大，只占重量2%，却要消耗25%的能量</li>\n<li>令人困惑的是，在接近200万年的时间里，大脑并没有带来显著的优势，却一直偏执的在这条路上进化</li>\n</ul>\n</li>\n<li>直立行走<ul>\n<li>手解放出来做更精细的事</li>\n<li>促进了神经系统的进化</li>\n<li>导致背痛，颈脖部位的酸痛</li>\n</ul>\n</li>\n<li>人类都是早产儿<ul>\n<li>促使人类成为强社交生物，因为需要群体帮助照顾幼儿</li>\n</ul>\n</li>\n<li>用火<ul>\n<li>一些本无法消化的食物变为主食（如小麦，水稻，马铃薯等）</li>\n<li>食物中的病菌和寄生虫被杀死</li>\n<li>咀嚼和消化时间大幅缩减</li>\n<li>缩小牙齿、减少肠的长度<ul>\n<li>一种说法认为，这减少了消化时所需的能量，从而使得大脑得到发育的空间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>长久以来，智人一直只是稳定位于食物链的中间位置，直到最近才有改变<ul>\n<li>在先前长达数百万年的时间里，人类会猎杀小动物、采集种种能得到的食物，但同时也会遭到较大型肉食动物猎杀</li>\n<li>一直要到40万年前，有几种人种才开始固定追捕大型猎物，而要到10万年前智人崛起，人类才一跃而居于食物链顶端</li>\n<li>人类转眼就登上顶端，不仅让生态系统猝不及防，就连人类自己也不知所措</li>\n</ul>\n</li>\n<li>智人如何成为唯一存活的人种<ul>\n<li>混种繁衍理论，即智人是和其他人种互通繁衍，从而融合为同一人种</li>\n<li>替代理论，即除了智人之外的其他人种灭绝了<ul>\n<li>这种理论更加政治正确，毕竟世界上的人都有同样的祖先比较不会引起种族方面的讨论</li>\n<li>然而目前，已经找到证据证明各个地区的人身上携带者不同远古人种的DNA</li>\n</ul>\n</li>\n<li><strong>智人胜出的根本原因很可能是因为有独特的语言</strong></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"知善恶树\"><a href=\"#知善恶树\" class=\"headerlink\" title=\"知善恶树\"></a>知善恶树</h3><ul>\n<li>大约就是在距今7万到3万年前，出现了新的思维和沟通方式，这也正是所谓的<strong>认知革命</strong><ul>\n<li>智人的语言并不是世界上的第一种语言。每种动物都有着某种语言。</li>\n<li>最常见的理论，认为人类语言最为灵活</li>\n<li>第二种理论，也同意人类语言是沟通关于世界的信息的方式。然而，最重要的信息不是关于狮子和野牛，而是关于人类自己。<strong>我们的语言发展成了一种八卦的工具</strong></li>\n<li>只有智人能够表达关于从来没有看过、碰过、耳闻过的事物，而且讲得煞有其事。<strong>讨论虚构的事物”正是智人语言最独特的功能</strong></li>\n</ul>\n</li>\n<li>社会学研究指出，借由八卦来维持的最大“自然”团体大约是150人<ul>\n<li>在这个规模下，只需要靠人际关系就可以维持正常运作，而不需要什么特定的纪律约束</li>\n<li>超过这个规模，就需要依靠虚构的故事。例如宗教，国家历史，法律故事等</li>\n</ul>\n</li>\n<li><strong>所谓“想象的现实”指的是某件事人人都相信，而且只要这项共同的信念仍然存在，力量就足以影响世界</strong></li>\n<li>自从认知革命之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“<strong>文化演化</strong>”的快速道路，而不再停留在“基因演化”这条总是堵车的道路上<ul>\n<li>在认知革命之后，虽然智人的基因和环境都没什么改变，但智人还是能够迅速改变行为，并将新的行为方式传给下一代</li>\n<li>最典型的例子，就是人类社会总会出现不生育的精英阶层</li>\n<li>过去远古人类的行为模式可能维持几万年不变，但对现代智人来说，只要十几二十年，就可能改变整个社会结构、人际交往关系和经济活动<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/human1.png\">   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"亚当和夏娃的一天\"><a href=\"#亚当和夏娃的一天\" class=\"headerlink\" title=\"亚当和夏娃的一天\"></a>亚当和夏娃的一天</h3><ul>\n<li>演化心理学<ul>\n<li>这个领域的学者认为，即使到了现在，我们的大脑和心灵都还是以狩猎和采集的生活方式在思维</li>\n<li>比如爱吃甜食和高热量食物来自于祖先一辈缺乏这种摄入，因此看到这些食物就得大量摄入以免失去机会</li>\n<li>一夫一妻制和”远古公社”都存在于人类社会</li>\n</ul>\n</li>\n<li>远古的采集生活与后来的农业和工业生活相比，最明显的区别在于极少使用人造物品<ul>\n<li>无法光靠现存的文物来了解远古狩猎采集生活</li>\n<li>即使是在类似的生态、同样的基因组成下出现的人类，也能够创造出非常不同的想象现实，表现出来就成了不同的规范和价值观</li>\n<li>从认知革命之后，智人的“自然生活方式”从来就不止一种。真正存在的只有“<strong>文化选择</strong>”</li>\n</ul>\n</li>\n<li>在个人层面上，远古的采集者则是有史以来最具备多样知识和技能的人类<ul>\n<li>等到农业和工业时代开展，人类开始能靠着别人的技能生存下来，就算是低能的人也开始有了生存空间</li>\n<li>采集经济，能让大多数人都过着比在农业或工业社会中更有趣的生活</li>\n<li>采集者之所以能够免受饥饿或营养不良的困扰，秘诀就在于多样化的饮食。相较之下，之后农民的饮食往往种类极少，而且不均衡。</li>\n<li>远古采集者也比较少碰到传染病的问题</li>\n</ul>\n</li>\n<li>多数学者都同意，远古的采集者普遍信奉泛神论的信仰（animism，源自拉丁文的“anima”，意义“灵魂”或“精神”）<ul>\n<li>泛神论相信，几乎任何一个地点、任何一只动物、任何一株植物、任何一种自然现象，都有其意识和情感，并且能与人类直接沟通</li>\n<li>泛神论者认为，人类和其他的灵之间并没有障碍，可以直接通过言语、歌曲、舞蹈和仪式来沟通</li>\n</ul>\n</li>\n<li>我们已经看到，采集社会可能有许多不同的宗教和社会结构，可以预测他们也同样有不同的暴力倾向。可能在某些时期，某些地区一片平静祥和，但在其他地区却是动乱不断。</li>\n<li>整个动物界从古至今，最重要也最具破坏性的力量，就是这群四处游荡、讲着故事的智人</li>\n</ul>\n<h3 id=\"毁天灭地的人类洪水\"><a href=\"#毁天灭地的人类洪水\" class=\"headerlink\" title=\"毁天灭地的人类洪水\"></a>毁天灭地的人类洪水</h3><ul>\n<li>在历史上，人类首次抵达澳大利亚绝对算是大事一件，重要性不亚于哥伦布抵达美洲或是阿波罗11号登上月球</li>\n<li>智人灭绝澳大利亚大型动物的证据<ul>\n<li>大多数动物在智人来之前都活过了多次冰河期，但却基本都在智人登陆后灭绝</li>\n<li>同样是在澳大利亚，在那里的海洋生物却没有什么灭绝的变化</li>\n<li>这种灭绝现象，出现的时间点基本都是智人登陆的时间点</li>\n</ul>\n</li>\n<li>智人如何造成澳大利亚的生物灭绝<ul>\n<li>大型动物的繁衍周期较长，即使智人只是几个月捕杀一只，也会超过大型动物的生殖速度，使得在几千年时间内缓慢灭绝</li>\n<li>火耕技术改变了地貌，彻底改变生态</li>\n<li>气候变迁加上人类狩猎</li>\n</ul>\n</li>\n<li>智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫<ul>\n<li>在认知革命发生的时候，地球上大约有200属体重超过50公斤的大型陆生哺乳动物</li>\n<li>等到农业革命的时候，只剩下大约100属</li>\n<li>远在人类还没有发明轮子、文字和铁器之前，智人就已经让全球大约一半的大型兽类魂归西天、就此灭绝</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"农业革命\"><a href=\"#农业革命\" class=\"headerlink\" title=\"农业革命\"></a>农业革命</h2>","site":{"data":{}},"excerpt":"<p><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/humanhistory.jpg\"></p>\n<h2 id=\"认知革命\"><a href=\"#认知革命\" class=\"headerlink\" title=\"认知革命\"></a>认知革命</h2><h3 id=\"人类：一种没什么特别的动物\"><a href=\"#人类：一种没什么特别的动物\" class=\"headerlink\" title=\"人类：一种没什么特别的动物\"></a>人类：一种没什么特别的动物</h3><ul>\n<li>在历史的路上，有三大重要革命：<ul>\n<li>大约7万年前，“认知革命”（CognitiveRevolution）让历史正式启动</li>\n<li>大约12000年前，“农业革命”（AgriculturalRevolution）让历史加速发展</li>\n<li>而到了大约不过是500年前，“科学革命”（ScientificRevolution）可以说是让历史画下句点而另创新局</li>\n</ul>\n</li>\n<li>从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）<ul>\n<li>生物学家用拉丁文为生物命名，每个名字由两个词组成，第一个词是属名，第二个词则是种名</li>\n<li>例如狮子就称为“Pantheraleo”，指的是豹属（Panthera）的狮种（leo）</li>\n</ul>\n</li>\n<li>许多属还能再归类为同一科（family）</li>\n<li>最早的人类是从大约250万年前的东非开始演化，祖先是一种更早的猿属“Australopithecus”（南方古猿）<ul>\n<li>在欧洲和西亚的人类成了“Homoneanderthalensis”，意为“来自尼安德谷（NeanderValley）的人”，一般简称为“尼安德特人”（Neanderthals）</li>\n<li>在东方的亚洲，住的则是“Homoerectus”（直立人），一共存续了将近200万年，是目前所知存续最久的人类物种</li>\n<li>在印度尼西亚的爪哇岛，则住着“Homosoloensis”（梭罗人，拉丁文意为“来自梭罗谷的人”）</li>\n<li>人类的摇篮继续养育着许多新品种，例如“Homorudolfensis”（鲁道夫人，“来自鲁道夫湖的人”）、“Homoergaster”（匠人，“工作的人”）</li>\n<li>而我们也颇为厚颜地把自己命名为“Homosapiens”（智人，“明智的人”）</li>\n</ul>\n</li>\n<li>人类不是线性发展的，在某一个时期同时存在多种人中，智人也是其中之一<ul>\n<li>大脑容量大<ul>\n<li>大脑结构脆弱，不利于活动</li>\n<li>能耗很大，只占重量2%，却要消耗25%的能量</li>\n<li>令人困惑的是，在接近200万年的时间里，大脑并没有带来显著的优势，却一直偏执的在这条路上进化</li>\n</ul>\n</li>\n<li>直立行走<ul>\n<li>手解放出来做更精细的事</li>\n<li>促进了神经系统的进化</li>\n<li>导致背痛，颈脖部位的酸痛</li>\n</ul>\n</li>\n<li>人类都是早产儿<ul>\n<li>促使人类成为强社交生物，因为需要群体帮助照顾幼儿</li>\n</ul>\n</li>\n<li>用火<ul>\n<li>一些本无法消化的食物变为主食（如小麦，水稻，马铃薯等）</li>\n<li>食物中的病菌和寄生虫被杀死</li>\n<li>咀嚼和消化时间大幅缩减</li>\n<li>缩小牙齿、减少肠的长度<ul>\n<li>一种说法认为，这减少了消化时所需的能量，从而使得大脑得到发育的空间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>长久以来，智人一直只是稳定位于食物链的中间位置，直到最近才有改变<ul>\n<li>在先前长达数百万年的时间里，人类会猎杀小动物、采集种种能得到的食物，但同时也会遭到较大型肉食动物猎杀</li>\n<li>一直要到40万年前，有几种人种才开始固定追捕大型猎物，而要到10万年前智人崛起，人类才一跃而居于食物链顶端</li>\n<li>人类转眼就登上顶端，不仅让生态系统猝不及防，就连人类自己也不知所措</li>\n</ul>\n</li>\n<li>智人如何成为唯一存活的人种<ul>\n<li>混种繁衍理论，即智人是和其他人种互通繁衍，从而融合为同一人种</li>\n<li>替代理论，即除了智人之外的其他人种灭绝了<ul>\n<li>这种理论更加政治正确，毕竟世界上的人都有同样的祖先比较不会引起种族方面的讨论</li>\n<li>然而目前，已经找到证据证明各个地区的人身上携带者不同远古人种的DNA</li>\n</ul>\n</li>\n<li><strong>智人胜出的根本原因很可能是因为有独特的语言</strong></li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"知善恶树\"><a href=\"#知善恶树\" class=\"headerlink\" title=\"知善恶树\"></a>知善恶树</h3><ul>\n<li>大约就是在距今7万到3万年前，出现了新的思维和沟通方式，这也正是所谓的<strong>认知革命</strong><ul>\n<li>智人的语言并不是世界上的第一种语言。每种动物都有着某种语言。</li>\n<li>最常见的理论，认为人类语言最为灵活</li>\n<li>第二种理论，也同意人类语言是沟通关于世界的信息的方式。然而，最重要的信息不是关于狮子和野牛，而是关于人类自己。<strong>我们的语言发展成了一种八卦的工具</strong></li>\n<li>只有智人能够表达关于从来没有看过、碰过、耳闻过的事物，而且讲得煞有其事。<strong>讨论虚构的事物”正是智人语言最独特的功能</strong></li>\n</ul>\n</li>\n<li>社会学研究指出，借由八卦来维持的最大“自然”团体大约是150人<ul>\n<li>在这个规模下，只需要靠人际关系就可以维持正常运作，而不需要什么特定的纪律约束</li>\n<li>超过这个规模，就需要依靠虚构的故事。例如宗教，国家历史，法律故事等</li>\n</ul>\n</li>\n<li><strong>所谓“想象的现实”指的是某件事人人都相信，而且只要这项共同的信念仍然存在，力量就足以影响世界</strong></li>\n<li>自从认知革命之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“<strong>文化演化</strong>”的快速道路，而不再停留在“基因演化”这条总是堵车的道路上<ul>\n<li>在认知革命之后，虽然智人的基因和环境都没什么改变，但智人还是能够迅速改变行为，并将新的行为方式传给下一代</li>\n<li>最典型的例子，就是人类社会总会出现不生育的精英阶层</li>\n<li>过去远古人类的行为模式可能维持几万年不变，但对现代智人来说，只要十几二十年，就可能改变整个社会结构、人际交往关系和经济活动<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/human1.png\">   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"亚当和夏娃的一天\"><a href=\"#亚当和夏娃的一天\" class=\"headerlink\" title=\"亚当和夏娃的一天\"></a>亚当和夏娃的一天</h3><ul>\n<li>演化心理学<ul>\n<li>这个领域的学者认为，即使到了现在，我们的大脑和心灵都还是以狩猎和采集的生活方式在思维</li>\n<li>比如爱吃甜食和高热量食物来自于祖先一辈缺乏这种摄入，因此看到这些食物就得大量摄入以免失去机会</li>\n<li>一夫一妻制和”远古公社”都存在于人类社会</li>\n</ul>\n</li>\n<li>远古的采集生活与后来的农业和工业生活相比，最明显的区别在于极少使用人造物品<ul>\n<li>无法光靠现存的文物来了解远古狩猎采集生活</li>\n<li>即使是在类似的生态、同样的基因组成下出现的人类，也能够创造出非常不同的想象现实，表现出来就成了不同的规范和价值观</li>\n<li>从认知革命之后，智人的“自然生活方式”从来就不止一种。真正存在的只有“<strong>文化选择</strong>”</li>\n</ul>\n</li>\n<li>在个人层面上，远古的采集者则是有史以来最具备多样知识和技能的人类<ul>\n<li>等到农业和工业时代开展，人类开始能靠着别人的技能生存下来，就算是低能的人也开始有了生存空间</li>\n<li>采集经济，能让大多数人都过着比在农业或工业社会中更有趣的生活</li>\n<li>采集者之所以能够免受饥饿或营养不良的困扰，秘诀就在于多样化的饮食。相较之下，之后农民的饮食往往种类极少，而且不均衡。</li>\n<li>远古采集者也比较少碰到传染病的问题</li>\n</ul>\n</li>\n<li>多数学者都同意，远古的采集者普遍信奉泛神论的信仰（animism，源自拉丁文的“anima”，意义“灵魂”或“精神”）<ul>\n<li>泛神论相信，几乎任何一个地点、任何一只动物、任何一株植物、任何一种自然现象，都有其意识和情感，并且能与人类直接沟通</li>\n<li>泛神论者认为，人类和其他的灵之间并没有障碍，可以直接通过言语、歌曲、舞蹈和仪式来沟通</li>\n</ul>\n</li>\n<li>我们已经看到，采集社会可能有许多不同的宗教和社会结构，可以预测他们也同样有不同的暴力倾向。可能在某些时期，某些地区一片平静祥和，但在其他地区却是动乱不断。</li>\n<li>整个动物界从古至今，最重要也最具破坏性的力量，就是这群四处游荡、讲着故事的智人</li>\n</ul>\n<h3 id=\"毁天灭地的人类洪水\"><a href=\"#毁天灭地的人类洪水\" class=\"headerlink\" title=\"毁天灭地的人类洪水\"></a>毁天灭地的人类洪水</h3><ul>\n<li>在历史上，人类首次抵达澳大利亚绝对算是大事一件，重要性不亚于哥伦布抵达美洲或是阿波罗11号登上月球</li>\n<li>智人灭绝澳大利亚大型动物的证据<ul>\n<li>大多数动物在智人来之前都活过了多次冰河期，但却基本都在智人登陆后灭绝</li>\n<li>同样是在澳大利亚，在那里的海洋生物却没有什么灭绝的变化</li>\n<li>这种灭绝现象，出现的时间点基本都是智人登陆的时间点</li>\n</ul>\n</li>\n<li>智人如何造成澳大利亚的生物灭绝<ul>\n<li>大型动物的繁衍周期较长，即使智人只是几个月捕杀一只，也会超过大型动物的生殖速度，使得在几千年时间内缓慢灭绝</li>\n<li>火耕技术改变了地貌，彻底改变生态</li>\n<li>气候变迁加上人类狩猎</li>\n</ul>\n</li>\n<li>智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫<ul>\n<li>在认知革命发生的时候，地球上大约有200属体重超过50公斤的大型陆生哺乳动物</li>\n<li>等到农业革命的时候，只剩下大约100属</li>\n<li>远在人类还没有发明轮子、文字和铁器之前，智人就已经让全球大约一半的大型兽类魂归西天、就此灭绝</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"农业革命\"><a href=\"#农业革命\" class=\"headerlink\" title=\"农业革命\"></a>农业革命</h2>"},{"title":"读书笔记-算法","date":"2022-03-24T01:07:11.000Z","comments":1,"_content":"![](algrithm.jpg)\n\n**配套网站：[](https://algs4.cs.princeton.edu/home/)**\n\n## 第一章 基础\n\n- 无论在任何应用领域，精心设计的算法都是解决大型问题最有效的方法\n- 我们把描述和实现算法所用到的语言特性、软件库和操作系统特性总称为**基础编程模型**\n- java程序的基本语法，同时也是多数程序语言的通用语法\n    - 原始数据类型：它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。\n        - int    32位整数(2^31=2147483648)\n            - 在java中int可表示的范围为（-2147483648——2147483647），2147483648会溢出变为-2147483648，因此Math.abs(-2147483648)=-214783648\n        - double 64位双精度实数\n        - 布尔型  true or false\n        - string 字符串\n        - long   64位整数\n        - short  16位整数(2^15=32768)\n        - char   16位字符\n        - byte   8位整数(2^7=128)\n        - float  32位单精度实数\n    - 语句：语句通过创建变量并对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句：**声明、赋值、条件、循环、调用和返回**\n        - java是一种强类型语言，编译器会检查类型一致性\n    - 数组：数组是多个同种数据类型的值的集合\n    - 静态方法：静态方法可以封装并重用代码，使我们可以用独立的模块开发程序\n    - 字符串：字符串是一连串的字符，Java内置了对它们的一些操作\n    - 标准输入/输出：标准输入输出是程序与外界联系的桥梁\n    - 数据抽象：数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程\n- 不同程序语言的运算符计算优先级会有不同，因此通常情况下用括号来进行优先级的改变\n- 方法的性质\n    - 方法的参数按值传递\n        - 调用方法时传递对象名也是值传递，意味着传递的是对象的别名，也就是对象的引用地址，所以在方法内修改其内容也会影响原始值\n    - 方法名可以重载\n    - 方法只能返回一个值，但是可以包含多个返回语句\n    - 方法可以产生副作用：在本书中，返回值是void的方法就是副作用\n- **递归原则**\n    - 递归总是在第一行就要包含一个包含return的条件语句\n    - 递归总是尝试先解决一个更小的问题\n    - 递归的父问题和子问题之间不应该有交集\n- **API的目的是将调用和实现分离**\n- 重定向和管道输入\n![](redirect.png)\n- Java表达式1/0和1.0/0.0的值是什么\n    - 第一个表达式会产生一个运行时除以零异常（它会终止程序，因为这个值是未定义的）；第二个表达式的值是Infinity（无穷大）。\n- 为什么数组的起始索引是0而不是1\n    - 这个习惯来源于机器语言，那时要计算一个数组元素的地址需要将数组的起始地址加上该元素的索引。将起始索引设为1要么会浪费数组的第一个元素的空间，要么会花费额外的时间来将索引减1\n- 每次使用new来创建一个对象时，系统都会\n    - 为新的对象分配内存空间\n    - 调用构造函数初始化对象中的值\n    - 返回该对象的一个引用 \n- 为什么要区别原始数据类型和引用类型？为什么不只用引用类型\n    - 因为性能。Java提供了Integer、Double等和原始数据类型对应的引用类型，以供希望忽略这些类型的区别的程序员使用。原始数据类型更接近计算机硬件所支持的数据类型，因此使用它们的程序比使用引用类型的程序运行得更快\n- 指针是什么？\n    - 和Java的引用一样，可以把指针看做机器地址。在许多编程语言中，指针是一种原始数据类型，程序员可以用各种方法操作它。\n    - 但众所周知，指针的编程非常容易出错，因此需要精心设计指针类的操作以帮助程序员避免错误。Java将这种观点发挥到了极致（许多主流编程语言的设计者也赞同这种做法）。\n    - 在Java中，创建引用的方法只有一种（new），且改变引用的方法也只有一种（赋值语句）。也就是说，程序员能对引用进行的操作只有创建和复制。\n    - 在编程语言的行话里，Java的引用被称为安全指针，因为Java能够保证每个引用都会指向某种类型的对象（而且它能找出无用的对象并将其回收）。\n- 栈用于带括号的运算符计算\n![dijkstra双栈算术表达式求值](dijkstra.png)\n- **Java标准库中有栈和队列吗**\n    - Java有一个内置的库，叫做java.util.Stack，但你需要栈的时候请不要使用它。\n    - 它新增了几个一般不属于栈的方法，例如获取第i个元素。它还允许从栈底添加元素（而非栈顶），所以它可以被当做队列使用\n    - java.util.Stack的API是**宽接口**的一个典型例子\n- **算法分析**\n    - 一个程序运行的总时间主要和两点有关\n        - 执行每条语句的耗时\n        - 执行每条语句的频率\n    - 常见的增长数量级函数\n    ![](algrithm1.png)\n    ![](algrithm2.png)\n    ![](algrithm3.png)\n    - 从增长率来看，效率排行是**常数>N>logN>N^2>2^N>N^3**\n- 解决3-sum问题\n    - 即在给定的数组中找到和为0的三个数\n    - 解决2-sum问题\n        - 使用归并排序对数组进行排序，复杂度为NlogN\n        - 遍历数组，第一个数找到后使用二分查找在排序后的数组中获取相反数，时间复杂度为NlogN\n        - 因此整个2-sum问题的时间复杂度为logN\n    - 将解决2-sum问题的方法推广\n        - 使用归并排序对数组进行排序，复杂度为NlogN\n        - 遍历数组，但是这时，需要遍历两遍，相当于先把两个数相加后再用二分法去找数组中的相反数，因此时间复杂度为(N^2)*logN\n        - 这样3-sum的问题的时间复杂度为(N^2)*logN\n    - 可以看到，针对这样的问题，先排序一遍所需的成本在总成本中几乎可以忽略不计，而排序后可以使用二分法则可以将整个时间复杂度降一个量级\n    ![](algrithm4.png)\n- 考虑数量级的注意事项\n    - 大常数，考虑数量级一般情况下不需要去考虑常数，如2N^2 + cN，通常情况下是看成N^2，然而如果某些情况下，c的值非常大，大到在具体业务场景中无法忽略的话，还是需要将常数考虑进去\n    - 非决定性的内循环\n        - 内循环是决定性因素的假设并不总是正确的\n        - 有些程序在内循环之外也有大量指令需要考虑\n    - 指令时间\n        - 每条指令执行所需的时间总是相同的假设并不总是正确的\n        - 例如，大多数现代计算机系统都会使用缓存技术来组织内存\n    - 系统因素\n        - Java只是争夺资源的众多应用程序之一，而且Java本身也有许多能够大大影响程序性能的选项和设置\n        - 某种垃圾收集器或是JIT编译器或是正在从因特网中进行的下载都可能极大地影响实验的结果\n    - **对输入的依赖**\n        - 某些特殊值导致的运行时间的陡然差异不应该考虑进我们对于程序整体运行时间的评估\n        - 考虑最坏情况下对于性能的保证\n        - 引入随机化算法\n            - 需要模拟随机数的输入\n        - 考虑操作序列\n            - 即某些情况下，进行ABC操作和进行CBA操作的顺序可能也会对性能造成影响\n        - 均摊分析\n            - 提供性能保证的另一种方法是通过记录所有操作的总成本并除以操作总数来将成本均摊    \n- **速度太慢的程序和错误的程序一样无用**\n- union-find算法\n    - 问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数pq可以被理解为“p和q是相连的”\n    - 规则\n        - 自反性：p和p是相连的\n        - 对称性：如果p和q是相连的，那么q和p也是相连的\n        - 传递性：如果p和q是相连的且q和r是相连的，那么p和r也是相连的\n    - 动态连通性问题\n        - 当程序从输入中读取了整数对pq时，如果已知的所有整数对都不能说明p和q是相连的，那么则将这一对整数写入到输出中\n        - 如果已知的数据可以说明p和q是相连的，那么程序应该忽略pq这对整数并继续处理输入中的下一对整数\n        ![](unionfind.png)\n    - 用处\n        - 这个程序能够判定我们是否需要在p和q之间架设一条新的连接才能进行通信，或是我们可以通过已有的连接在两者之间建立通信线路\n        - 这些整数表示的可能是社交网络中的人，而整数对表示的是朋友关系\n    - 术语\n        - 将对象称为**触点**，将整数对称为**连接**，将等价类称为**连通分量**或是简称**分量**\n    \n          \n              \n\n      \n","source":"_posts/read/读书笔记-算法.md","raw":"---\ntitle: 读书笔记-算法\ndate: 2022-03-24 09:07:11\ncomments: true\ncategories: \n- 读书笔记\n---\n![](algrithm.jpg)\n\n**配套网站：[](https://algs4.cs.princeton.edu/home/)**\n\n## 第一章 基础\n\n- 无论在任何应用领域，精心设计的算法都是解决大型问题最有效的方法\n- 我们把描述和实现算法所用到的语言特性、软件库和操作系统特性总称为**基础编程模型**\n- java程序的基本语法，同时也是多数程序语言的通用语法\n    - 原始数据类型：它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。\n        - int    32位整数(2^31=2147483648)\n            - 在java中int可表示的范围为（-2147483648——2147483647），2147483648会溢出变为-2147483648，因此Math.abs(-2147483648)=-214783648\n        - double 64位双精度实数\n        - 布尔型  true or false\n        - string 字符串\n        - long   64位整数\n        - short  16位整数(2^15=32768)\n        - char   16位字符\n        - byte   8位整数(2^7=128)\n        - float  32位单精度实数\n    - 语句：语句通过创建变量并对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句：**声明、赋值、条件、循环、调用和返回**\n        - java是一种强类型语言，编译器会检查类型一致性\n    - 数组：数组是多个同种数据类型的值的集合\n    - 静态方法：静态方法可以封装并重用代码，使我们可以用独立的模块开发程序\n    - 字符串：字符串是一连串的字符，Java内置了对它们的一些操作\n    - 标准输入/输出：标准输入输出是程序与外界联系的桥梁\n    - 数据抽象：数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程\n- 不同程序语言的运算符计算优先级会有不同，因此通常情况下用括号来进行优先级的改变\n- 方法的性质\n    - 方法的参数按值传递\n        - 调用方法时传递对象名也是值传递，意味着传递的是对象的别名，也就是对象的引用地址，所以在方法内修改其内容也会影响原始值\n    - 方法名可以重载\n    - 方法只能返回一个值，但是可以包含多个返回语句\n    - 方法可以产生副作用：在本书中，返回值是void的方法就是副作用\n- **递归原则**\n    - 递归总是在第一行就要包含一个包含return的条件语句\n    - 递归总是尝试先解决一个更小的问题\n    - 递归的父问题和子问题之间不应该有交集\n- **API的目的是将调用和实现分离**\n- 重定向和管道输入\n![](redirect.png)\n- Java表达式1/0和1.0/0.0的值是什么\n    - 第一个表达式会产生一个运行时除以零异常（它会终止程序，因为这个值是未定义的）；第二个表达式的值是Infinity（无穷大）。\n- 为什么数组的起始索引是0而不是1\n    - 这个习惯来源于机器语言，那时要计算一个数组元素的地址需要将数组的起始地址加上该元素的索引。将起始索引设为1要么会浪费数组的第一个元素的空间，要么会花费额外的时间来将索引减1\n- 每次使用new来创建一个对象时，系统都会\n    - 为新的对象分配内存空间\n    - 调用构造函数初始化对象中的值\n    - 返回该对象的一个引用 \n- 为什么要区别原始数据类型和引用类型？为什么不只用引用类型\n    - 因为性能。Java提供了Integer、Double等和原始数据类型对应的引用类型，以供希望忽略这些类型的区别的程序员使用。原始数据类型更接近计算机硬件所支持的数据类型，因此使用它们的程序比使用引用类型的程序运行得更快\n- 指针是什么？\n    - 和Java的引用一样，可以把指针看做机器地址。在许多编程语言中，指针是一种原始数据类型，程序员可以用各种方法操作它。\n    - 但众所周知，指针的编程非常容易出错，因此需要精心设计指针类的操作以帮助程序员避免错误。Java将这种观点发挥到了极致（许多主流编程语言的设计者也赞同这种做法）。\n    - 在Java中，创建引用的方法只有一种（new），且改变引用的方法也只有一种（赋值语句）。也就是说，程序员能对引用进行的操作只有创建和复制。\n    - 在编程语言的行话里，Java的引用被称为安全指针，因为Java能够保证每个引用都会指向某种类型的对象（而且它能找出无用的对象并将其回收）。\n- 栈用于带括号的运算符计算\n![dijkstra双栈算术表达式求值](dijkstra.png)\n- **Java标准库中有栈和队列吗**\n    - Java有一个内置的库，叫做java.util.Stack，但你需要栈的时候请不要使用它。\n    - 它新增了几个一般不属于栈的方法，例如获取第i个元素。它还允许从栈底添加元素（而非栈顶），所以它可以被当做队列使用\n    - java.util.Stack的API是**宽接口**的一个典型例子\n- **算法分析**\n    - 一个程序运行的总时间主要和两点有关\n        - 执行每条语句的耗时\n        - 执行每条语句的频率\n    - 常见的增长数量级函数\n    ![](algrithm1.png)\n    ![](algrithm2.png)\n    ![](algrithm3.png)\n    - 从增长率来看，效率排行是**常数>N>logN>N^2>2^N>N^3**\n- 解决3-sum问题\n    - 即在给定的数组中找到和为0的三个数\n    - 解决2-sum问题\n        - 使用归并排序对数组进行排序，复杂度为NlogN\n        - 遍历数组，第一个数找到后使用二分查找在排序后的数组中获取相反数，时间复杂度为NlogN\n        - 因此整个2-sum问题的时间复杂度为logN\n    - 将解决2-sum问题的方法推广\n        - 使用归并排序对数组进行排序，复杂度为NlogN\n        - 遍历数组，但是这时，需要遍历两遍，相当于先把两个数相加后再用二分法去找数组中的相反数，因此时间复杂度为(N^2)*logN\n        - 这样3-sum的问题的时间复杂度为(N^2)*logN\n    - 可以看到，针对这样的问题，先排序一遍所需的成本在总成本中几乎可以忽略不计，而排序后可以使用二分法则可以将整个时间复杂度降一个量级\n    ![](algrithm4.png)\n- 考虑数量级的注意事项\n    - 大常数，考虑数量级一般情况下不需要去考虑常数，如2N^2 + cN，通常情况下是看成N^2，然而如果某些情况下，c的值非常大，大到在具体业务场景中无法忽略的话，还是需要将常数考虑进去\n    - 非决定性的内循环\n        - 内循环是决定性因素的假设并不总是正确的\n        - 有些程序在内循环之外也有大量指令需要考虑\n    - 指令时间\n        - 每条指令执行所需的时间总是相同的假设并不总是正确的\n        - 例如，大多数现代计算机系统都会使用缓存技术来组织内存\n    - 系统因素\n        - Java只是争夺资源的众多应用程序之一，而且Java本身也有许多能够大大影响程序性能的选项和设置\n        - 某种垃圾收集器或是JIT编译器或是正在从因特网中进行的下载都可能极大地影响实验的结果\n    - **对输入的依赖**\n        - 某些特殊值导致的运行时间的陡然差异不应该考虑进我们对于程序整体运行时间的评估\n        - 考虑最坏情况下对于性能的保证\n        - 引入随机化算法\n            - 需要模拟随机数的输入\n        - 考虑操作序列\n            - 即某些情况下，进行ABC操作和进行CBA操作的顺序可能也会对性能造成影响\n        - 均摊分析\n            - 提供性能保证的另一种方法是通过记录所有操作的总成本并除以操作总数来将成本均摊    \n- **速度太慢的程序和错误的程序一样无用**\n- union-find算法\n    - 问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数pq可以被理解为“p和q是相连的”\n    - 规则\n        - 自反性：p和p是相连的\n        - 对称性：如果p和q是相连的，那么q和p也是相连的\n        - 传递性：如果p和q是相连的且q和r是相连的，那么p和r也是相连的\n    - 动态连通性问题\n        - 当程序从输入中读取了整数对pq时，如果已知的所有整数对都不能说明p和q是相连的，那么则将这一对整数写入到输出中\n        - 如果已知的数据可以说明p和q是相连的，那么程序应该忽略pq这对整数并继续处理输入中的下一对整数\n        ![](unionfind.png)\n    - 用处\n        - 这个程序能够判定我们是否需要在p和q之间架设一条新的连接才能进行通信，或是我们可以通过已有的连接在两者之间建立通信线路\n        - 这些整数表示的可能是社交网络中的人，而整数对表示的是朋友关系\n    - 术语\n        - 将对象称为**触点**，将整数对称为**连接**，将等价类称为**连通分量**或是简称**分量**\n    \n          \n              \n\n      \n","slug":"read/读书笔记-算法","published":1,"updated":"2022-03-25T08:58:15.000Z","_id":"cl14r9i1o0001bocf8vvv00n3","layout":"post","photos":[],"link":"","content":"<p><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm.jpg\"></p>\n<p><strong>配套网站：<a href=\"https://algs4.cs.princeton.edu/home/\"></a></strong></p>\n<h2 id=\"第一章-基础\"><a href=\"#第一章-基础\" class=\"headerlink\" title=\"第一章 基础\"></a>第一章 基础</h2><ul>\n<li>无论在任何应用领域，精心设计的算法都是解决大型问题最有效的方法</li>\n<li>我们把描述和实现算法所用到的语言特性、软件库和操作系统特性总称为<strong>基础编程模型</strong></li>\n<li>java程序的基本语法，同时也是多数程序语言的通用语法<ul>\n<li>原始数据类型：它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。<ul>\n<li>int    32位整数(2^31=2147483648)<ul>\n<li>在java中int可表示的范围为（-2147483648——2147483647），2147483648会溢出变为-2147483648，因此Math.abs(-2147483648)=-214783648</li>\n</ul>\n</li>\n<li>double 64位双精度实数</li>\n<li>布尔型  true or false</li>\n<li>string 字符串</li>\n<li>long   64位整数</li>\n<li>short  16位整数(2^15=32768)</li>\n<li>char   16位字符</li>\n<li>byte   8位整数(2^7=128)</li>\n<li>float  32位单精度实数</li>\n</ul>\n</li>\n<li>语句：语句通过创建变量并对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句：<strong>声明、赋值、条件、循环、调用和返回</strong><ul>\n<li>java是一种强类型语言，编译器会检查类型一致性</li>\n</ul>\n</li>\n<li>数组：数组是多个同种数据类型的值的集合</li>\n<li>静态方法：静态方法可以封装并重用代码，使我们可以用独立的模块开发程序</li>\n<li>字符串：字符串是一连串的字符，Java内置了对它们的一些操作</li>\n<li>标准输入/输出：标准输入输出是程序与外界联系的桥梁</li>\n<li>数据抽象：数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程</li>\n</ul>\n</li>\n<li>不同程序语言的运算符计算优先级会有不同，因此通常情况下用括号来进行优先级的改变</li>\n<li>方法的性质<ul>\n<li>方法的参数按值传递<ul>\n<li>调用方法时传递对象名也是值传递，意味着传递的是对象的别名，也就是对象的引用地址，所以在方法内修改其内容也会影响原始值</li>\n</ul>\n</li>\n<li>方法名可以重载</li>\n<li>方法只能返回一个值，但是可以包含多个返回语句</li>\n<li>方法可以产生副作用：在本书中，返回值是void的方法就是副作用</li>\n</ul>\n</li>\n<li><strong>递归原则</strong><ul>\n<li>递归总是在第一行就要包含一个包含return的条件语句</li>\n<li>递归总是尝试先解决一个更小的问题</li>\n<li>递归的父问题和子问题之间不应该有交集</li>\n</ul>\n</li>\n<li><strong>API的目的是将调用和实现分离</strong></li>\n<li>重定向和管道输入<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/redirect.png\"></li>\n<li>Java表达式1/0和1.0/0.0的值是什么<ul>\n<li>第一个表达式会产生一个运行时除以零异常（它会终止程序，因为这个值是未定义的）；第二个表达式的值是Infinity（无穷大）。</li>\n</ul>\n</li>\n<li>为什么数组的起始索引是0而不是1<ul>\n<li>这个习惯来源于机器语言，那时要计算一个数组元素的地址需要将数组的起始地址加上该元素的索引。将起始索引设为1要么会浪费数组的第一个元素的空间，要么会花费额外的时间来将索引减1</li>\n</ul>\n</li>\n<li>每次使用new来创建一个对象时，系统都会<ul>\n<li>为新的对象分配内存空间</li>\n<li>调用构造函数初始化对象中的值</li>\n<li>返回该对象的一个引用 </li>\n</ul>\n</li>\n<li>为什么要区别原始数据类型和引用类型？为什么不只用引用类型<ul>\n<li>因为性能。Java提供了Integer、Double等和原始数据类型对应的引用类型，以供希望忽略这些类型的区别的程序员使用。原始数据类型更接近计算机硬件所支持的数据类型，因此使用它们的程序比使用引用类型的程序运行得更快</li>\n</ul>\n</li>\n<li>指针是什么？<ul>\n<li>和Java的引用一样，可以把指针看做机器地址。在许多编程语言中，指针是一种原始数据类型，程序员可以用各种方法操作它。</li>\n<li>但众所周知，指针的编程非常容易出错，因此需要精心设计指针类的操作以帮助程序员避免错误。Java将这种观点发挥到了极致（许多主流编程语言的设计者也赞同这种做法）。</li>\n<li>在Java中，创建引用的方法只有一种（new），且改变引用的方法也只有一种（赋值语句）。也就是说，程序员能对引用进行的操作只有创建和复制。</li>\n<li>在编程语言的行话里，Java的引用被称为安全指针，因为Java能够保证每个引用都会指向某种类型的对象（而且它能找出无用的对象并将其回收）。</li>\n</ul>\n</li>\n<li>栈用于带括号的运算符计算<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/dijkstra.png\" alt=\"dijkstra双栈算术表达式求值\"></li>\n<li><strong>Java标准库中有栈和队列吗</strong><ul>\n<li>Java有一个内置的库，叫做java.util.Stack，但你需要栈的时候请不要使用它。</li>\n<li>它新增了几个一般不属于栈的方法，例如获取第i个元素。它还允许从栈底添加元素（而非栈顶），所以它可以被当做队列使用</li>\n<li>java.util.Stack的API是<strong>宽接口</strong>的一个典型例子</li>\n</ul>\n</li>\n<li><strong>算法分析</strong><ul>\n<li>一个程序运行的总时间主要和两点有关<ul>\n<li>执行每条语句的耗时</li>\n<li>执行每条语句的频率</li>\n</ul>\n</li>\n<li>常见的增长数量级函数<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm1.png\"><br><img src=\"/algrithm2.png\"><br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm3.png\"></li>\n<li>从增长率来看，效率排行是<strong>常数&gt;N&gt;logN&gt;N^2&gt;2^N&gt;N^3</strong></li>\n</ul>\n</li>\n<li>解决3-sum问题<ul>\n<li>即在给定的数组中找到和为0的三个数</li>\n<li>解决2-sum问题<ul>\n<li>使用归并排序对数组进行排序，复杂度为NlogN</li>\n<li>遍历数组，第一个数找到后使用二分查找在排序后的数组中获取相反数，时间复杂度为NlogN</li>\n<li>因此整个2-sum问题的时间复杂度为logN</li>\n</ul>\n</li>\n<li>将解决2-sum问题的方法推广<ul>\n<li>使用归并排序对数组进行排序，复杂度为NlogN</li>\n<li>遍历数组，但是这时，需要遍历两遍，相当于先把两个数相加后再用二分法去找数组中的相反数，因此时间复杂度为(N^2)*logN</li>\n<li>这样3-sum的问题的时间复杂度为(N^2)*logN</li>\n</ul>\n</li>\n<li>可以看到，针对这样的问题，先排序一遍所需的成本在总成本中几乎可以忽略不计，而排序后可以使用二分法则可以将整个时间复杂度降一个量级<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm4.png\"></li>\n</ul>\n</li>\n<li>考虑数量级的注意事项<ul>\n<li>大常数，考虑数量级一般情况下不需要去考虑常数，如2N^2 + cN，通常情况下是看成N^2，然而如果某些情况下，c的值非常大，大到在具体业务场景中无法忽略的话，还是需要将常数考虑进去</li>\n<li>非决定性的内循环<ul>\n<li>内循环是决定性因素的假设并不总是正确的</li>\n<li>有些程序在内循环之外也有大量指令需要考虑</li>\n</ul>\n</li>\n<li>指令时间<ul>\n<li>每条指令执行所需的时间总是相同的假设并不总是正确的</li>\n<li>例如，大多数现代计算机系统都会使用缓存技术来组织内存</li>\n</ul>\n</li>\n<li>系统因素<ul>\n<li>Java只是争夺资源的众多应用程序之一，而且Java本身也有许多能够大大影响程序性能的选项和设置</li>\n<li>某种垃圾收集器或是JIT编译器或是正在从因特网中进行的下载都可能极大地影响实验的结果</li>\n</ul>\n</li>\n<li><strong>对输入的依赖</strong><ul>\n<li>某些特殊值导致的运行时间的陡然差异不应该考虑进我们对于程序整体运行时间的评估</li>\n<li>考虑最坏情况下对于性能的保证</li>\n<li>引入随机化算法<ul>\n<li>需要模拟随机数的输入</li>\n</ul>\n</li>\n<li>考虑操作序列<ul>\n<li>即某些情况下，进行ABC操作和进行CBA操作的顺序可能也会对性能造成影响</li>\n</ul>\n</li>\n<li>均摊分析<ul>\n<li>提供性能保证的另一种方法是通过记录所有操作的总成本并除以操作总数来将成本均摊    </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>速度太慢的程序和错误的程序一样无用</strong></li>\n<li>union-find算法<ul>\n<li>问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数pq可以被理解为“p和q是相连的”</li>\n<li>规则<ul>\n<li>自反性：p和p是相连的</li>\n<li>对称性：如果p和q是相连的，那么q和p也是相连的</li>\n<li>传递性：如果p和q是相连的且q和r是相连的，那么p和r也是相连的</li>\n</ul>\n</li>\n<li>动态连通性问题<ul>\n<li>当程序从输入中读取了整数对pq时，如果已知的所有整数对都不能说明p和q是相连的，那么则将这一对整数写入到输出中</li>\n<li>如果已知的数据可以说明p和q是相连的，那么程序应该忽略pq这对整数并继续处理输入中的下一对整数<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/unionfind.png\"></li>\n</ul>\n</li>\n<li>用处<ul>\n<li>这个程序能够判定我们是否需要在p和q之间架设一条新的连接才能进行通信，或是我们可以通过已有的连接在两者之间建立通信线路</li>\n<li>这些整数表示的可能是社交网络中的人，而整数对表示的是朋友关系</li>\n</ul>\n</li>\n<li>术语<ul>\n<li>将对象称为<strong>触点</strong>，将整数对称为<strong>连接</strong>，将等价类称为<strong>连通分量</strong>或是简称<strong>分量</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm.jpg\"></p>\n<p><strong>配套网站：<a href=\"https://algs4.cs.princeton.edu/home/\"></a></strong></p>\n<h2 id=\"第一章-基础\"><a href=\"#第一章-基础\" class=\"headerlink\" title=\"第一章 基础\"></a>第一章 基础</h2><ul>\n<li>无论在任何应用领域，精心设计的算法都是解决大型问题最有效的方法</li>\n<li>我们把描述和实现算法所用到的语言特性、软件库和操作系统特性总称为<strong>基础编程模型</strong></li>\n<li>java程序的基本语法，同时也是多数程序语言的通用语法<ul>\n<li>原始数据类型：它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。<ul>\n<li>int    32位整数(2^31=2147483648)<ul>\n<li>在java中int可表示的范围为（-2147483648——2147483647），2147483648会溢出变为-2147483648，因此Math.abs(-2147483648)=-214783648</li>\n</ul>\n</li>\n<li>double 64位双精度实数</li>\n<li>布尔型  true or false</li>\n<li>string 字符串</li>\n<li>long   64位整数</li>\n<li>short  16位整数(2^15=32768)</li>\n<li>char   16位字符</li>\n<li>byte   8位整数(2^7=128)</li>\n<li>float  32位单精度实数</li>\n</ul>\n</li>\n<li>语句：语句通过创建变量并对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句：<strong>声明、赋值、条件、循环、调用和返回</strong><ul>\n<li>java是一种强类型语言，编译器会检查类型一致性</li>\n</ul>\n</li>\n<li>数组：数组是多个同种数据类型的值的集合</li>\n<li>静态方法：静态方法可以封装并重用代码，使我们可以用独立的模块开发程序</li>\n<li>字符串：字符串是一连串的字符，Java内置了对它们的一些操作</li>\n<li>标准输入/输出：标准输入输出是程序与外界联系的桥梁</li>\n<li>数据抽象：数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程</li>\n</ul>\n</li>\n<li>不同程序语言的运算符计算优先级会有不同，因此通常情况下用括号来进行优先级的改变</li>\n<li>方法的性质<ul>\n<li>方法的参数按值传递<ul>\n<li>调用方法时传递对象名也是值传递，意味着传递的是对象的别名，也就是对象的引用地址，所以在方法内修改其内容也会影响原始值</li>\n</ul>\n</li>\n<li>方法名可以重载</li>\n<li>方法只能返回一个值，但是可以包含多个返回语句</li>\n<li>方法可以产生副作用：在本书中，返回值是void的方法就是副作用</li>\n</ul>\n</li>\n<li><strong>递归原则</strong><ul>\n<li>递归总是在第一行就要包含一个包含return的条件语句</li>\n<li>递归总是尝试先解决一个更小的问题</li>\n<li>递归的父问题和子问题之间不应该有交集</li>\n</ul>\n</li>\n<li><strong>API的目的是将调用和实现分离</strong></li>\n<li>重定向和管道输入<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/redirect.png\"></li>\n<li>Java表达式1/0和1.0/0.0的值是什么<ul>\n<li>第一个表达式会产生一个运行时除以零异常（它会终止程序，因为这个值是未定义的）；第二个表达式的值是Infinity（无穷大）。</li>\n</ul>\n</li>\n<li>为什么数组的起始索引是0而不是1<ul>\n<li>这个习惯来源于机器语言，那时要计算一个数组元素的地址需要将数组的起始地址加上该元素的索引。将起始索引设为1要么会浪费数组的第一个元素的空间，要么会花费额外的时间来将索引减1</li>\n</ul>\n</li>\n<li>每次使用new来创建一个对象时，系统都会<ul>\n<li>为新的对象分配内存空间</li>\n<li>调用构造函数初始化对象中的值</li>\n<li>返回该对象的一个引用 </li>\n</ul>\n</li>\n<li>为什么要区别原始数据类型和引用类型？为什么不只用引用类型<ul>\n<li>因为性能。Java提供了Integer、Double等和原始数据类型对应的引用类型，以供希望忽略这些类型的区别的程序员使用。原始数据类型更接近计算机硬件所支持的数据类型，因此使用它们的程序比使用引用类型的程序运行得更快</li>\n</ul>\n</li>\n<li>指针是什么？<ul>\n<li>和Java的引用一样，可以把指针看做机器地址。在许多编程语言中，指针是一种原始数据类型，程序员可以用各种方法操作它。</li>\n<li>但众所周知，指针的编程非常容易出错，因此需要精心设计指针类的操作以帮助程序员避免错误。Java将这种观点发挥到了极致（许多主流编程语言的设计者也赞同这种做法）。</li>\n<li>在Java中，创建引用的方法只有一种（new），且改变引用的方法也只有一种（赋值语句）。也就是说，程序员能对引用进行的操作只有创建和复制。</li>\n<li>在编程语言的行话里，Java的引用被称为安全指针，因为Java能够保证每个引用都会指向某种类型的对象（而且它能找出无用的对象并将其回收）。</li>\n</ul>\n</li>\n<li>栈用于带括号的运算符计算<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/dijkstra.png\" alt=\"dijkstra双栈算术表达式求值\"></li>\n<li><strong>Java标准库中有栈和队列吗</strong><ul>\n<li>Java有一个内置的库，叫做java.util.Stack，但你需要栈的时候请不要使用它。</li>\n<li>它新增了几个一般不属于栈的方法，例如获取第i个元素。它还允许从栈底添加元素（而非栈顶），所以它可以被当做队列使用</li>\n<li>java.util.Stack的API是<strong>宽接口</strong>的一个典型例子</li>\n</ul>\n</li>\n<li><strong>算法分析</strong><ul>\n<li>一个程序运行的总时间主要和两点有关<ul>\n<li>执行每条语句的耗时</li>\n<li>执行每条语句的频率</li>\n</ul>\n</li>\n<li>常见的增长数量级函数<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm1.png\"><br><img src=\"/algrithm2.png\"><br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm3.png\"></li>\n<li>从增长率来看，效率排行是<strong>常数&gt;N&gt;logN&gt;N^2&gt;2^N&gt;N^3</strong></li>\n</ul>\n</li>\n<li>解决3-sum问题<ul>\n<li>即在给定的数组中找到和为0的三个数</li>\n<li>解决2-sum问题<ul>\n<li>使用归并排序对数组进行排序，复杂度为NlogN</li>\n<li>遍历数组，第一个数找到后使用二分查找在排序后的数组中获取相反数，时间复杂度为NlogN</li>\n<li>因此整个2-sum问题的时间复杂度为logN</li>\n</ul>\n</li>\n<li>将解决2-sum问题的方法推广<ul>\n<li>使用归并排序对数组进行排序，复杂度为NlogN</li>\n<li>遍历数组，但是这时，需要遍历两遍，相当于先把两个数相加后再用二分法去找数组中的相反数，因此时间复杂度为(N^2)*logN</li>\n<li>这样3-sum的问题的时间复杂度为(N^2)*logN</li>\n</ul>\n</li>\n<li>可以看到，针对这样的问题，先排序一遍所需的成本在总成本中几乎可以忽略不计，而排序后可以使用二分法则可以将整个时间复杂度降一个量级<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/algrithm4.png\"></li>\n</ul>\n</li>\n<li>考虑数量级的注意事项<ul>\n<li>大常数，考虑数量级一般情况下不需要去考虑常数，如2N^2 + cN，通常情况下是看成N^2，然而如果某些情况下，c的值非常大，大到在具体业务场景中无法忽略的话，还是需要将常数考虑进去</li>\n<li>非决定性的内循环<ul>\n<li>内循环是决定性因素的假设并不总是正确的</li>\n<li>有些程序在内循环之外也有大量指令需要考虑</li>\n</ul>\n</li>\n<li>指令时间<ul>\n<li>每条指令执行所需的时间总是相同的假设并不总是正确的</li>\n<li>例如，大多数现代计算机系统都会使用缓存技术来组织内存</li>\n</ul>\n</li>\n<li>系统因素<ul>\n<li>Java只是争夺资源的众多应用程序之一，而且Java本身也有许多能够大大影响程序性能的选项和设置</li>\n<li>某种垃圾收集器或是JIT编译器或是正在从因特网中进行的下载都可能极大地影响实验的结果</li>\n</ul>\n</li>\n<li><strong>对输入的依赖</strong><ul>\n<li>某些特殊值导致的运行时间的陡然差异不应该考虑进我们对于程序整体运行时间的评估</li>\n<li>考虑最坏情况下对于性能的保证</li>\n<li>引入随机化算法<ul>\n<li>需要模拟随机数的输入</li>\n</ul>\n</li>\n<li>考虑操作序列<ul>\n<li>即某些情况下，进行ABC操作和进行CBA操作的顺序可能也会对性能造成影响</li>\n</ul>\n</li>\n<li>均摊分析<ul>\n<li>提供性能保证的另一种方法是通过记录所有操作的总成本并除以操作总数来将成本均摊    </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>速度太慢的程序和错误的程序一样无用</strong></li>\n<li>union-find算法<ul>\n<li>问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数pq可以被理解为“p和q是相连的”</li>\n<li>规则<ul>\n<li>自反性：p和p是相连的</li>\n<li>对称性：如果p和q是相连的，那么q和p也是相连的</li>\n<li>传递性：如果p和q是相连的且q和r是相连的，那么p和r也是相连的</li>\n</ul>\n</li>\n<li>动态连通性问题<ul>\n<li>当程序从输入中读取了整数对pq时，如果已知的所有整数对都不能说明p和q是相连的，那么则将这一对整数写入到输出中</li>\n<li>如果已知的数据可以说明p和q是相连的，那么程序应该忽略pq这对整数并继续处理输入中的下一对整数<br><img src=\"/2022/03/24/read/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/unionfind.png\"></li>\n</ul>\n</li>\n<li>用处<ul>\n<li>这个程序能够判定我们是否需要在p和q之间架设一条新的连接才能进行通信，或是我们可以通过已有的连接在两者之间建立通信线路</li>\n<li>这些整数表示的可能是社交网络中的人，而整数对表示的是朋友关系</li>\n</ul>\n</li>\n<li>术语<ul>\n<li>将对象称为<strong>触点</strong>，将整数对称为<strong>连接</strong>，将等价类称为<strong>连通分量</strong>或是简称<strong>分量</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/news/新闻翻译-2/1.png","slug":"1.png","post":"cl102vqls0000tccf84sp3870","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/CmonCmon.jpeg","slug":"CmonCmon.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/DriveMyCar.jpeg","slug":"DriveMyCar.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/ParallelMothers.jpeg","slug":"ParallelMothers.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/Passing.jpeg","slug":"Passing.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/SummerofSoul.jpeg","slug":"SummerofSoul.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/TheDisciple.jpeg","slug":"TheDisciple.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/ThePoweroftheDog.jpeg","slug":"ThePoweroftheDog.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/TheSouvenirPartII.jpeg","slug":"TheSouvenirPartII.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/TheTragedyofMacbeth.jpg","slug":"TheTragedyofMacbeth.jpg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-3/TheWorstPersonintheWorld.jpeg","slug":"TheWorstPersonintheWorld.jpeg","post":"cl102wmze0005tccfdej0catr","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/chicory.jpg","slug":"chicory.jpg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/deathloop.jpeg","slug":"deathloop.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/discoelysium.jpeg","slug":"discoelysium.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/enderlilies.jpg","slug":"enderlilies.jpg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/forzahorizon5.jpeg","slug":"forzahorizon5.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/hitman3.jpg","slug":"hitman3.jpg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/ittakestwo.jpeg","slug":"ittakestwo.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/masseffect.jpeg","slug":"masseffect.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/psychonauts2.jpeg","slug":"psychonauts2.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-Metacritic评选的2021年度十佳pc游戏/wildermyth.jpeg","slug":"wildermyth.jpeg","post":"cl102wn0h000atccf4fp9b8yi","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone.png","slug":"bone.png","post":"cl102wnad000ftccfarkwes78","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone2.png","slug":"bone2.png","post":"cl102wnad000ftccfarkwes78","modified":0,"renderable":0},{"_id":"source/_posts/news/新闻翻译-地质发现罕见的中古符文/bone3.png","slug":"bone3.png","post":"cl102wnad000ftccfarkwes78","modified":0,"renderable":0},{"_id":"source/_posts/tech/OracleJDBC/1.png","slug":"1.png","post":"cl102yqll000ktccf8tzfgpb9","modified":0,"renderable":0},{"_id":"source/_posts/tech/OracleJDBC/2.png","slug":"2.png","post":"cl102yqll000ktccf8tzfgpb9","modified":0,"renderable":0},{"_id":"source/_posts/tech/OracleJDBC/3.png","slug":"3.png","post":"cl102yqll000ktccf8tzfgpb9","modified":0,"renderable":0},{"_id":"source/_posts/tech/OracleJDBC/4.png","slug":"4.png","post":"cl102yqll000ktccf8tzfgpb9","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/1.png","slug":"1.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/10.png","slug":"10.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/11.png","slug":"11.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/2.png","slug":"2.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/3.png","slug":"3.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/4.png","slug":"4.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/5.png","slug":"5.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/6.png","slug":"6.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/7.png","slug":"7.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/8.png","slug":"8.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/Python数据爬虫实践-爬取历年东西部周最佳对比/9.png","slug":"9.png","post":"cl102yqp2000otccf0hwwdr6d","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/1.png","slug":"1.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/10.png","slug":"10.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/11.png","slug":"11.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/2.png","slug":"2.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/3.png","slug":"3.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/4.png","slug":"4.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/5.png","slug":"5.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/6.png","slug":"6.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/7.png","slug":"7.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/8.png","slug":"8.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK_FileBeats/9.png","slug":"9.png","post":"cl102yt4d002atccff2q088yz","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/1.png","slug":"1.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/2.png","slug":"2.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/3.png","slug":"3.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/4.png","slug":"4.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/5.png","slug":"5.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/azkaban简单搭建/6.png","slug":"6.png","post":"cl102ytb2002etccf83dueq6f","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK日常维护相关/1.png","slug":"1.png","post":"cl102yszo0026tccfdxv79d64","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK日常维护相关/2.png","slug":"2.png","post":"cl102yszo0026tccfdxv79d64","modified":0,"renderable":0},{"_id":"source/_posts/tech/ELK日常维护相关/3.png","slug":"3.png","post":"cl102yszo0026tccfdxv79d64","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/1.png","slug":"1.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/2.png","slug":"2.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/3.png","slug":"3.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/4.png","slug":"4.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/5.png","slug":"5.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/6.png","slug":"6.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/7.png","slug":"7.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/8.png","slug":"8.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/hexo使用技巧/9.png","slug":"9.png","post":"cl102ysr6001xtccf2nqlhofr","modified":0,"renderable":0},{"_id":"source/_posts/tech/jenkins简单搭建/1.png","slug":"1.png","post":"cl102ysl3001ttccf6iak8iec","modified":0,"renderable":0},{"_id":"source/_posts/tech/jenkins简单搭建/2.png","slug":"2.png","post":"cl102ysl3001ttccf6iak8iec","modified":0,"renderable":0},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/1.png","slug":"1.png","post":"cl102yr16000qtccf3bqa4ll6","modified":0,"renderable":0},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/2.png","slug":"2.png","post":"cl102yr16000qtccf3bqa4ll6","modified":0,"renderable":0},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/3.png","slug":"3.png","post":"cl102yr16000qtccf3bqa4ll6","modified":0,"renderable":0},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/4.png","slug":"4.png","post":"cl102yr16000qtccf3bqa4ll6","modified":0,"renderable":0},{"_id":"source/_posts/tech/利用hexo和github搭建个人博客/5.png","slug":"5.png","post":"cl102yr16000qtccf3bqa4ll6","modified":0,"renderable":0},{"_id":"source/_posts/tech/记一次用代码分辨坑爹保险产品的经历/1.png","slug":"1.png","post":"cl102yruq001ftccf1wgi0r8c","modified":0,"renderable":0},{"_id":"source/_posts/blog/一周技术博客收集-20210117/blog.jpg","slug":"blog.jpg","post":"cl102ztsn002ntccf6xg7ctsn","modified":0,"renderable":0},{"_id":"source/_posts/blog/一周技术博客收集-20210117/map1.png","slug":"map1.png","post":"cl102ztsn002ntccf6xg7ctsn","modified":0,"renderable":0},{"_id":"source/_posts/blog/一周技术博客收集-20210117/programmerhumor.png","slug":"programmerhumor.png","post":"cl102ztsn002ntccf6xg7ctsn","modified":0,"renderable":0},{"_id":"source/_posts/blog/一周技术博客收集-20220124/wordle.png","slug":"wordle.png","post":"cl102ztwi002ptccf939p194y","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-置身事内/1.jpg","slug":"1.jpg","post":"cl103087z002vtccf1orv7ch8","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/1.jpg","slug":"1.jpg","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree.png","slug":"tree.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree2.png","slug":"tree2.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree3.png","slug":"tree3.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree4.png","slug":"tree4.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree5.png","slug":"tree5.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree6.png","slug":"tree6.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree7.png","slug":"tree7.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/tree8.png","slug":"tree8.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/graph.png","slug":"graph.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-数据结构和算法图解/graph2.png","slug":"graph2.png","post":"cl11x5xgk00000acfc0xj0how","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-人类简史/human1.png","slug":"human1.png","post":"cl14r9i1l0000bocf47to21ws","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-人类简史/humanhistory.jpg","slug":"humanhistory.jpg","post":"cl14r9i1l0000bocf47to21ws","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/algrithm.jpg","slug":"algrithm.jpg","post":"cl14r9i1o0001bocf8vvv00n3","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/redirect.png","slug":"redirect.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":0,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/algrithm1.png","slug":"algrithm1.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":1,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/algrithm3.png","slug":"algrithm3.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":1,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/algrithm4.png","slug":"algrithm4.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":1,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/dijkstra.png","slug":"dijkstra.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":1,"renderable":0},{"_id":"source/_posts/read/读书笔记-算法/unionfind.png","slug":"unionfind.png","post":"cl14r9i1o0001bocf8vvv00n3","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cl102u18f0000t3cf0k4dfg0s","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102u19r0003t3cfgxsedfbn"},{"post_id":"cl102u18f0000t3cf0k4dfg0s","category_id":"ckwbrq8wn001upzcf2yx67qm1","_id":"cl102u19r0004t3cf6r9hfmej"},{"post_id":"cl102vqls0000tccf84sp3870","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102vqlv0003tccf4yr9gcb9"},{"post_id":"cl102vqls0000tccf84sp3870","category_id":"ckwbrq8wn001upzcf2yx67qm1","_id":"cl102vqlv0004tccf1wtra53l"},{"post_id":"cl102wmze0005tccfdej0catr","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102wmzh0008tccffwzcclsp"},{"post_id":"cl102wmze0005tccfdej0catr","category_id":"ckwbrq8wn001upzcf2yx67qm1","_id":"cl102wmzh0009tccfgjuua622"},{"post_id":"cl102wn0h000atccf4fp9b8yi","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102wn0i000dtccfex4m1tkp"},{"post_id":"cl102wn0h000atccf4fp9b8yi","category_id":"ckwbrq8wn001upzcf2yx67qm1","_id":"cl102wn0i000etccfhrb99csm"},{"post_id":"cl102wnad000ftccfarkwes78","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102wnag000itccf9gqm75d1"},{"post_id":"cl102wnad000ftccfarkwes78","category_id":"ckwbrq8wn001upzcf2yx67qm1","_id":"cl102wnag000jtccf9y8k1q4r"},{"post_id":"cl102yqll000ktccf8tzfgpb9","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yqlm000mtccfhit4195i"},{"post_id":"cl102yqll000ktccf8tzfgpb9","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yqlm000ntccf386xc1vy"},{"post_id":"cl102yr16000qtccf3bqa4ll6","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yr17000ttccfahnv8ph6"},{"post_id":"cl102yr16000qtccf3bqa4ll6","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yr17000utccfhzk52gtv"},{"post_id":"cl102yr27000vtccfep8a2wqo","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yr28000ytccfao020nju"},{"post_id":"cl102yr27000vtccfep8a2wqo","category_id":"ckwbrq8wm001opzcfcfyoedko","_id":"cl102yr28000ztccf4hyah0ie"},{"post_id":"cl102yr8e0010tccfg7dn4n70","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yr8e0011tccfgaly9g20"},{"post_id":"cl102yr8e0010tccfg7dn4n70","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yr8f0012tccf44id31p4"},{"post_id":"cl102yrep0013tccfha3wbwfy","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yreq0016tccf3wyrd9f6"},{"post_id":"cl102yrji0017tccf9cjvejsf","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yrjj001atccfh33p9s2q"},{"post_id":"cl102yrtc001btccf78nwcxgx","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yrtd001dtccfbfvodn0w"},{"post_id":"cl102yrtc001btccf78nwcxgx","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yrtd001etccfbxpfdill"},{"post_id":"cl102yruq001ftccf1wgi0r8c","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yrur001htccf0he826dq"},{"post_id":"cl102ys6h001itccf61phbyhc","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ys6j001jtccf34ca46rc"},{"post_id":"cl102ys6h001itccf61phbyhc","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102ys6j001ktccf54m08ir5"},{"post_id":"cl102ysex001ltccfh7mxco3k","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ysey001ntccfcz969l2y"},{"post_id":"cl102ysex001ltccfh7mxco3k","category_id":"ckwbrq8wj001bpzcfdrahbhmm","_id":"cl102ysey001otccfda72hqs5"},{"post_id":"cl102ysg8001ptccfhf75ca8q","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ysg9001rtccfe0bcggiy"},{"post_id":"cl102ysg8001ptccfhf75ca8q","category_id":"ckwbrq8wj001bpzcfdrahbhmm","_id":"cl102ysg9001stccfhyx6hbcw"},{"post_id":"cl102ysl3001ttccf6iak8iec","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ysl4001vtccfbj6pd7ij"},{"post_id":"cl102ysl3001ttccf6iak8iec","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102ysl4001wtccf2yz5citt"},{"post_id":"cl102ysr6001xtccf2nqlhofr","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ysr7001ztccf9q0ldze0"},{"post_id":"cl102ysr6001xtccf2nqlhofr","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102ysr70020tccfh1p222n3"},{"post_id":"cl102ysw00021tccfew378250","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ysw10024tccfakb94hb2"},{"post_id":"cl102ysw00021tccfew378250","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102ysw10025tccf5k0d6zc7"},{"post_id":"cl102yszo0026tccfdxv79d64","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yszp0028tccf054c9r4x"},{"post_id":"cl102yszo0026tccfdxv79d64","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yszp0029tccfadynfreo"},{"post_id":"cl102yt4d002atccff2q088yz","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yt4e002ctccf9jbu459u"},{"post_id":"cl102yt4d002atccff2q088yz","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102yt4e002dtccf6o5q24hz"},{"post_id":"cl102ytb2002etccf83dueq6f","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102ytb3002gtccf2lv24t51"},{"post_id":"cl102ytb2002etccf83dueq6f","category_id":"ckwbrq8w9000jpzcf3bmxawao","_id":"cl102ytb3002htccfgi1j1wgn"},{"post_id":"cl102yupw002itccf6et16b6z","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102yupx002ltccfeww75vfr"},{"post_id":"cl102yupw002itccf6et16b6z","category_id":"ckwbrq8wm001opzcfcfyoedko","_id":"cl102yupx002mtccf50lw5k75"},{"post_id":"cl102ztsn002ntccf6xg7ctsn","category_id":"ckysb4jyw0001vkcfh4d4douy","_id":"cl102ztso002otccf9nsnd1ac"},{"post_id":"cl102ztwi002ptccf939p194y","category_id":"ckysb4jyw0001vkcfh4d4douy","_id":"cl102ztwj002qtccfbujsd7lk"},{"post_id":"cl102zu4l002rtccff2crbbuc","category_id":"ckwbrq8w00004pzcf5fbk7ttk","_id":"cl102zu4m002utccf6c0cbuxk"},{"post_id":"cl103087z002vtccf1orv7ch8","category_id":"cl0qc9onk0001jhcf4jgs2j0j","_id":"cl103087z002wtccf6r110xf8"},{"post_id":"cl11x5xgk00000acfc0xj0how","category_id":"cl0qc9onk0001jhcf4jgs2j0j","_id":"cl11x5xgp00010acf5wqu6po8"},{"post_id":"cl14r9i1l0000bocf47to21ws","category_id":"cl0qc9onk0001jhcf4jgs2j0j","_id":"cl14r9i1p0002bocfgyeb1q58"},{"post_id":"cl14r9i1o0001bocf8vvv00n3","category_id":"cl0qc9onk0001jhcf4jgs2j0j","_id":"cl14r9i1q0003bocf2tnvaxb8"}],"PostTag":[{"post_id":"cl102u18f0000t3cf0k4dfg0s","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102u19r0001t3cf2mwcf836"},{"post_id":"cl102u18f0000t3cf0k4dfg0s","tag_id":"ckwbrq8wo0022pzcfcpdp4xcu","_id":"cl102u19r0002t3cfddll5858"},{"post_id":"cl102vqls0000tccf84sp3870","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102vqlu0001tccf76g4al7k"},{"post_id":"cl102vqls0000tccf84sp3870","tag_id":"ckwbrq8wo0022pzcfcpdp4xcu","_id":"cl102vqlv0002tccfb9349jf2"},{"post_id":"cl102wmze0005tccfdej0catr","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102wmzf0006tccfe9c444m8"},{"post_id":"cl102wmze0005tccfdej0catr","tag_id":"ckwbrq8wo0022pzcfcpdp4xcu","_id":"cl102wmzh0007tccf1a0v3htj"},{"post_id":"cl102wn0h000atccf4fp9b8yi","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102wn0i000btccfee2hao7s"},{"post_id":"cl102wn0h000atccf4fp9b8yi","tag_id":"ckwbrq8wo0022pzcfcpdp4xcu","_id":"cl102wn0i000ctccfe495eflr"},{"post_id":"cl102wnad000ftccfarkwes78","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102wnag000gtccf9hib6zv2"},{"post_id":"cl102wnad000ftccfarkwes78","tag_id":"ckwbrq8wo0022pzcfcpdp4xcu","_id":"cl102wnag000htccf2vc79elv"},{"post_id":"cl102yqll000ktccf8tzfgpb9","tag_id":"ckwbrq8w7000fpzcffegkde45","_id":"cl102yqlm000ltccf3tvxapdp"},{"post_id":"cl102yqp2000otccf0hwwdr6d","tag_id":"ckwbrq8wa000kpzcfhhob9uzb","_id":"cl102yqp2000ptccf0wi1gnp4"},{"post_id":"cl102yr16000qtccf3bqa4ll6","tag_id":"ckwbrq8wg000vpzcfbkk12owx","_id":"cl102yr17000rtccf0s7ka40u"},{"post_id":"cl102yr16000qtccf3bqa4ll6","tag_id":"ckwbrq8wk001ipzcf8mvm4cr5","_id":"cl102yr17000stccf180g4wj6"},{"post_id":"cl102yr27000vtccfep8a2wqo","tag_id":"ckwbrq8wl001mpzcf1czcbfgr","_id":"cl102yr28000wtccf5dpm8rkf"},{"post_id":"cl102yr27000vtccfep8a2wqo","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102yr28000xtccfeau86xcb"},{"post_id":"cl102yrep0013tccfha3wbwfy","tag_id":"ckwbrq8wj0018pzcffkrqe3hy","_id":"cl102yreq0014tccf0wwqd2co"},{"post_id":"cl102yrep0013tccfha3wbwfy","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102yreq0015tccfe00v5s7j"},{"post_id":"cl102yrji0017tccf9cjvejsf","tag_id":"ckwbrq8wj0018pzcffkrqe3hy","_id":"cl102yrjj0018tccf32clf9a0"},{"post_id":"cl102yrji0017tccf9cjvejsf","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102yrjj0019tccffci98kml"},{"post_id":"cl102yrtc001btccf78nwcxgx","tag_id":"ckwbrq8w7000fpzcffegkde45","_id":"cl102yrtd001ctccf9qbndvs5"},{"post_id":"cl102yruq001ftccf1wgi0r8c","tag_id":"ckwbrq8w7000fpzcffegkde45","_id":"cl102yrur001gtccfhx2x8gpd"},{"post_id":"cl102ysex001ltccfh7mxco3k","tag_id":"ckwbrq8wj0018pzcffkrqe3hy","_id":"cl102ysey001mtccf6xll3h22"},{"post_id":"cl102ysg8001ptccfhf75ca8q","tag_id":"ckwbrq8wj0018pzcffkrqe3hy","_id":"cl102ysg9001qtccf6kr05sdi"},{"post_id":"cl102ysl3001ttccf6iak8iec","tag_id":"ckwbrq8wi0012pzcf4zmk0siz","_id":"cl102ysl4001utccfbtn5am2z"},{"post_id":"cl102ysr6001xtccf2nqlhofr","tag_id":"ckwbrq8wg000vpzcfbkk12owx","_id":"cl102ysr7001ytccf1kfa2vow"},{"post_id":"cl102ysw00021tccfew378250","tag_id":"ckwfryief0001xqcfep3ghlve","_id":"cl102ysw10022tccfa95igrpj"},{"post_id":"cl102ysw00021tccfew378250","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102ysw10023tccfgdcs7fbj"},{"post_id":"cl102yszo0026tccfdxv79d64","tag_id":"ckwbrq8w10005pzcfb0a4bl4i","_id":"cl102yszp0027tccf2b3fblwb"},{"post_id":"cl102yt4d002atccff2q088yz","tag_id":"ckwbrq8w10005pzcfb0a4bl4i","_id":"cl102yt4e002btccf0kt885tr"},{"post_id":"cl102ytb2002etccf83dueq6f","tag_id":"ckwbrq8wd000ppzcfe5hy152a","_id":"cl102ytb3002ftccfcjv0em2l"},{"post_id":"cl102yupw002itccf6et16b6z","tag_id":"ckwbrq8wl001mpzcf1czcbfgr","_id":"cl102yupx002jtccf2hinb3xa"},{"post_id":"cl102yupw002itccf6et16b6z","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102yupx002ktccf1rizbuyf"},{"post_id":"cl102zu4l002rtccff2crbbuc","tag_id":"ckwbrq8wj0018pzcffkrqe3hy","_id":"cl102zu4m002stccf7il28jb2"},{"post_id":"cl102zu4l002rtccff2crbbuc","tag_id":"ckwbrq8wm001spzcf9eek12ni","_id":"cl102zu4m002ttccf0uytgnk9"}],"Tag":[{"name":"elk","_id":"ckwbrq8w10005pzcfb0a4bl4i"},{"name":"solved","_id":"ckwbrq8w7000fpzcffegkde45"},{"name":"python","_id":"ckwbrq8wa000kpzcfhhob9uzb"},{"name":"azkaban","_id":"ckwbrq8wd000ppzcfe5hy152a"},{"name":"hexo","_id":"ckwbrq8wg000vpzcfbkk12owx"},{"name":"jenkins","_id":"ckwbrq8wi0012pzcf4zmk0siz"},{"name":"linux","_id":"ckwbrq8wj0018pzcffkrqe3hy"},{"name":"github","_id":"ckwbrq8wk001ipzcf8mvm4cr5"},{"name":"mysql","_id":"ckwbrq8wl001mpzcf1czcbfgr"},{"name":"translate","_id":"ckwbrq8wm001spzcf9eek12ni"},{"name":"news","_id":"ckwbrq8wo0022pzcfcpdp4xcu"},{"name":"node.js","_id":"ckwfryief0001xqcfep3ghlve"}]}}